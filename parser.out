Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
Rule 2     programa1 -> ID SEMICOLON vars
Rule 3     programa1 -> ID SEMICOLON
Rule 4     programa2 -> funciones
Rule 5     programa2 -> epsilon
Rule 6     programa3 -> estatutos
Rule 7     programa3 -> epsilon
Rule 8     programa_punto1 -> epsilon
Rule 9     main -> MAIN
Rule 10    vars -> VARS vars1
Rule 11    vars1 -> tipo COLON vars2
Rule 12    vars2 -> ID vars3
Rule 13    vars3 -> OPENBOX INT CLOSEBOX vars4
Rule 14    vars3 -> vars4
Rule 15    vars4 -> SEMICOLON vars5
Rule 16    vars4 -> COMMA vars2
Rule 17    vars5 -> vars1
Rule 18    vars5 -> epsilon
Rule 19    lista_ids -> lista_ids1 lista_ids2
Rule 20    lista_ids -> ID lista_ids2
Rule 21    lista_ids1 -> ID OPENBOX block exp CLOSEBOX unblock
Rule 22    lista_ids2 -> COMMA lista_ids
Rule 23    lista_ids2 -> epsilon
Rule 24    tipo -> TYPEFLOAT
Rule 25    tipo -> TYPEINT
Rule 26    tipo -> TYPECHAR
Rule 27    tipo_void -> TYPEVOID
Rule 28    funciones -> FUNCTION funciones1
Rule 29    funciones -> epsilon
Rule 30    funciones1 -> tipo funciones2 funciones3
Rule 31    funciones1 -> tipo_void funciones2 funciones3
Rule 32    funciones2 -> ID OPENPAR
Rule 33    funciones3 -> parameters funciones4
Rule 34    funciones3 -> funciones4
Rule 35    funciones4 -> CLOSEPAR funciones5
Rule 36    funciones5 -> vars funciones_punto1 OPENCURLY funciones6
Rule 37    funciones5 -> funciones_punto1 OPENCURLY funciones6
Rule 38    funciones6 -> estatutos funciones6
Rule 39    funciones6 -> CLOSECURLY funciones_punto2 funciones
Rule 40    funciones_punto1 -> epsilon
Rule 41    funciones_punto2 -> epsilon
Rule 42    parameters -> tipo ID parameters1
Rule 43    parameters1 -> COMMA parameters
Rule 44    parameters1 -> epsilon
Rule 45    estatutos -> asignacion estatutos1
Rule 46    estatutos -> llamada estatutos1
Rule 47    estatutos -> retorno estatutos1
Rule 48    estatutos -> lectura estatutos1
Rule 49    estatutos -> escritura estatutos1
Rule 50    estatutos -> condicion estatutos1
Rule 51    estatutos -> while estatutos1
Rule 52    estatutos -> for estatutos1
Rule 53    estatutos -> est_exp estatutos1
Rule 54    estatutos1 -> estatutos
Rule 55    estatutos1 -> epsilon
Rule 56    asignacion -> asignacion1 expresion SEMICOLON
Rule 57    asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock
Rule 58    asignacion1 -> ID IS
Rule 59    llamada -> funcion SEMICOLON
Rule 60    funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3
Rule 61    funcion1 -> exp funcion_punto2 funcion2
Rule 62    funcion1 -> CLOSEPAR
Rule 63    funcion2 -> COMMA funcion1
Rule 64    funcion2 -> CLOSEPAR
Rule 65    funcion_punto1 -> ID
Rule 66    funcion_punto2 -> epsilon
Rule 67    funcion_punto3 -> epsilon
Rule 68    retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON
Rule 69    lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON
Rule 70    escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
Rule 71    escritura1 -> escritura_string escritura2
Rule 72    escritura1 -> escritura_expresion escritura2
Rule 73    escritura2 -> COMMA escritura1
Rule 74    escritura2 -> epsilon
Rule 75    escritura_string -> STRING
Rule 76    escritura_expresion -> expresion
Rule 77    condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
Rule 78    condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
Rule 79    condicion1 -> condicion_punto2 epsilon
Rule 80    condicion_punto1 -> epsilon
Rule 81    condicion_punto2 -> epsilon
Rule 82    condicion_punto3 -> epsilon
Rule 83    condicion_punto4 -> epsilon
Rule 84    while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
Rule 85    while_punto1 -> epsilon
Rule 86    while_punto2 -> epsilon
Rule 87    while_punto3 -> epsilon
Rule 88    for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
Rule 89    for1 -> ID OPENBOX block exp CLOSEBOX unblock
Rule 90    for1 -> ID
Rule 91    for_punto1 -> epsilon
Rule 92    for_punto2 -> epsilon
Rule 93    for_punto3 -> epsilon
Rule 94    est_exp -> expresion SEMICOLON
Rule 95    expresion -> and generate_expresion
Rule 96    expresion -> and generate_expresion expresion1 expresion
Rule 97    expresion1 -> OR
Rule 98    generate_expresion -> epsilon
Rule 99    and -> equal generate_and
Rule 100   and -> equal generate_and and1 and
Rule 101   and1 -> AND
Rule 102   generate_and -> epsilon
Rule 103   equal -> compare generate_equal
Rule 104   equal -> compare generate_equal equal1 equal
Rule 105   equal1 -> EQ
Rule 106   equal1 -> NE
Rule 107   generate_equal -> epsilon
Rule 108   compare -> exp generate_compare
Rule 109   compare -> exp generate_compare compare1 compare
Rule 110   compare1 -> LT
Rule 111   compare1 -> LE
Rule 112   compare1 -> GT
Rule 113   compare1 -> GE
Rule 114   generate_compare -> epsilon
Rule 115   exp -> termino generate_exp
Rule 116   exp -> termino generate_exp exp1 exp
Rule 117   exp1 -> PLUS
Rule 118   exp1 -> MINUS
Rule 119   generate_exp -> epsilon
Rule 120   termino -> factor generate_termino
Rule 121   termino -> factor generate_termino termino1 termino
Rule 122   termino1 -> MULTIPLY
Rule 123   termino1 -> DIVIDE
Rule 124   termino1 -> MODULO
Rule 125   generate_termino -> epsilon
Rule 126   factor -> factor1
Rule 127   factor -> OPENPAR block expresion CLOSEPAR unblock
Rule 128   factor -> funcion
Rule 129   factor -> factor2 varcte
Rule 130   factor1 -> ID OPENBOX block exp CLOSEBOX unblock
Rule 131   factor1 -> ID
Rule 132   factor2 -> PLUS
Rule 133   factor2 -> MINUS
Rule 134   factor2 -> epsilon
Rule 135   block -> epsilon
Rule 136   unblock -> epsilon
Rule 137   varcte -> ID
Rule 138   varcte -> int
Rule 139   varcte -> float
Rule 140   varcte -> char
Rule 141   int -> INT
Rule 142   float -> FLOAT
Rule 143   char -> CHAR
Rule 144   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 101
CHAR                 : 143
CLOSEBOX             : 13 21 57 89 130
CLOSECURLY           : 1 39 77 78 84 88
CLOSEPAR             : 1 35 62 64 68 69 70 77 84 127
COLON                : 11
COMMA                : 16 22 43 63 73
DIVIDE               : 123
DO                   : 84 88
ELSE                 : 78
EQ                   : 105
FLOAT                : 142
FOR                  : 88
FUNCTION             : 28
GE                   : 113
GT                   : 112
ID                   : 2 3 12 20 21 32 42 57 58 65 89 90 130 131 137
IF                   : 77
INT                  : 13 141
IS                   : 57 58 88
LE                   : 111
LT                   : 110
MAIN                 : 9
MINUS                : 118 133
MODULO               : 124
MULTIPLY             : 122
NE                   : 106
OPENBOX              : 13 21 57 89 130
OPENCURLY            : 1 36 37 77 78 84 88
OPENPAR              : 1 32 60 68 69 70 77 84 127
OR                   : 97
PLUS                 : 117 132
PROGRAM              : 1
READ                 : 69
RETURN               : 68
SEMICOLON            : 2 3 15 56 59 68 69 70 94
STRING               : 75
THEN                 : 77
TO                   : 88
TYPECHAR             : 26
TYPEFLOAT            : 24
TYPEINT              : 25
TYPEVOID             : 27
VARS                 : 10
WHILE                : 84
WRITE                : 70
error                : 

Nonterminals, with rules where they appear

and                  : 95 96 100
and1                 : 100
asignacion           : 45
asignacion1          : 56
block                : 21 57 89 127 130
char                 : 140
compare              : 103 104 109
compare1             : 109
condicion            : 50
condicion1           : 77
condicion_punto1     : 77
condicion_punto2     : 79
condicion_punto3     : 78
condicion_punto4     : 78
epsilon              : 5 7 8 18 23 29 40 41 44 55 66 67 74 79 80 81 82 83 85 86 87 91 92 93 98 102 107 114 119 125 134 135 136
equal                : 99 100 104
equal1               : 104
escritura            : 49
escritura1           : 70 73
escritura2           : 71 72
escritura_expresion  : 72
escritura_string     : 71
est_exp              : 53
estatutos            : 6 38 54 77 78 84 88
estatutos1           : 45 46 47 48 49 50 51 52 53
exp                  : 21 57 61 68 88 88 89 108 109 116 130
exp1                 : 116
expresion            : 56 76 77 84 94 96 127
expresion1           : 96
factor               : 120 121
factor1              : 126
factor2              : 129
float                : 139
for                  : 52
for1                 : 88
for_punto1           : 88
for_punto2           : 88
for_punto3           : 88
funcion              : 59 128
funcion1             : 60 63
funcion2             : 61
funcion_punto1       : 60
funcion_punto2       : 61
funcion_punto3       : 60
funciones            : 4 39
funciones1           : 28
funciones2           : 30 31
funciones3           : 30 31
funciones4           : 33 34
funciones5           : 35
funciones6           : 36 37 38
funciones_punto1     : 36 37
funciones_punto2     : 39
generate_and         : 99 100
generate_compare     : 108 109
generate_equal       : 103 104
generate_exp         : 115 116
generate_expresion   : 95 96
generate_termino     : 120 121
int                  : 138
lectura              : 48
lista_ids            : 22 69
lista_ids1           : 19
lista_ids2           : 19 20
llamada              : 46
main                 : 1
parameters           : 33 43
parameters1          : 42
programa             : 0
programa1            : 1
programa2            : 1
programa3            : 1
programa_punto1      : 1
retorno              : 47
termino              : 115 116 121
termino1             : 121
tipo                 : 11 30 42
tipo_void            : 31
unblock              : 21 57 89 127 130
varcte               : 129
vars                 : 2 36
vars1                : 10 17
vars2                : 11 16
vars3                : 12
vars4                : 13 14
vars5                : 15
while                : 51
while_punto1         : 84
while_punto2         : 84
while_punto3         : 84

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (8) programa_punto1 -> . epsilon
    (144) epsilon -> .

    ID              reduce using rule 144 (epsilon -> .)

    programa_punto1                shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) programa -> PROGRAM programa_punto1 . programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (2) programa1 -> . ID SEMICOLON vars
    (3) programa1 -> . ID SEMICOLON

    ID              shift and go to state 6

    programa1                      shift and go to state 5

state 4

    (8) programa_punto1 -> epsilon .

    ID              reduce using rule 8 (programa_punto1 -> epsilon .)


state 5

    (1) programa -> PROGRAM programa_punto1 programa1 . programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (4) programa2 -> . funciones
    (5) programa2 -> . epsilon
    (28) funciones -> . FUNCTION funciones1
    (29) funciones -> . epsilon
    (144) epsilon -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 144 (epsilon -> .)

    programa2                      shift and go to state 7
    funciones                      shift and go to state 8
    epsilon                        shift and go to state 9

state 6

    (2) programa1 -> ID . SEMICOLON vars
    (3) programa1 -> ID . SEMICOLON

    SEMICOLON       shift and go to state 11


state 7

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 . main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (9) main -> . MAIN

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (4) programa2 -> funciones .

    MAIN            reduce using rule 4 (programa2 -> funciones .)


state 9

    (5) programa2 -> epsilon .
    (29) funciones -> epsilon .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (programa2 -> epsilon .)
    MAIN            reduce using rule 5 (programa2 -> epsilon .)

  ! MAIN            [ reduce using rule 29 (funciones -> epsilon .) ]


state 10

    (28) funciones -> FUNCTION . funciones1
    (30) funciones1 -> . tipo funciones2 funciones3
    (31) funciones1 -> . tipo_void funciones2 funciones3
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR
    (27) tipo_void -> . TYPEVOID

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19
    TYPEVOID        shift and go to state 20

    funciones1                     shift and go to state 14
    tipo                           shift and go to state 15
    tipo_void                      shift and go to state 16

state 11

    (2) programa1 -> ID SEMICOLON . vars
    (3) programa1 -> ID SEMICOLON .
    (10) vars -> . VARS vars1

    FUNCTION        reduce using rule 3 (programa1 -> ID SEMICOLON .)
    MAIN            reduce using rule 3 (programa1 -> ID SEMICOLON .)
    VARS            shift and go to state 22

    vars                           shift and go to state 21

state 12

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main . OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    OPENPAR         shift and go to state 23


state 13

    (9) main -> MAIN .

    OPENPAR         reduce using rule 9 (main -> MAIN .)


state 14

    (28) funciones -> FUNCTION funciones1 .

    MAIN            reduce using rule 28 (funciones -> FUNCTION funciones1 .)


state 15

    (30) funciones1 -> tipo . funciones2 funciones3
    (32) funciones2 -> . ID OPENPAR

    ID              shift and go to state 25

    funciones2                     shift and go to state 24

state 16

    (31) funciones1 -> tipo_void . funciones2 funciones3
    (32) funciones2 -> . ID OPENPAR

    ID              shift and go to state 25

    funciones2                     shift and go to state 26

state 17

    (24) tipo -> TYPEFLOAT .

    ID              reduce using rule 24 (tipo -> TYPEFLOAT .)
    COLON           reduce using rule 24 (tipo -> TYPEFLOAT .)


state 18

    (25) tipo -> TYPEINT .

    ID              reduce using rule 25 (tipo -> TYPEINT .)
    COLON           reduce using rule 25 (tipo -> TYPEINT .)


state 19

    (26) tipo -> TYPECHAR .

    ID              reduce using rule 26 (tipo -> TYPECHAR .)
    COLON           reduce using rule 26 (tipo -> TYPECHAR .)


state 20

    (27) tipo_void -> TYPEVOID .

    ID              reduce using rule 27 (tipo_void -> TYPEVOID .)


state 21

    (2) programa1 -> ID SEMICOLON vars .

    FUNCTION        reduce using rule 2 (programa1 -> ID SEMICOLON vars .)
    MAIN            reduce using rule 2 (programa1 -> ID SEMICOLON vars .)


state 22

    (10) vars -> VARS . vars1
    (11) vars1 -> . tipo COLON vars2
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    vars1                          shift and go to state 27
    tipo                           shift and go to state 28

state 23

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR . CLOSEPAR OPENCURLY programa3 CLOSECURLY

    CLOSEPAR        shift and go to state 29


state 24

    (30) funciones1 -> tipo funciones2 . funciones3
    (33) funciones3 -> . parameters funciones4
    (34) funciones3 -> . funciones4
    (42) parameters -> . tipo ID parameters1
    (35) funciones4 -> . CLOSEPAR funciones5
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 34
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    tipo                           shift and go to state 30
    funciones3                     shift and go to state 31
    parameters                     shift and go to state 32
    funciones4                     shift and go to state 33

state 25

    (32) funciones2 -> ID . OPENPAR

    OPENPAR         shift and go to state 35


state 26

    (31) funciones1 -> tipo_void funciones2 . funciones3
    (33) funciones3 -> . parameters funciones4
    (34) funciones3 -> . funciones4
    (42) parameters -> . tipo ID parameters1
    (35) funciones4 -> . CLOSEPAR funciones5
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 34
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    funciones3                     shift and go to state 36
    parameters                     shift and go to state 32
    funciones4                     shift and go to state 33
    tipo                           shift and go to state 30

state 27

    (10) vars -> VARS vars1 .

    FUNCTION        reduce using rule 10 (vars -> VARS vars1 .)
    MAIN            reduce using rule 10 (vars -> VARS vars1 .)
    OPENCURLY       reduce using rule 10 (vars -> VARS vars1 .)


state 28

    (11) vars1 -> tipo . COLON vars2

    COLON           shift and go to state 37


state 29

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR . OPENCURLY programa3 CLOSECURLY

    OPENCURLY       shift and go to state 38


state 30

    (42) parameters -> tipo . ID parameters1

    ID              shift and go to state 39


state 31

    (30) funciones1 -> tipo funciones2 funciones3 .

    MAIN            reduce using rule 30 (funciones1 -> tipo funciones2 funciones3 .)


state 32

    (33) funciones3 -> parameters . funciones4
    (35) funciones4 -> . CLOSEPAR funciones5

    CLOSEPAR        shift and go to state 34

    funciones4                     shift and go to state 40

state 33

    (34) funciones3 -> funciones4 .

    MAIN            reduce using rule 34 (funciones3 -> funciones4 .)


state 34

    (35) funciones4 -> CLOSEPAR . funciones5
    (36) funciones5 -> . vars funciones_punto1 OPENCURLY funciones6
    (37) funciones5 -> . funciones_punto1 OPENCURLY funciones6
    (10) vars -> . VARS vars1
    (40) funciones_punto1 -> . epsilon
    (144) epsilon -> .

    VARS            shift and go to state 22
    OPENCURLY       reduce using rule 144 (epsilon -> .)

    funciones5                     shift and go to state 41
    vars                           shift and go to state 42
    funciones_punto1               shift and go to state 43
    epsilon                        shift and go to state 44

state 35

    (32) funciones2 -> ID OPENPAR .

    CLOSEPAR        reduce using rule 32 (funciones2 -> ID OPENPAR .)
    TYPEFLOAT       reduce using rule 32 (funciones2 -> ID OPENPAR .)
    TYPEINT         reduce using rule 32 (funciones2 -> ID OPENPAR .)
    TYPECHAR        reduce using rule 32 (funciones2 -> ID OPENPAR .)


state 36

    (31) funciones1 -> tipo_void funciones2 funciones3 .

    MAIN            reduce using rule 31 (funciones1 -> tipo_void funciones2 funciones3 .)


state 37

    (11) vars1 -> tipo COLON . vars2
    (12) vars2 -> . ID vars3

    ID              shift and go to state 46

    vars2                          shift and go to state 45

state 38

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY . programa3 CLOSECURLY
    (6) programa3 -> . estatutos
    (7) programa3 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    programa3                      shift and go to state 48
    estatutos                      shift and go to state 49
    epsilon                        shift and go to state 50
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 39

    (42) parameters -> tipo ID . parameters1
    (43) parameters1 -> . COMMA parameters
    (44) parameters1 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 82
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    parameters1                    shift and go to state 81
    epsilon                        shift and go to state 83

state 40

    (33) funciones3 -> parameters funciones4 .

    MAIN            reduce using rule 33 (funciones3 -> parameters funciones4 .)


state 41

    (35) funciones4 -> CLOSEPAR funciones5 .

    MAIN            reduce using rule 35 (funciones4 -> CLOSEPAR funciones5 .)


state 42

    (36) funciones5 -> vars . funciones_punto1 OPENCURLY funciones6
    (40) funciones_punto1 -> . epsilon
    (144) epsilon -> .

    OPENCURLY       reduce using rule 144 (epsilon -> .)

    funciones_punto1               shift and go to state 84
    epsilon                        shift and go to state 44

state 43

    (37) funciones5 -> funciones_punto1 . OPENCURLY funciones6

    OPENCURLY       shift and go to state 85


state 44

    (40) funciones_punto1 -> epsilon .

    OPENCURLY       reduce using rule 40 (funciones_punto1 -> epsilon .)


state 45

    (11) vars1 -> tipo COLON vars2 .

    FUNCTION        reduce using rule 11 (vars1 -> tipo COLON vars2 .)
    MAIN            reduce using rule 11 (vars1 -> tipo COLON vars2 .)
    OPENCURLY       reduce using rule 11 (vars1 -> tipo COLON vars2 .)


state 46

    (12) vars2 -> ID . vars3
    (13) vars3 -> . OPENBOX INT CLOSEBOX vars4
    (14) vars3 -> . vars4
    (15) vars4 -> . SEMICOLON vars5
    (16) vars4 -> . COMMA vars2

    OPENBOX         shift and go to state 87
    SEMICOLON       shift and go to state 89
    COMMA           shift and go to state 90

    vars3                          shift and go to state 86
    vars4                          shift and go to state 88

state 47

    (127) factor -> OPENPAR . block expresion CLOSEPAR unblock
    (135) block -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    block                          shift and go to state 91
    epsilon                        shift and go to state 92

state 48

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 . CLOSECURLY

    CLOSECURLY      shift and go to state 93


state 49

    (6) programa3 -> estatutos .

    CLOSECURLY      reduce using rule 6 (programa3 -> estatutos .)


state 50

    (7) programa3 -> epsilon .
    (134) factor2 -> epsilon .

    CLOSECURLY      reduce using rule 7 (programa3 -> epsilon .)
    ID              reduce using rule 134 (factor2 -> epsilon .)
    INT             reduce using rule 134 (factor2 -> epsilon .)
    FLOAT           reduce using rule 134 (factor2 -> epsilon .)
    CHAR            reduce using rule 134 (factor2 -> epsilon .)


state 51

    (45) estatutos -> asignacion . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    asignacion                     shift and go to state 51
    estatutos1                     shift and go to state 94
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 52

    (46) estatutos -> llamada . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    llamada                        shift and go to state 52
    estatutos1                     shift and go to state 97
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 53

    (47) estatutos -> retorno . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    retorno                        shift and go to state 53
    estatutos1                     shift and go to state 98
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 54

    (48) estatutos -> lectura . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    lectura                        shift and go to state 54
    estatutos1                     shift and go to state 99
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 55

    (49) estatutos -> escritura . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    escritura                      shift and go to state 55
    estatutos1                     shift and go to state 100
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 56

    (50) estatutos -> condicion . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    condicion                      shift and go to state 56
    estatutos1                     shift and go to state 101
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 57

    (51) estatutos -> while . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    while                          shift and go to state 57
    estatutos1                     shift and go to state 102
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 58

    (52) estatutos -> for . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    for                            shift and go to state 58
    estatutos1                     shift and go to state 103
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 59

    (53) estatutos -> est_exp . estatutos1
    (54) estatutos1 -> . estatutos
    (55) estatutos1 -> . epsilon
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (144) epsilon -> .
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 144 (epsilon -> .) ]
  ! READ            [ reduce using rule 144 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 144 (epsilon -> .) ]
  ! IF              [ reduce using rule 144 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 144 (epsilon -> .) ]
  ! FOR             [ reduce using rule 144 (epsilon -> .) ]
  ! ID              [ reduce using rule 144 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 144 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 144 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 144 (epsilon -> .) ]

    est_exp                        shift and go to state 59
    estatutos1                     shift and go to state 104
    estatutos                      shift and go to state 95
    epsilon                        shift and go to state 96
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78

state 60

    (56) asignacion -> asignacion1 . expresion SEMICOLON
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 105
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 61

    (94) est_exp -> expresion . SEMICOLON

    SEMICOLON       shift and go to state 109


state 62

    (59) llamada -> funcion . SEMICOLON
    (128) factor -> funcion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 110
    MULTIPLY        reduce using rule 128 (factor -> funcion .)
    DIVIDE          reduce using rule 128 (factor -> funcion .)
    MODULO          reduce using rule 128 (factor -> funcion .)
    PLUS            reduce using rule 128 (factor -> funcion .)
    MINUS           reduce using rule 128 (factor -> funcion .)
    LT              reduce using rule 128 (factor -> funcion .)
    LE              reduce using rule 128 (factor -> funcion .)
    GT              reduce using rule 128 (factor -> funcion .)
    GE              reduce using rule 128 (factor -> funcion .)
    EQ              reduce using rule 128 (factor -> funcion .)
    NE              reduce using rule 128 (factor -> funcion .)
    AND             reduce using rule 128 (factor -> funcion .)
    OR              reduce using rule 128 (factor -> funcion .)

  ! SEMICOLON       [ reduce using rule 128 (factor -> funcion .) ]


state 63

    (68) retorno -> RETURN . OPENPAR exp CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 111


state 64

    (108) compare -> exp . generate_compare
    (109) compare -> exp . generate_compare compare1 compare
    (114) generate_compare -> . epsilon
    (144) epsilon -> .

    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)

    generate_compare               shift and go to state 112
    epsilon                        shift and go to state 113

state 65

    (69) lectura -> READ . OPENPAR lista_ids CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 114


state 66

    (70) escritura -> WRITE . OPENPAR escritura1 CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 115


state 67

    (77) condicion -> IF . OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    OPENPAR         shift and go to state 116


state 68

    (84) while -> WHILE . while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (85) while_punto1 -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)

    while_punto1                   shift and go to state 117
    epsilon                        shift and go to state 118

state 69

    (88) for -> FOR . for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (89) for1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (90) for1 -> . ID

    ID              shift and go to state 120

    for1                           shift and go to state 119

state 70

    (57) asignacion1 -> ID . OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> ID . IS
    (65) funcion_punto1 -> ID .
    (130) factor1 -> ID . OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> ID .

    OPENBOX         shift and go to state 121
    IS              shift and go to state 122
    OPENPAR         reduce using rule 65 (funcion_punto1 -> ID .)
    MULTIPLY        reduce using rule 131 (factor1 -> ID .)
    DIVIDE          reduce using rule 131 (factor1 -> ID .)
    MODULO          reduce using rule 131 (factor1 -> ID .)
    PLUS            reduce using rule 131 (factor1 -> ID .)
    MINUS           reduce using rule 131 (factor1 -> ID .)
    LT              reduce using rule 131 (factor1 -> ID .)
    LE              reduce using rule 131 (factor1 -> ID .)
    GT              reduce using rule 131 (factor1 -> ID .)
    GE              reduce using rule 131 (factor1 -> ID .)
    EQ              reduce using rule 131 (factor1 -> ID .)
    NE              reduce using rule 131 (factor1 -> ID .)
    AND             reduce using rule 131 (factor1 -> ID .)
    OR              reduce using rule 131 (factor1 -> ID .)
    SEMICOLON       reduce using rule 131 (factor1 -> ID .)


state 71

    (60) funcion -> funcion_punto1 . OPENPAR funcion1 funcion_punto3

    OPENPAR         shift and go to state 123


state 72

    (95) expresion -> and . generate_expresion
    (96) expresion -> and . generate_expresion expresion1 expresion
    (98) generate_expresion -> . epsilon
    (144) epsilon -> .

    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)

    generate_expresion             shift and go to state 124
    epsilon                        shift and go to state 125

state 73

    (99) and -> equal . generate_and
    (100) and -> equal . generate_and and1 and
    (102) generate_and -> . epsilon
    (144) epsilon -> .

    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)

    generate_and                   shift and go to state 126
    epsilon                        shift and go to state 127

state 74

    (103) equal -> compare . generate_equal
    (104) equal -> compare . generate_equal equal1 equal
    (107) generate_equal -> . epsilon
    (144) epsilon -> .

    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)

    generate_equal                 shift and go to state 128
    epsilon                        shift and go to state 129

state 75

    (115) exp -> termino . generate_exp
    (116) exp -> termino . generate_exp exp1 exp
    (119) generate_exp -> . epsilon
    (144) epsilon -> .

    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    TO              reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)
    DO              reduce using rule 144 (epsilon -> .)

    generate_exp                   shift and go to state 130
    epsilon                        shift and go to state 131

state 76

    (120) termino -> factor . generate_termino
    (121) termino -> factor . generate_termino termino1 termino
    (125) generate_termino -> . epsilon
    (144) epsilon -> .

    MULTIPLY        reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    MODULO          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    TO              reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)
    DO              reduce using rule 144 (epsilon -> .)

    generate_termino               shift and go to state 132
    epsilon                        shift and go to state 133

state 77

    (126) factor -> factor1 .

    MULTIPLY        reduce using rule 126 (factor -> factor1 .)
    DIVIDE          reduce using rule 126 (factor -> factor1 .)
    MODULO          reduce using rule 126 (factor -> factor1 .)
    PLUS            reduce using rule 126 (factor -> factor1 .)
    MINUS           reduce using rule 126 (factor -> factor1 .)
    LT              reduce using rule 126 (factor -> factor1 .)
    LE              reduce using rule 126 (factor -> factor1 .)
    GT              reduce using rule 126 (factor -> factor1 .)
    GE              reduce using rule 126 (factor -> factor1 .)
    EQ              reduce using rule 126 (factor -> factor1 .)
    NE              reduce using rule 126 (factor -> factor1 .)
    AND             reduce using rule 126 (factor -> factor1 .)
    OR              reduce using rule 126 (factor -> factor1 .)
    SEMICOLON       reduce using rule 126 (factor -> factor1 .)
    CLOSEPAR        reduce using rule 126 (factor -> factor1 .)
    COMMA           reduce using rule 126 (factor -> factor1 .)
    TO              reduce using rule 126 (factor -> factor1 .)
    CLOSEBOX        reduce using rule 126 (factor -> factor1 .)
    DO              reduce using rule 126 (factor -> factor1 .)


state 78

    (129) factor -> factor2 . varcte
    (137) varcte -> . ID
    (138) varcte -> . int
    (139) varcte -> . float
    (140) varcte -> . char
    (141) int -> . INT
    (142) float -> . FLOAT
    (143) char -> . CHAR

    ID              shift and go to state 135
    INT             shift and go to state 139
    FLOAT           shift and go to state 140
    CHAR            shift and go to state 141

    varcte                         shift and go to state 134
    int                            shift and go to state 136
    float                          shift and go to state 137
    char                           shift and go to state 138

state 79

    (132) factor2 -> PLUS .

    ID              reduce using rule 132 (factor2 -> PLUS .)
    INT             reduce using rule 132 (factor2 -> PLUS .)
    FLOAT           reduce using rule 132 (factor2 -> PLUS .)
    CHAR            reduce using rule 132 (factor2 -> PLUS .)


state 80

    (133) factor2 -> MINUS .

    ID              reduce using rule 133 (factor2 -> MINUS .)
    INT             reduce using rule 133 (factor2 -> MINUS .)
    FLOAT           reduce using rule 133 (factor2 -> MINUS .)
    CHAR            reduce using rule 133 (factor2 -> MINUS .)


state 81

    (42) parameters -> tipo ID parameters1 .

    CLOSEPAR        reduce using rule 42 (parameters -> tipo ID parameters1 .)


state 82

    (43) parameters1 -> COMMA . parameters
    (42) parameters -> . tipo ID parameters1
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    parameters                     shift and go to state 142
    tipo                           shift and go to state 30

state 83

    (44) parameters1 -> epsilon .

    CLOSEPAR        reduce using rule 44 (parameters1 -> epsilon .)


state 84

    (36) funciones5 -> vars funciones_punto1 . OPENCURLY funciones6

    OPENCURLY       shift and go to state 143


state 85

    (37) funciones5 -> funciones_punto1 OPENCURLY . funciones6
    (38) funciones6 -> . estatutos funciones6
    (39) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 146
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    funciones6                     shift and go to state 144
    estatutos                      shift and go to state 145
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 86

    (12) vars2 -> ID vars3 .

    FUNCTION        reduce using rule 12 (vars2 -> ID vars3 .)
    MAIN            reduce using rule 12 (vars2 -> ID vars3 .)
    OPENCURLY       reduce using rule 12 (vars2 -> ID vars3 .)


state 87

    (13) vars3 -> OPENBOX . INT CLOSEBOX vars4

    INT             shift and go to state 147


state 88

    (14) vars3 -> vars4 .

    FUNCTION        reduce using rule 14 (vars3 -> vars4 .)
    MAIN            reduce using rule 14 (vars3 -> vars4 .)
    OPENCURLY       reduce using rule 14 (vars3 -> vars4 .)


state 89

    (15) vars4 -> SEMICOLON . vars5
    (17) vars5 -> . vars1
    (18) vars5 -> . epsilon
    (11) vars1 -> . tipo COLON vars2
    (144) epsilon -> .
    (24) tipo -> . TYPEFLOAT
    (25) tipo -> . TYPEINT
    (26) tipo -> . TYPECHAR

    FUNCTION        reduce using rule 144 (epsilon -> .)
    MAIN            reduce using rule 144 (epsilon -> .)
    OPENCURLY       reduce using rule 144 (epsilon -> .)
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    vars5                          shift and go to state 148
    vars1                          shift and go to state 149
    epsilon                        shift and go to state 150
    tipo                           shift and go to state 28

state 90

    (16) vars4 -> COMMA . vars2
    (12) vars2 -> . ID vars3

    ID              shift and go to state 46

    vars2                          shift and go to state 151

state 91

    (127) factor -> OPENPAR block . expresion CLOSEPAR unblock
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 152
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 92

    (135) block -> epsilon .

    OPENPAR         reduce using rule 135 (block -> epsilon .)
    ID              reduce using rule 135 (block -> epsilon .)
    PLUS            reduce using rule 135 (block -> epsilon .)
    MINUS           reduce using rule 135 (block -> epsilon .)
    INT             reduce using rule 135 (block -> epsilon .)
    FLOAT           reduce using rule 135 (block -> epsilon .)
    CHAR            reduce using rule 135 (block -> epsilon .)


state 93

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .

    $end            reduce using rule 1 (programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .)


state 94

    (45) estatutos -> asignacion estatutos1 .

    CLOSECURLY      reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    RETURN          reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    READ            reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    WRITE           reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    IF              reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    WHILE           reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    FOR             reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    ID              reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    OPENPAR         reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    PLUS            reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    MINUS           reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    INT             reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    FLOAT           reduce using rule 45 (estatutos -> asignacion estatutos1 .)
    CHAR            reduce using rule 45 (estatutos -> asignacion estatutos1 .)


state 95

    (54) estatutos1 -> estatutos .

    CLOSECURLY      reduce using rule 54 (estatutos1 -> estatutos .)
    RETURN          reduce using rule 54 (estatutos1 -> estatutos .)
    READ            reduce using rule 54 (estatutos1 -> estatutos .)
    WRITE           reduce using rule 54 (estatutos1 -> estatutos .)
    IF              reduce using rule 54 (estatutos1 -> estatutos .)
    WHILE           reduce using rule 54 (estatutos1 -> estatutos .)
    FOR             reduce using rule 54 (estatutos1 -> estatutos .)
    ID              reduce using rule 54 (estatutos1 -> estatutos .)
    OPENPAR         reduce using rule 54 (estatutos1 -> estatutos .)
    PLUS            reduce using rule 54 (estatutos1 -> estatutos .)
    MINUS           reduce using rule 54 (estatutos1 -> estatutos .)
    INT             reduce using rule 54 (estatutos1 -> estatutos .)
    FLOAT           reduce using rule 54 (estatutos1 -> estatutos .)
    CHAR            reduce using rule 54 (estatutos1 -> estatutos .)


state 96

    (55) estatutos1 -> epsilon .
    (134) factor2 -> epsilon .

  ! reduce/reduce conflict for ID resolved using rule 55 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for INT resolved using rule 55 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for CHAR resolved using rule 55 (estatutos1 -> epsilon .)
    CLOSECURLY      reduce using rule 55 (estatutos1 -> epsilon .)
    RETURN          reduce using rule 55 (estatutos1 -> epsilon .)
    READ            reduce using rule 55 (estatutos1 -> epsilon .)
    WRITE           reduce using rule 55 (estatutos1 -> epsilon .)
    IF              reduce using rule 55 (estatutos1 -> epsilon .)
    WHILE           reduce using rule 55 (estatutos1 -> epsilon .)
    FOR             reduce using rule 55 (estatutos1 -> epsilon .)
    ID              reduce using rule 55 (estatutos1 -> epsilon .)
    OPENPAR         reduce using rule 55 (estatutos1 -> epsilon .)
    PLUS            reduce using rule 55 (estatutos1 -> epsilon .)
    MINUS           reduce using rule 55 (estatutos1 -> epsilon .)
    INT             reduce using rule 55 (estatutos1 -> epsilon .)
    FLOAT           reduce using rule 55 (estatutos1 -> epsilon .)
    CHAR            reduce using rule 55 (estatutos1 -> epsilon .)

  ! ID              [ reduce using rule 134 (factor2 -> epsilon .) ]
  ! INT             [ reduce using rule 134 (factor2 -> epsilon .) ]
  ! FLOAT           [ reduce using rule 134 (factor2 -> epsilon .) ]
  ! CHAR            [ reduce using rule 134 (factor2 -> epsilon .) ]


state 97

    (46) estatutos -> llamada estatutos1 .

    CLOSECURLY      reduce using rule 46 (estatutos -> llamada estatutos1 .)
    RETURN          reduce using rule 46 (estatutos -> llamada estatutos1 .)
    READ            reduce using rule 46 (estatutos -> llamada estatutos1 .)
    WRITE           reduce using rule 46 (estatutos -> llamada estatutos1 .)
    IF              reduce using rule 46 (estatutos -> llamada estatutos1 .)
    WHILE           reduce using rule 46 (estatutos -> llamada estatutos1 .)
    FOR             reduce using rule 46 (estatutos -> llamada estatutos1 .)
    ID              reduce using rule 46 (estatutos -> llamada estatutos1 .)
    OPENPAR         reduce using rule 46 (estatutos -> llamada estatutos1 .)
    PLUS            reduce using rule 46 (estatutos -> llamada estatutos1 .)
    MINUS           reduce using rule 46 (estatutos -> llamada estatutos1 .)
    INT             reduce using rule 46 (estatutos -> llamada estatutos1 .)
    FLOAT           reduce using rule 46 (estatutos -> llamada estatutos1 .)
    CHAR            reduce using rule 46 (estatutos -> llamada estatutos1 .)


state 98

    (47) estatutos -> retorno estatutos1 .

    CLOSECURLY      reduce using rule 47 (estatutos -> retorno estatutos1 .)
    RETURN          reduce using rule 47 (estatutos -> retorno estatutos1 .)
    READ            reduce using rule 47 (estatutos -> retorno estatutos1 .)
    WRITE           reduce using rule 47 (estatutos -> retorno estatutos1 .)
    IF              reduce using rule 47 (estatutos -> retorno estatutos1 .)
    WHILE           reduce using rule 47 (estatutos -> retorno estatutos1 .)
    FOR             reduce using rule 47 (estatutos -> retorno estatutos1 .)
    ID              reduce using rule 47 (estatutos -> retorno estatutos1 .)
    OPENPAR         reduce using rule 47 (estatutos -> retorno estatutos1 .)
    PLUS            reduce using rule 47 (estatutos -> retorno estatutos1 .)
    MINUS           reduce using rule 47 (estatutos -> retorno estatutos1 .)
    INT             reduce using rule 47 (estatutos -> retorno estatutos1 .)
    FLOAT           reduce using rule 47 (estatutos -> retorno estatutos1 .)
    CHAR            reduce using rule 47 (estatutos -> retorno estatutos1 .)


state 99

    (48) estatutos -> lectura estatutos1 .

    CLOSECURLY      reduce using rule 48 (estatutos -> lectura estatutos1 .)
    RETURN          reduce using rule 48 (estatutos -> lectura estatutos1 .)
    READ            reduce using rule 48 (estatutos -> lectura estatutos1 .)
    WRITE           reduce using rule 48 (estatutos -> lectura estatutos1 .)
    IF              reduce using rule 48 (estatutos -> lectura estatutos1 .)
    WHILE           reduce using rule 48 (estatutos -> lectura estatutos1 .)
    FOR             reduce using rule 48 (estatutos -> lectura estatutos1 .)
    ID              reduce using rule 48 (estatutos -> lectura estatutos1 .)
    OPENPAR         reduce using rule 48 (estatutos -> lectura estatutos1 .)
    PLUS            reduce using rule 48 (estatutos -> lectura estatutos1 .)
    MINUS           reduce using rule 48 (estatutos -> lectura estatutos1 .)
    INT             reduce using rule 48 (estatutos -> lectura estatutos1 .)
    FLOAT           reduce using rule 48 (estatutos -> lectura estatutos1 .)
    CHAR            reduce using rule 48 (estatutos -> lectura estatutos1 .)


state 100

    (49) estatutos -> escritura estatutos1 .

    CLOSECURLY      reduce using rule 49 (estatutos -> escritura estatutos1 .)
    RETURN          reduce using rule 49 (estatutos -> escritura estatutos1 .)
    READ            reduce using rule 49 (estatutos -> escritura estatutos1 .)
    WRITE           reduce using rule 49 (estatutos -> escritura estatutos1 .)
    IF              reduce using rule 49 (estatutos -> escritura estatutos1 .)
    WHILE           reduce using rule 49 (estatutos -> escritura estatutos1 .)
    FOR             reduce using rule 49 (estatutos -> escritura estatutos1 .)
    ID              reduce using rule 49 (estatutos -> escritura estatutos1 .)
    OPENPAR         reduce using rule 49 (estatutos -> escritura estatutos1 .)
    PLUS            reduce using rule 49 (estatutos -> escritura estatutos1 .)
    MINUS           reduce using rule 49 (estatutos -> escritura estatutos1 .)
    INT             reduce using rule 49 (estatutos -> escritura estatutos1 .)
    FLOAT           reduce using rule 49 (estatutos -> escritura estatutos1 .)
    CHAR            reduce using rule 49 (estatutos -> escritura estatutos1 .)


state 101

    (50) estatutos -> condicion estatutos1 .

    CLOSECURLY      reduce using rule 50 (estatutos -> condicion estatutos1 .)
    RETURN          reduce using rule 50 (estatutos -> condicion estatutos1 .)
    READ            reduce using rule 50 (estatutos -> condicion estatutos1 .)
    WRITE           reduce using rule 50 (estatutos -> condicion estatutos1 .)
    IF              reduce using rule 50 (estatutos -> condicion estatutos1 .)
    WHILE           reduce using rule 50 (estatutos -> condicion estatutos1 .)
    FOR             reduce using rule 50 (estatutos -> condicion estatutos1 .)
    ID              reduce using rule 50 (estatutos -> condicion estatutos1 .)
    OPENPAR         reduce using rule 50 (estatutos -> condicion estatutos1 .)
    PLUS            reduce using rule 50 (estatutos -> condicion estatutos1 .)
    MINUS           reduce using rule 50 (estatutos -> condicion estatutos1 .)
    INT             reduce using rule 50 (estatutos -> condicion estatutos1 .)
    FLOAT           reduce using rule 50 (estatutos -> condicion estatutos1 .)
    CHAR            reduce using rule 50 (estatutos -> condicion estatutos1 .)


state 102

    (51) estatutos -> while estatutos1 .

    CLOSECURLY      reduce using rule 51 (estatutos -> while estatutos1 .)
    RETURN          reduce using rule 51 (estatutos -> while estatutos1 .)
    READ            reduce using rule 51 (estatutos -> while estatutos1 .)
    WRITE           reduce using rule 51 (estatutos -> while estatutos1 .)
    IF              reduce using rule 51 (estatutos -> while estatutos1 .)
    WHILE           reduce using rule 51 (estatutos -> while estatutos1 .)
    FOR             reduce using rule 51 (estatutos -> while estatutos1 .)
    ID              reduce using rule 51 (estatutos -> while estatutos1 .)
    OPENPAR         reduce using rule 51 (estatutos -> while estatutos1 .)
    PLUS            reduce using rule 51 (estatutos -> while estatutos1 .)
    MINUS           reduce using rule 51 (estatutos -> while estatutos1 .)
    INT             reduce using rule 51 (estatutos -> while estatutos1 .)
    FLOAT           reduce using rule 51 (estatutos -> while estatutos1 .)
    CHAR            reduce using rule 51 (estatutos -> while estatutos1 .)


state 103

    (52) estatutos -> for estatutos1 .

    CLOSECURLY      reduce using rule 52 (estatutos -> for estatutos1 .)
    RETURN          reduce using rule 52 (estatutos -> for estatutos1 .)
    READ            reduce using rule 52 (estatutos -> for estatutos1 .)
    WRITE           reduce using rule 52 (estatutos -> for estatutos1 .)
    IF              reduce using rule 52 (estatutos -> for estatutos1 .)
    WHILE           reduce using rule 52 (estatutos -> for estatutos1 .)
    FOR             reduce using rule 52 (estatutos -> for estatutos1 .)
    ID              reduce using rule 52 (estatutos -> for estatutos1 .)
    OPENPAR         reduce using rule 52 (estatutos -> for estatutos1 .)
    PLUS            reduce using rule 52 (estatutos -> for estatutos1 .)
    MINUS           reduce using rule 52 (estatutos -> for estatutos1 .)
    INT             reduce using rule 52 (estatutos -> for estatutos1 .)
    FLOAT           reduce using rule 52 (estatutos -> for estatutos1 .)
    CHAR            reduce using rule 52 (estatutos -> for estatutos1 .)


state 104

    (53) estatutos -> est_exp estatutos1 .

    CLOSECURLY      reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    RETURN          reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    READ            reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    WRITE           reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    IF              reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    WHILE           reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    FOR             reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    ID              reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    OPENPAR         reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    PLUS            reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    MINUS           reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    INT             reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    FLOAT           reduce using rule 53 (estatutos -> est_exp estatutos1 .)
    CHAR            reduce using rule 53 (estatutos -> est_exp estatutos1 .)


state 105

    (56) asignacion -> asignacion1 expresion . SEMICOLON

    SEMICOLON       shift and go to state 153


state 106

    (128) factor -> funcion .

    MULTIPLY        reduce using rule 128 (factor -> funcion .)
    DIVIDE          reduce using rule 128 (factor -> funcion .)
    MODULO          reduce using rule 128 (factor -> funcion .)
    PLUS            reduce using rule 128 (factor -> funcion .)
    MINUS           reduce using rule 128 (factor -> funcion .)
    LT              reduce using rule 128 (factor -> funcion .)
    LE              reduce using rule 128 (factor -> funcion .)
    GT              reduce using rule 128 (factor -> funcion .)
    GE              reduce using rule 128 (factor -> funcion .)
    EQ              reduce using rule 128 (factor -> funcion .)
    NE              reduce using rule 128 (factor -> funcion .)
    AND             reduce using rule 128 (factor -> funcion .)
    OR              reduce using rule 128 (factor -> funcion .)
    SEMICOLON       reduce using rule 128 (factor -> funcion .)
    CLOSEPAR        reduce using rule 128 (factor -> funcion .)
    COMMA           reduce using rule 128 (factor -> funcion .)
    TO              reduce using rule 128 (factor -> funcion .)
    CLOSEBOX        reduce using rule 128 (factor -> funcion .)
    DO              reduce using rule 128 (factor -> funcion .)


state 107

    (130) factor1 -> ID . OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> ID .
    (65) funcion_punto1 -> ID .

    OPENBOX         shift and go to state 154
    MULTIPLY        reduce using rule 131 (factor1 -> ID .)
    DIVIDE          reduce using rule 131 (factor1 -> ID .)
    MODULO          reduce using rule 131 (factor1 -> ID .)
    PLUS            reduce using rule 131 (factor1 -> ID .)
    MINUS           reduce using rule 131 (factor1 -> ID .)
    LT              reduce using rule 131 (factor1 -> ID .)
    LE              reduce using rule 131 (factor1 -> ID .)
    GT              reduce using rule 131 (factor1 -> ID .)
    GE              reduce using rule 131 (factor1 -> ID .)
    EQ              reduce using rule 131 (factor1 -> ID .)
    NE              reduce using rule 131 (factor1 -> ID .)
    AND             reduce using rule 131 (factor1 -> ID .)
    OR              reduce using rule 131 (factor1 -> ID .)
    SEMICOLON       reduce using rule 131 (factor1 -> ID .)
    CLOSEPAR        reduce using rule 131 (factor1 -> ID .)
    COMMA           reduce using rule 131 (factor1 -> ID .)
    TO              reduce using rule 131 (factor1 -> ID .)
    CLOSEBOX        reduce using rule 131 (factor1 -> ID .)
    DO              reduce using rule 131 (factor1 -> ID .)
    OPENPAR         reduce using rule 65 (funcion_punto1 -> ID .)


state 108

    (134) factor2 -> epsilon .

    ID              reduce using rule 134 (factor2 -> epsilon .)
    INT             reduce using rule 134 (factor2 -> epsilon .)
    FLOAT           reduce using rule 134 (factor2 -> epsilon .)
    CHAR            reduce using rule 134 (factor2 -> epsilon .)


state 109

    (94) est_exp -> expresion SEMICOLON .

    RETURN          reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    READ            reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    WRITE           reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    IF              reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    WHILE           reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    FOR             reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    ID              reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    OPENPAR         reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    PLUS            reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    MINUS           reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    INT             reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    FLOAT           reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    CHAR            reduce using rule 94 (est_exp -> expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 94 (est_exp -> expresion SEMICOLON .)


state 110

    (59) llamada -> funcion SEMICOLON .

    RETURN          reduce using rule 59 (llamada -> funcion SEMICOLON .)
    READ            reduce using rule 59 (llamada -> funcion SEMICOLON .)
    WRITE           reduce using rule 59 (llamada -> funcion SEMICOLON .)
    IF              reduce using rule 59 (llamada -> funcion SEMICOLON .)
    WHILE           reduce using rule 59 (llamada -> funcion SEMICOLON .)
    FOR             reduce using rule 59 (llamada -> funcion SEMICOLON .)
    ID              reduce using rule 59 (llamada -> funcion SEMICOLON .)
    OPENPAR         reduce using rule 59 (llamada -> funcion SEMICOLON .)
    PLUS            reduce using rule 59 (llamada -> funcion SEMICOLON .)
    MINUS           reduce using rule 59 (llamada -> funcion SEMICOLON .)
    INT             reduce using rule 59 (llamada -> funcion SEMICOLON .)
    FLOAT           reduce using rule 59 (llamada -> funcion SEMICOLON .)
    CHAR            reduce using rule 59 (llamada -> funcion SEMICOLON .)
    CLOSECURLY      reduce using rule 59 (llamada -> funcion SEMICOLON .)


state 111

    (68) retorno -> RETURN OPENPAR . exp CLOSEPAR SEMICOLON
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 155
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 112

    (108) compare -> exp generate_compare .
    (109) compare -> exp generate_compare . compare1 compare
    (110) compare1 -> . LT
    (111) compare1 -> . LE
    (112) compare1 -> . GT
    (113) compare1 -> . GE

    EQ              reduce using rule 108 (compare -> exp generate_compare .)
    NE              reduce using rule 108 (compare -> exp generate_compare .)
    AND             reduce using rule 108 (compare -> exp generate_compare .)
    OR              reduce using rule 108 (compare -> exp generate_compare .)
    SEMICOLON       reduce using rule 108 (compare -> exp generate_compare .)
    CLOSEPAR        reduce using rule 108 (compare -> exp generate_compare .)
    COMMA           reduce using rule 108 (compare -> exp generate_compare .)
    LT              shift and go to state 157
    LE              shift and go to state 158
    GT              shift and go to state 159
    GE              shift and go to state 160

    compare1                       shift and go to state 156

state 113

    (114) generate_compare -> epsilon .

    LT              reduce using rule 114 (generate_compare -> epsilon .)
    LE              reduce using rule 114 (generate_compare -> epsilon .)
    GT              reduce using rule 114 (generate_compare -> epsilon .)
    GE              reduce using rule 114 (generate_compare -> epsilon .)
    EQ              reduce using rule 114 (generate_compare -> epsilon .)
    NE              reduce using rule 114 (generate_compare -> epsilon .)
    AND             reduce using rule 114 (generate_compare -> epsilon .)
    OR              reduce using rule 114 (generate_compare -> epsilon .)
    SEMICOLON       reduce using rule 114 (generate_compare -> epsilon .)
    CLOSEPAR        reduce using rule 114 (generate_compare -> epsilon .)
    COMMA           reduce using rule 114 (generate_compare -> epsilon .)


state 114

    (69) lectura -> READ OPENPAR . lista_ids CLOSEPAR SEMICOLON
    (19) lista_ids -> . lista_ids1 lista_ids2
    (20) lista_ids -> . ID lista_ids2
    (21) lista_ids1 -> . ID OPENBOX block exp CLOSEBOX unblock

    ID              shift and go to state 163

    lista_ids                      shift and go to state 161
    lista_ids1                     shift and go to state 162

state 115

    (70) escritura -> WRITE OPENPAR . escritura1 CLOSEPAR SEMICOLON
    (71) escritura1 -> . escritura_string escritura2
    (72) escritura1 -> . escritura_expresion escritura2
    (75) escritura_string -> . STRING
    (76) escritura_expresion -> . expresion
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 167
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    escritura1                     shift and go to state 164
    escritura_string               shift and go to state 165
    escritura_expresion            shift and go to state 166
    expresion                      shift and go to state 168
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 116

    (77) condicion -> IF OPENPAR . expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 169
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 117

    (84) while -> WHILE while_punto1 . OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    OPENPAR         shift and go to state 170


state 118

    (85) while_punto1 -> epsilon .

    OPENPAR         reduce using rule 85 (while_punto1 -> epsilon .)


state 119

    (88) for -> FOR for1 . IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    IS              shift and go to state 171


state 120

    (89) for1 -> ID . OPENBOX block exp CLOSEBOX unblock
    (90) for1 -> ID .

    OPENBOX         shift and go to state 172
    IS              reduce using rule 90 (for1 -> ID .)


state 121

    (57) asignacion1 -> ID OPENBOX . block exp CLOSEBOX IS unblock
    (130) factor1 -> ID OPENBOX . block exp CLOSEBOX unblock
    (135) block -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    block                          shift and go to state 173
    epsilon                        shift and go to state 92

state 122

    (58) asignacion1 -> ID IS .

    OPENPAR         reduce using rule 58 (asignacion1 -> ID IS .)
    ID              reduce using rule 58 (asignacion1 -> ID IS .)
    PLUS            reduce using rule 58 (asignacion1 -> ID IS .)
    MINUS           reduce using rule 58 (asignacion1 -> ID IS .)
    INT             reduce using rule 58 (asignacion1 -> ID IS .)
    FLOAT           reduce using rule 58 (asignacion1 -> ID IS .)
    CHAR            reduce using rule 58 (asignacion1 -> ID IS .)


state 123

    (60) funcion -> funcion_punto1 OPENPAR . funcion1 funcion_punto3
    (61) funcion1 -> . exp funcion_punto2 funcion2
    (62) funcion1 -> . CLOSEPAR
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSEPAR        shift and go to state 176
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    funcion_punto1                 shift and go to state 71
    funcion1                       shift and go to state 174
    exp                            shift and go to state 175
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 124

    (95) expresion -> and generate_expresion .
    (96) expresion -> and generate_expresion . expresion1 expresion
    (97) expresion1 -> . OR

    SEMICOLON       reduce using rule 95 (expresion -> and generate_expresion .)
    CLOSEPAR        reduce using rule 95 (expresion -> and generate_expresion .)
    COMMA           reduce using rule 95 (expresion -> and generate_expresion .)
    OR              shift and go to state 178

    expresion1                     shift and go to state 177

state 125

    (98) generate_expresion -> epsilon .

    OR              reduce using rule 98 (generate_expresion -> epsilon .)
    SEMICOLON       reduce using rule 98 (generate_expresion -> epsilon .)
    CLOSEPAR        reduce using rule 98 (generate_expresion -> epsilon .)
    COMMA           reduce using rule 98 (generate_expresion -> epsilon .)


state 126

    (99) and -> equal generate_and .
    (100) and -> equal generate_and . and1 and
    (101) and1 -> . AND

    OR              reduce using rule 99 (and -> equal generate_and .)
    SEMICOLON       reduce using rule 99 (and -> equal generate_and .)
    CLOSEPAR        reduce using rule 99 (and -> equal generate_and .)
    COMMA           reduce using rule 99 (and -> equal generate_and .)
    AND             shift and go to state 180

    and1                           shift and go to state 179

state 127

    (102) generate_and -> epsilon .

    AND             reduce using rule 102 (generate_and -> epsilon .)
    OR              reduce using rule 102 (generate_and -> epsilon .)
    SEMICOLON       reduce using rule 102 (generate_and -> epsilon .)
    CLOSEPAR        reduce using rule 102 (generate_and -> epsilon .)
    COMMA           reduce using rule 102 (generate_and -> epsilon .)


state 128

    (103) equal -> compare generate_equal .
    (104) equal -> compare generate_equal . equal1 equal
    (105) equal1 -> . EQ
    (106) equal1 -> . NE

    AND             reduce using rule 103 (equal -> compare generate_equal .)
    OR              reduce using rule 103 (equal -> compare generate_equal .)
    SEMICOLON       reduce using rule 103 (equal -> compare generate_equal .)
    CLOSEPAR        reduce using rule 103 (equal -> compare generate_equal .)
    COMMA           reduce using rule 103 (equal -> compare generate_equal .)
    EQ              shift and go to state 182
    NE              shift and go to state 183

    equal1                         shift and go to state 181

state 129

    (107) generate_equal -> epsilon .

    EQ              reduce using rule 107 (generate_equal -> epsilon .)
    NE              reduce using rule 107 (generate_equal -> epsilon .)
    AND             reduce using rule 107 (generate_equal -> epsilon .)
    OR              reduce using rule 107 (generate_equal -> epsilon .)
    SEMICOLON       reduce using rule 107 (generate_equal -> epsilon .)
    CLOSEPAR        reduce using rule 107 (generate_equal -> epsilon .)
    COMMA           reduce using rule 107 (generate_equal -> epsilon .)


state 130

    (115) exp -> termino generate_exp .
    (116) exp -> termino generate_exp . exp1 exp
    (117) exp1 -> . PLUS
    (118) exp1 -> . MINUS

    LT              reduce using rule 115 (exp -> termino generate_exp .)
    LE              reduce using rule 115 (exp -> termino generate_exp .)
    GT              reduce using rule 115 (exp -> termino generate_exp .)
    GE              reduce using rule 115 (exp -> termino generate_exp .)
    EQ              reduce using rule 115 (exp -> termino generate_exp .)
    NE              reduce using rule 115 (exp -> termino generate_exp .)
    AND             reduce using rule 115 (exp -> termino generate_exp .)
    OR              reduce using rule 115 (exp -> termino generate_exp .)
    SEMICOLON       reduce using rule 115 (exp -> termino generate_exp .)
    CLOSEPAR        reduce using rule 115 (exp -> termino generate_exp .)
    COMMA           reduce using rule 115 (exp -> termino generate_exp .)
    TO              reduce using rule 115 (exp -> termino generate_exp .)
    CLOSEBOX        reduce using rule 115 (exp -> termino generate_exp .)
    DO              reduce using rule 115 (exp -> termino generate_exp .)
    PLUS            shift and go to state 185
    MINUS           shift and go to state 186

    exp1                           shift and go to state 184

state 131

    (119) generate_exp -> epsilon .

    PLUS            reduce using rule 119 (generate_exp -> epsilon .)
    MINUS           reduce using rule 119 (generate_exp -> epsilon .)
    LT              reduce using rule 119 (generate_exp -> epsilon .)
    LE              reduce using rule 119 (generate_exp -> epsilon .)
    GT              reduce using rule 119 (generate_exp -> epsilon .)
    GE              reduce using rule 119 (generate_exp -> epsilon .)
    EQ              reduce using rule 119 (generate_exp -> epsilon .)
    NE              reduce using rule 119 (generate_exp -> epsilon .)
    AND             reduce using rule 119 (generate_exp -> epsilon .)
    OR              reduce using rule 119 (generate_exp -> epsilon .)
    SEMICOLON       reduce using rule 119 (generate_exp -> epsilon .)
    CLOSEPAR        reduce using rule 119 (generate_exp -> epsilon .)
    COMMA           reduce using rule 119 (generate_exp -> epsilon .)
    TO              reduce using rule 119 (generate_exp -> epsilon .)
    CLOSEBOX        reduce using rule 119 (generate_exp -> epsilon .)
    DO              reduce using rule 119 (generate_exp -> epsilon .)


state 132

    (120) termino -> factor generate_termino .
    (121) termino -> factor generate_termino . termino1 termino
    (122) termino1 -> . MULTIPLY
    (123) termino1 -> . DIVIDE
    (124) termino1 -> . MODULO

    PLUS            reduce using rule 120 (termino -> factor generate_termino .)
    MINUS           reduce using rule 120 (termino -> factor generate_termino .)
    LT              reduce using rule 120 (termino -> factor generate_termino .)
    LE              reduce using rule 120 (termino -> factor generate_termino .)
    GT              reduce using rule 120 (termino -> factor generate_termino .)
    GE              reduce using rule 120 (termino -> factor generate_termino .)
    EQ              reduce using rule 120 (termino -> factor generate_termino .)
    NE              reduce using rule 120 (termino -> factor generate_termino .)
    AND             reduce using rule 120 (termino -> factor generate_termino .)
    OR              reduce using rule 120 (termino -> factor generate_termino .)
    SEMICOLON       reduce using rule 120 (termino -> factor generate_termino .)
    CLOSEPAR        reduce using rule 120 (termino -> factor generate_termino .)
    COMMA           reduce using rule 120 (termino -> factor generate_termino .)
    TO              reduce using rule 120 (termino -> factor generate_termino .)
    CLOSEBOX        reduce using rule 120 (termino -> factor generate_termino .)
    DO              reduce using rule 120 (termino -> factor generate_termino .)
    MULTIPLY        shift and go to state 188
    DIVIDE          shift and go to state 189
    MODULO          shift and go to state 190

    termino1                       shift and go to state 187

state 133

    (125) generate_termino -> epsilon .

    MULTIPLY        reduce using rule 125 (generate_termino -> epsilon .)
    DIVIDE          reduce using rule 125 (generate_termino -> epsilon .)
    MODULO          reduce using rule 125 (generate_termino -> epsilon .)
    PLUS            reduce using rule 125 (generate_termino -> epsilon .)
    MINUS           reduce using rule 125 (generate_termino -> epsilon .)
    LT              reduce using rule 125 (generate_termino -> epsilon .)
    LE              reduce using rule 125 (generate_termino -> epsilon .)
    GT              reduce using rule 125 (generate_termino -> epsilon .)
    GE              reduce using rule 125 (generate_termino -> epsilon .)
    EQ              reduce using rule 125 (generate_termino -> epsilon .)
    NE              reduce using rule 125 (generate_termino -> epsilon .)
    AND             reduce using rule 125 (generate_termino -> epsilon .)
    OR              reduce using rule 125 (generate_termino -> epsilon .)
    SEMICOLON       reduce using rule 125 (generate_termino -> epsilon .)
    CLOSEPAR        reduce using rule 125 (generate_termino -> epsilon .)
    COMMA           reduce using rule 125 (generate_termino -> epsilon .)
    TO              reduce using rule 125 (generate_termino -> epsilon .)
    CLOSEBOX        reduce using rule 125 (generate_termino -> epsilon .)
    DO              reduce using rule 125 (generate_termino -> epsilon .)


state 134

    (129) factor -> factor2 varcte .

    MULTIPLY        reduce using rule 129 (factor -> factor2 varcte .)
    DIVIDE          reduce using rule 129 (factor -> factor2 varcte .)
    MODULO          reduce using rule 129 (factor -> factor2 varcte .)
    PLUS            reduce using rule 129 (factor -> factor2 varcte .)
    MINUS           reduce using rule 129 (factor -> factor2 varcte .)
    LT              reduce using rule 129 (factor -> factor2 varcte .)
    LE              reduce using rule 129 (factor -> factor2 varcte .)
    GT              reduce using rule 129 (factor -> factor2 varcte .)
    GE              reduce using rule 129 (factor -> factor2 varcte .)
    EQ              reduce using rule 129 (factor -> factor2 varcte .)
    NE              reduce using rule 129 (factor -> factor2 varcte .)
    AND             reduce using rule 129 (factor -> factor2 varcte .)
    OR              reduce using rule 129 (factor -> factor2 varcte .)
    SEMICOLON       reduce using rule 129 (factor -> factor2 varcte .)
    CLOSEPAR        reduce using rule 129 (factor -> factor2 varcte .)
    COMMA           reduce using rule 129 (factor -> factor2 varcte .)
    TO              reduce using rule 129 (factor -> factor2 varcte .)
    CLOSEBOX        reduce using rule 129 (factor -> factor2 varcte .)
    DO              reduce using rule 129 (factor -> factor2 varcte .)


state 135

    (137) varcte -> ID .

    MULTIPLY        reduce using rule 137 (varcte -> ID .)
    DIVIDE          reduce using rule 137 (varcte -> ID .)
    MODULO          reduce using rule 137 (varcte -> ID .)
    PLUS            reduce using rule 137 (varcte -> ID .)
    MINUS           reduce using rule 137 (varcte -> ID .)
    LT              reduce using rule 137 (varcte -> ID .)
    LE              reduce using rule 137 (varcte -> ID .)
    GT              reduce using rule 137 (varcte -> ID .)
    GE              reduce using rule 137 (varcte -> ID .)
    EQ              reduce using rule 137 (varcte -> ID .)
    NE              reduce using rule 137 (varcte -> ID .)
    AND             reduce using rule 137 (varcte -> ID .)
    OR              reduce using rule 137 (varcte -> ID .)
    SEMICOLON       reduce using rule 137 (varcte -> ID .)
    CLOSEPAR        reduce using rule 137 (varcte -> ID .)
    COMMA           reduce using rule 137 (varcte -> ID .)
    TO              reduce using rule 137 (varcte -> ID .)
    CLOSEBOX        reduce using rule 137 (varcte -> ID .)
    DO              reduce using rule 137 (varcte -> ID .)


state 136

    (138) varcte -> int .

    MULTIPLY        reduce using rule 138 (varcte -> int .)
    DIVIDE          reduce using rule 138 (varcte -> int .)
    MODULO          reduce using rule 138 (varcte -> int .)
    PLUS            reduce using rule 138 (varcte -> int .)
    MINUS           reduce using rule 138 (varcte -> int .)
    LT              reduce using rule 138 (varcte -> int .)
    LE              reduce using rule 138 (varcte -> int .)
    GT              reduce using rule 138 (varcte -> int .)
    GE              reduce using rule 138 (varcte -> int .)
    EQ              reduce using rule 138 (varcte -> int .)
    NE              reduce using rule 138 (varcte -> int .)
    AND             reduce using rule 138 (varcte -> int .)
    OR              reduce using rule 138 (varcte -> int .)
    SEMICOLON       reduce using rule 138 (varcte -> int .)
    CLOSEPAR        reduce using rule 138 (varcte -> int .)
    COMMA           reduce using rule 138 (varcte -> int .)
    TO              reduce using rule 138 (varcte -> int .)
    CLOSEBOX        reduce using rule 138 (varcte -> int .)
    DO              reduce using rule 138 (varcte -> int .)


state 137

    (139) varcte -> float .

    MULTIPLY        reduce using rule 139 (varcte -> float .)
    DIVIDE          reduce using rule 139 (varcte -> float .)
    MODULO          reduce using rule 139 (varcte -> float .)
    PLUS            reduce using rule 139 (varcte -> float .)
    MINUS           reduce using rule 139 (varcte -> float .)
    LT              reduce using rule 139 (varcte -> float .)
    LE              reduce using rule 139 (varcte -> float .)
    GT              reduce using rule 139 (varcte -> float .)
    GE              reduce using rule 139 (varcte -> float .)
    EQ              reduce using rule 139 (varcte -> float .)
    NE              reduce using rule 139 (varcte -> float .)
    AND             reduce using rule 139 (varcte -> float .)
    OR              reduce using rule 139 (varcte -> float .)
    SEMICOLON       reduce using rule 139 (varcte -> float .)
    CLOSEPAR        reduce using rule 139 (varcte -> float .)
    COMMA           reduce using rule 139 (varcte -> float .)
    TO              reduce using rule 139 (varcte -> float .)
    CLOSEBOX        reduce using rule 139 (varcte -> float .)
    DO              reduce using rule 139 (varcte -> float .)


state 138

    (140) varcte -> char .

    MULTIPLY        reduce using rule 140 (varcte -> char .)
    DIVIDE          reduce using rule 140 (varcte -> char .)
    MODULO          reduce using rule 140 (varcte -> char .)
    PLUS            reduce using rule 140 (varcte -> char .)
    MINUS           reduce using rule 140 (varcte -> char .)
    LT              reduce using rule 140 (varcte -> char .)
    LE              reduce using rule 140 (varcte -> char .)
    GT              reduce using rule 140 (varcte -> char .)
    GE              reduce using rule 140 (varcte -> char .)
    EQ              reduce using rule 140 (varcte -> char .)
    NE              reduce using rule 140 (varcte -> char .)
    AND             reduce using rule 140 (varcte -> char .)
    OR              reduce using rule 140 (varcte -> char .)
    SEMICOLON       reduce using rule 140 (varcte -> char .)
    CLOSEPAR        reduce using rule 140 (varcte -> char .)
    COMMA           reduce using rule 140 (varcte -> char .)
    TO              reduce using rule 140 (varcte -> char .)
    CLOSEBOX        reduce using rule 140 (varcte -> char .)
    DO              reduce using rule 140 (varcte -> char .)


state 139

    (141) int -> INT .

    MULTIPLY        reduce using rule 141 (int -> INT .)
    DIVIDE          reduce using rule 141 (int -> INT .)
    MODULO          reduce using rule 141 (int -> INT .)
    PLUS            reduce using rule 141 (int -> INT .)
    MINUS           reduce using rule 141 (int -> INT .)
    LT              reduce using rule 141 (int -> INT .)
    LE              reduce using rule 141 (int -> INT .)
    GT              reduce using rule 141 (int -> INT .)
    GE              reduce using rule 141 (int -> INT .)
    EQ              reduce using rule 141 (int -> INT .)
    NE              reduce using rule 141 (int -> INT .)
    AND             reduce using rule 141 (int -> INT .)
    OR              reduce using rule 141 (int -> INT .)
    SEMICOLON       reduce using rule 141 (int -> INT .)
    CLOSEPAR        reduce using rule 141 (int -> INT .)
    COMMA           reduce using rule 141 (int -> INT .)
    TO              reduce using rule 141 (int -> INT .)
    CLOSEBOX        reduce using rule 141 (int -> INT .)
    DO              reduce using rule 141 (int -> INT .)


state 140

    (142) float -> FLOAT .

    MULTIPLY        reduce using rule 142 (float -> FLOAT .)
    DIVIDE          reduce using rule 142 (float -> FLOAT .)
    MODULO          reduce using rule 142 (float -> FLOAT .)
    PLUS            reduce using rule 142 (float -> FLOAT .)
    MINUS           reduce using rule 142 (float -> FLOAT .)
    LT              reduce using rule 142 (float -> FLOAT .)
    LE              reduce using rule 142 (float -> FLOAT .)
    GT              reduce using rule 142 (float -> FLOAT .)
    GE              reduce using rule 142 (float -> FLOAT .)
    EQ              reduce using rule 142 (float -> FLOAT .)
    NE              reduce using rule 142 (float -> FLOAT .)
    AND             reduce using rule 142 (float -> FLOAT .)
    OR              reduce using rule 142 (float -> FLOAT .)
    SEMICOLON       reduce using rule 142 (float -> FLOAT .)
    CLOSEPAR        reduce using rule 142 (float -> FLOAT .)
    COMMA           reduce using rule 142 (float -> FLOAT .)
    TO              reduce using rule 142 (float -> FLOAT .)
    CLOSEBOX        reduce using rule 142 (float -> FLOAT .)
    DO              reduce using rule 142 (float -> FLOAT .)


state 141

    (143) char -> CHAR .

    MULTIPLY        reduce using rule 143 (char -> CHAR .)
    DIVIDE          reduce using rule 143 (char -> CHAR .)
    MODULO          reduce using rule 143 (char -> CHAR .)
    PLUS            reduce using rule 143 (char -> CHAR .)
    MINUS           reduce using rule 143 (char -> CHAR .)
    LT              reduce using rule 143 (char -> CHAR .)
    LE              reduce using rule 143 (char -> CHAR .)
    GT              reduce using rule 143 (char -> CHAR .)
    GE              reduce using rule 143 (char -> CHAR .)
    EQ              reduce using rule 143 (char -> CHAR .)
    NE              reduce using rule 143 (char -> CHAR .)
    AND             reduce using rule 143 (char -> CHAR .)
    OR              reduce using rule 143 (char -> CHAR .)
    SEMICOLON       reduce using rule 143 (char -> CHAR .)
    CLOSEPAR        reduce using rule 143 (char -> CHAR .)
    COMMA           reduce using rule 143 (char -> CHAR .)
    TO              reduce using rule 143 (char -> CHAR .)
    CLOSEBOX        reduce using rule 143 (char -> CHAR .)
    DO              reduce using rule 143 (char -> CHAR .)


state 142

    (43) parameters1 -> COMMA parameters .

    CLOSEPAR        reduce using rule 43 (parameters1 -> COMMA parameters .)


state 143

    (36) funciones5 -> vars funciones_punto1 OPENCURLY . funciones6
    (38) funciones6 -> . estatutos funciones6
    (39) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 146
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    funciones6                     shift and go to state 191
    estatutos                      shift and go to state 145
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 144

    (37) funciones5 -> funciones_punto1 OPENCURLY funciones6 .

    MAIN            reduce using rule 37 (funciones5 -> funciones_punto1 OPENCURLY funciones6 .)


state 145

    (38) funciones6 -> estatutos . funciones6
    (38) funciones6 -> . estatutos funciones6
    (39) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 146
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    estatutos                      shift and go to state 145
    funciones6                     shift and go to state 192
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 146

    (39) funciones6 -> CLOSECURLY . funciones_punto2 funciones
    (41) funciones_punto2 -> . epsilon
    (144) epsilon -> .

    FUNCTION        reduce using rule 144 (epsilon -> .)
    MAIN            reduce using rule 144 (epsilon -> .)

    funciones_punto2               shift and go to state 193
    epsilon                        shift and go to state 194

state 147

    (13) vars3 -> OPENBOX INT . CLOSEBOX vars4

    CLOSEBOX        shift and go to state 195


state 148

    (15) vars4 -> SEMICOLON vars5 .

    FUNCTION        reduce using rule 15 (vars4 -> SEMICOLON vars5 .)
    MAIN            reduce using rule 15 (vars4 -> SEMICOLON vars5 .)
    OPENCURLY       reduce using rule 15 (vars4 -> SEMICOLON vars5 .)


state 149

    (17) vars5 -> vars1 .

    FUNCTION        reduce using rule 17 (vars5 -> vars1 .)
    MAIN            reduce using rule 17 (vars5 -> vars1 .)
    OPENCURLY       reduce using rule 17 (vars5 -> vars1 .)


state 150

    (18) vars5 -> epsilon .

    FUNCTION        reduce using rule 18 (vars5 -> epsilon .)
    MAIN            reduce using rule 18 (vars5 -> epsilon .)
    OPENCURLY       reduce using rule 18 (vars5 -> epsilon .)


state 151

    (16) vars4 -> COMMA vars2 .

    FUNCTION        reduce using rule 16 (vars4 -> COMMA vars2 .)
    MAIN            reduce using rule 16 (vars4 -> COMMA vars2 .)
    OPENCURLY       reduce using rule 16 (vars4 -> COMMA vars2 .)


state 152

    (127) factor -> OPENPAR block expresion . CLOSEPAR unblock

    CLOSEPAR        shift and go to state 196


state 153

    (56) asignacion -> asignacion1 expresion SEMICOLON .

    RETURN          reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    READ            reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    WRITE           reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    IF              reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    WHILE           reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    FOR             reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    ID              reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    OPENPAR         reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    PLUS            reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    MINUS           reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    INT             reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    FLOAT           reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    CHAR            reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 56 (asignacion -> asignacion1 expresion SEMICOLON .)


state 154

    (130) factor1 -> ID OPENBOX . block exp CLOSEBOX unblock
    (135) block -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    block                          shift and go to state 197
    epsilon                        shift and go to state 92

state 155

    (68) retorno -> RETURN OPENPAR exp . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 198


state 156

    (109) compare -> exp generate_compare compare1 . compare
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 64
    compare                        shift and go to state 199
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 157

    (110) compare1 -> LT .

    OPENPAR         reduce using rule 110 (compare1 -> LT .)
    ID              reduce using rule 110 (compare1 -> LT .)
    PLUS            reduce using rule 110 (compare1 -> LT .)
    MINUS           reduce using rule 110 (compare1 -> LT .)
    INT             reduce using rule 110 (compare1 -> LT .)
    FLOAT           reduce using rule 110 (compare1 -> LT .)
    CHAR            reduce using rule 110 (compare1 -> LT .)


state 158

    (111) compare1 -> LE .

    OPENPAR         reduce using rule 111 (compare1 -> LE .)
    ID              reduce using rule 111 (compare1 -> LE .)
    PLUS            reduce using rule 111 (compare1 -> LE .)
    MINUS           reduce using rule 111 (compare1 -> LE .)
    INT             reduce using rule 111 (compare1 -> LE .)
    FLOAT           reduce using rule 111 (compare1 -> LE .)
    CHAR            reduce using rule 111 (compare1 -> LE .)


state 159

    (112) compare1 -> GT .

    OPENPAR         reduce using rule 112 (compare1 -> GT .)
    ID              reduce using rule 112 (compare1 -> GT .)
    PLUS            reduce using rule 112 (compare1 -> GT .)
    MINUS           reduce using rule 112 (compare1 -> GT .)
    INT             reduce using rule 112 (compare1 -> GT .)
    FLOAT           reduce using rule 112 (compare1 -> GT .)
    CHAR            reduce using rule 112 (compare1 -> GT .)


state 160

    (113) compare1 -> GE .

    OPENPAR         reduce using rule 113 (compare1 -> GE .)
    ID              reduce using rule 113 (compare1 -> GE .)
    PLUS            reduce using rule 113 (compare1 -> GE .)
    MINUS           reduce using rule 113 (compare1 -> GE .)
    INT             reduce using rule 113 (compare1 -> GE .)
    FLOAT           reduce using rule 113 (compare1 -> GE .)
    CHAR            reduce using rule 113 (compare1 -> GE .)


state 161

    (69) lectura -> READ OPENPAR lista_ids . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 200


state 162

    (19) lista_ids -> lista_ids1 . lista_ids2
    (22) lista_ids2 -> . COMMA lista_ids
    (23) lista_ids2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 202
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    lista_ids2                     shift and go to state 201
    epsilon                        shift and go to state 203

state 163

    (20) lista_ids -> ID . lista_ids2
    (21) lista_ids1 -> ID . OPENBOX block exp CLOSEBOX unblock
    (22) lista_ids2 -> . COMMA lista_ids
    (23) lista_ids2 -> . epsilon
    (144) epsilon -> .

    OPENBOX         shift and go to state 205
    COMMA           shift and go to state 202
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    lista_ids2                     shift and go to state 204
    epsilon                        shift and go to state 203

state 164

    (70) escritura -> WRITE OPENPAR escritura1 . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 206


state 165

    (71) escritura1 -> escritura_string . escritura2
    (73) escritura2 -> . COMMA escritura1
    (74) escritura2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 208
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    escritura2                     shift and go to state 207
    epsilon                        shift and go to state 209

state 166

    (72) escritura1 -> escritura_expresion . escritura2
    (73) escritura2 -> . COMMA escritura1
    (74) escritura2 -> . epsilon
    (144) epsilon -> .

    COMMA           shift and go to state 208
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    escritura2                     shift and go to state 210
    epsilon                        shift and go to state 209

state 167

    (75) escritura_string -> STRING .

    COMMA           reduce using rule 75 (escritura_string -> STRING .)
    CLOSEPAR        reduce using rule 75 (escritura_string -> STRING .)


state 168

    (76) escritura_expresion -> expresion .

    COMMA           reduce using rule 76 (escritura_expresion -> expresion .)
    CLOSEPAR        reduce using rule 76 (escritura_expresion -> expresion .)


state 169

    (77) condicion -> IF OPENPAR expresion . CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    CLOSEPAR        shift and go to state 211


state 170

    (84) while -> WHILE while_punto1 OPENPAR . expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 212
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 171

    (88) for -> FOR for1 IS . exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 213
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 172

    (89) for1 -> ID OPENBOX . block exp CLOSEBOX unblock
    (135) block -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    block                          shift and go to state 214
    epsilon                        shift and go to state 92

state 173

    (57) asignacion1 -> ID OPENBOX block . exp CLOSEBOX IS unblock
    (130) factor1 -> ID OPENBOX block . exp CLOSEBOX unblock
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 215
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 174

    (60) funcion -> funcion_punto1 OPENPAR funcion1 . funcion_punto3
    (67) funcion_punto3 -> . epsilon
    (144) epsilon -> .

    SEMICOLON       reduce using rule 144 (epsilon -> .)
    MULTIPLY        reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    MODULO          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    TO              reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)
    DO              reduce using rule 144 (epsilon -> .)

    funcion_punto3                 shift and go to state 216
    epsilon                        shift and go to state 217

state 175

    (61) funcion1 -> exp . funcion_punto2 funcion2
    (66) funcion_punto2 -> . epsilon
    (144) epsilon -> .

    COMMA           reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    funcion_punto2                 shift and go to state 218
    epsilon                        shift and go to state 219

state 176

    (62) funcion1 -> CLOSEPAR .

    SEMICOLON       reduce using rule 62 (funcion1 -> CLOSEPAR .)
    MULTIPLY        reduce using rule 62 (funcion1 -> CLOSEPAR .)
    DIVIDE          reduce using rule 62 (funcion1 -> CLOSEPAR .)
    MODULO          reduce using rule 62 (funcion1 -> CLOSEPAR .)
    PLUS            reduce using rule 62 (funcion1 -> CLOSEPAR .)
    MINUS           reduce using rule 62 (funcion1 -> CLOSEPAR .)
    LT              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    LE              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    GT              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    GE              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    EQ              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    NE              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    AND             reduce using rule 62 (funcion1 -> CLOSEPAR .)
    OR              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 62 (funcion1 -> CLOSEPAR .)
    COMMA           reduce using rule 62 (funcion1 -> CLOSEPAR .)
    TO              reduce using rule 62 (funcion1 -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 62 (funcion1 -> CLOSEPAR .)
    DO              reduce using rule 62 (funcion1 -> CLOSEPAR .)


state 177

    (96) expresion -> and generate_expresion expresion1 . expresion
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    and                            shift and go to state 72
    expresion                      shift and go to state 220
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 178

    (97) expresion1 -> OR .

    OPENPAR         reduce using rule 97 (expresion1 -> OR .)
    ID              reduce using rule 97 (expresion1 -> OR .)
    PLUS            reduce using rule 97 (expresion1 -> OR .)
    MINUS           reduce using rule 97 (expresion1 -> OR .)
    INT             reduce using rule 97 (expresion1 -> OR .)
    FLOAT           reduce using rule 97 (expresion1 -> OR .)
    CHAR            reduce using rule 97 (expresion1 -> OR .)


state 179

    (100) and -> equal generate_and and1 . and
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    equal                          shift and go to state 73
    and                            shift and go to state 221
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 180

    (101) and1 -> AND .

    OPENPAR         reduce using rule 101 (and1 -> AND .)
    ID              reduce using rule 101 (and1 -> AND .)
    PLUS            reduce using rule 101 (and1 -> AND .)
    MINUS           reduce using rule 101 (and1 -> AND .)
    INT             reduce using rule 101 (and1 -> AND .)
    FLOAT           reduce using rule 101 (and1 -> AND .)
    CHAR            reduce using rule 101 (and1 -> AND .)


state 181

    (104) equal -> compare generate_equal equal1 . equal
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    compare                        shift and go to state 74
    equal                          shift and go to state 222
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 182

    (105) equal1 -> EQ .

    OPENPAR         reduce using rule 105 (equal1 -> EQ .)
    ID              reduce using rule 105 (equal1 -> EQ .)
    PLUS            reduce using rule 105 (equal1 -> EQ .)
    MINUS           reduce using rule 105 (equal1 -> EQ .)
    INT             reduce using rule 105 (equal1 -> EQ .)
    FLOAT           reduce using rule 105 (equal1 -> EQ .)
    CHAR            reduce using rule 105 (equal1 -> EQ .)


state 183

    (106) equal1 -> NE .

    OPENPAR         reduce using rule 106 (equal1 -> NE .)
    ID              reduce using rule 106 (equal1 -> NE .)
    PLUS            reduce using rule 106 (equal1 -> NE .)
    MINUS           reduce using rule 106 (equal1 -> NE .)
    INT             reduce using rule 106 (equal1 -> NE .)
    FLOAT           reduce using rule 106 (equal1 -> NE .)
    CHAR            reduce using rule 106 (equal1 -> NE .)


state 184

    (116) exp -> termino generate_exp exp1 . exp
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    termino                        shift and go to state 75
    exp                            shift and go to state 223
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 185

    (117) exp1 -> PLUS .

    OPENPAR         reduce using rule 117 (exp1 -> PLUS .)
    ID              reduce using rule 117 (exp1 -> PLUS .)
    PLUS            reduce using rule 117 (exp1 -> PLUS .)
    MINUS           reduce using rule 117 (exp1 -> PLUS .)
    INT             reduce using rule 117 (exp1 -> PLUS .)
    FLOAT           reduce using rule 117 (exp1 -> PLUS .)
    CHAR            reduce using rule 117 (exp1 -> PLUS .)


state 186

    (118) exp1 -> MINUS .

    OPENPAR         reduce using rule 118 (exp1 -> MINUS .)
    ID              reduce using rule 118 (exp1 -> MINUS .)
    PLUS            reduce using rule 118 (exp1 -> MINUS .)
    MINUS           reduce using rule 118 (exp1 -> MINUS .)
    INT             reduce using rule 118 (exp1 -> MINUS .)
    FLOAT           reduce using rule 118 (exp1 -> MINUS .)
    CHAR            reduce using rule 118 (exp1 -> MINUS .)


state 187

    (121) termino -> factor generate_termino termino1 . termino
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    factor                         shift and go to state 76
    termino                        shift and go to state 224
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 188

    (122) termino1 -> MULTIPLY .

    OPENPAR         reduce using rule 122 (termino1 -> MULTIPLY .)
    ID              reduce using rule 122 (termino1 -> MULTIPLY .)
    PLUS            reduce using rule 122 (termino1 -> MULTIPLY .)
    MINUS           reduce using rule 122 (termino1 -> MULTIPLY .)
    INT             reduce using rule 122 (termino1 -> MULTIPLY .)
    FLOAT           reduce using rule 122 (termino1 -> MULTIPLY .)
    CHAR            reduce using rule 122 (termino1 -> MULTIPLY .)


state 189

    (123) termino1 -> DIVIDE .

    OPENPAR         reduce using rule 123 (termino1 -> DIVIDE .)
    ID              reduce using rule 123 (termino1 -> DIVIDE .)
    PLUS            reduce using rule 123 (termino1 -> DIVIDE .)
    MINUS           reduce using rule 123 (termino1 -> DIVIDE .)
    INT             reduce using rule 123 (termino1 -> DIVIDE .)
    FLOAT           reduce using rule 123 (termino1 -> DIVIDE .)
    CHAR            reduce using rule 123 (termino1 -> DIVIDE .)


state 190

    (124) termino1 -> MODULO .

    OPENPAR         reduce using rule 124 (termino1 -> MODULO .)
    ID              reduce using rule 124 (termino1 -> MODULO .)
    PLUS            reduce using rule 124 (termino1 -> MODULO .)
    MINUS           reduce using rule 124 (termino1 -> MODULO .)
    INT             reduce using rule 124 (termino1 -> MODULO .)
    FLOAT           reduce using rule 124 (termino1 -> MODULO .)
    CHAR            reduce using rule 124 (termino1 -> MODULO .)


state 191

    (36) funciones5 -> vars funciones_punto1 OPENCURLY funciones6 .

    MAIN            reduce using rule 36 (funciones5 -> vars funciones_punto1 OPENCURLY funciones6 .)


state 192

    (38) funciones6 -> estatutos funciones6 .

    MAIN            reduce using rule 38 (funciones6 -> estatutos funciones6 .)


state 193

    (39) funciones6 -> CLOSECURLY funciones_punto2 . funciones
    (28) funciones -> . FUNCTION funciones1
    (29) funciones -> . epsilon
    (144) epsilon -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 144 (epsilon -> .)

    funciones                      shift and go to state 225
    epsilon                        shift and go to state 226

state 194

    (41) funciones_punto2 -> epsilon .

    FUNCTION        reduce using rule 41 (funciones_punto2 -> epsilon .)
    MAIN            reduce using rule 41 (funciones_punto2 -> epsilon .)


state 195

    (13) vars3 -> OPENBOX INT CLOSEBOX . vars4
    (15) vars4 -> . SEMICOLON vars5
    (16) vars4 -> . COMMA vars2

    SEMICOLON       shift and go to state 89
    COMMA           shift and go to state 90

    vars4                          shift and go to state 227

state 196

    (127) factor -> OPENPAR block expresion CLOSEPAR . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    MULTIPLY        reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    MODULO          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    TO              reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)
    DO              reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 228
    epsilon                        shift and go to state 229

state 197

    (130) factor1 -> ID OPENBOX block . exp CLOSEBOX unblock
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 230
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 198

    (68) retorno -> RETURN OPENPAR exp CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 231


state 199

    (109) compare -> exp generate_compare compare1 compare .

    EQ              reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    NE              reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    AND             reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    OR              reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    SEMICOLON       reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    CLOSEPAR        reduce using rule 109 (compare -> exp generate_compare compare1 compare .)
    COMMA           reduce using rule 109 (compare -> exp generate_compare compare1 compare .)


state 200

    (69) lectura -> READ OPENPAR lista_ids CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 232


state 201

    (19) lista_ids -> lista_ids1 lista_ids2 .

    CLOSEPAR        reduce using rule 19 (lista_ids -> lista_ids1 lista_ids2 .)


state 202

    (22) lista_ids2 -> COMMA . lista_ids
    (19) lista_ids -> . lista_ids1 lista_ids2
    (20) lista_ids -> . ID lista_ids2
    (21) lista_ids1 -> . ID OPENBOX block exp CLOSEBOX unblock

    ID              shift and go to state 163

    lista_ids                      shift and go to state 233
    lista_ids1                     shift and go to state 162

state 203

    (23) lista_ids2 -> epsilon .

    CLOSEPAR        reduce using rule 23 (lista_ids2 -> epsilon .)


state 204

    (20) lista_ids -> ID lista_ids2 .

    CLOSEPAR        reduce using rule 20 (lista_ids -> ID lista_ids2 .)


state 205

    (21) lista_ids1 -> ID OPENBOX . block exp CLOSEBOX unblock
    (135) block -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    block                          shift and go to state 234
    epsilon                        shift and go to state 92

state 206

    (70) escritura -> WRITE OPENPAR escritura1 CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 235


state 207

    (71) escritura1 -> escritura_string escritura2 .

    CLOSEPAR        reduce using rule 71 (escritura1 -> escritura_string escritura2 .)


state 208

    (73) escritura2 -> COMMA . escritura1
    (71) escritura1 -> . escritura_string escritura2
    (72) escritura1 -> . escritura_expresion escritura2
    (75) escritura_string -> . STRING
    (76) escritura_expresion -> . expresion
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 167
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    escritura1                     shift and go to state 236
    escritura_string               shift and go to state 165
    escritura_expresion            shift and go to state 166
    expresion                      shift and go to state 168
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 209

    (74) escritura2 -> epsilon .

    CLOSEPAR        reduce using rule 74 (escritura2 -> epsilon .)


state 210

    (72) escritura1 -> escritura_expresion escritura2 .

    CLOSEPAR        reduce using rule 72 (escritura1 -> escritura_expresion escritura2 .)


state 211

    (77) condicion -> IF OPENPAR expresion CLOSEPAR . THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    THEN            shift and go to state 237


state 212

    (84) while -> WHILE while_punto1 OPENPAR expresion . CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    CLOSEPAR        shift and go to state 238


state 213

    (88) for -> FOR for1 IS exp . for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (91) for_punto1 -> . epsilon
    (144) epsilon -> .

    TO              reduce using rule 144 (epsilon -> .)

    for_punto1                     shift and go to state 239
    epsilon                        shift and go to state 240

state 214

    (89) for1 -> ID OPENBOX block . exp CLOSEBOX unblock
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 241
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 215

    (57) asignacion1 -> ID OPENBOX block exp . CLOSEBOX IS unblock
    (130) factor1 -> ID OPENBOX block exp . CLOSEBOX unblock

    CLOSEBOX        shift and go to state 242


state 216

    (60) funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .

    SEMICOLON       reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MULTIPLY        reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    DIVIDE          reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MODULO          reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    PLUS            reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MINUS           reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    LT              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    LE              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    GT              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    GE              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    EQ              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    NE              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    AND             reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    OR              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    CLOSEPAR        reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    COMMA           reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    TO              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    CLOSEBOX        reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    DO              reduce using rule 60 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)


state 217

    (67) funcion_punto3 -> epsilon .

    SEMICOLON       reduce using rule 67 (funcion_punto3 -> epsilon .)
    MULTIPLY        reduce using rule 67 (funcion_punto3 -> epsilon .)
    DIVIDE          reduce using rule 67 (funcion_punto3 -> epsilon .)
    MODULO          reduce using rule 67 (funcion_punto3 -> epsilon .)
    PLUS            reduce using rule 67 (funcion_punto3 -> epsilon .)
    MINUS           reduce using rule 67 (funcion_punto3 -> epsilon .)
    LT              reduce using rule 67 (funcion_punto3 -> epsilon .)
    LE              reduce using rule 67 (funcion_punto3 -> epsilon .)
    GT              reduce using rule 67 (funcion_punto3 -> epsilon .)
    GE              reduce using rule 67 (funcion_punto3 -> epsilon .)
    EQ              reduce using rule 67 (funcion_punto3 -> epsilon .)
    NE              reduce using rule 67 (funcion_punto3 -> epsilon .)
    AND             reduce using rule 67 (funcion_punto3 -> epsilon .)
    OR              reduce using rule 67 (funcion_punto3 -> epsilon .)
    CLOSEPAR        reduce using rule 67 (funcion_punto3 -> epsilon .)
    COMMA           reduce using rule 67 (funcion_punto3 -> epsilon .)
    TO              reduce using rule 67 (funcion_punto3 -> epsilon .)
    CLOSEBOX        reduce using rule 67 (funcion_punto3 -> epsilon .)
    DO              reduce using rule 67 (funcion_punto3 -> epsilon .)


state 218

    (61) funcion1 -> exp funcion_punto2 . funcion2
    (63) funcion2 -> . COMMA funcion1
    (64) funcion2 -> . CLOSEPAR

    COMMA           shift and go to state 244
    CLOSEPAR        shift and go to state 245

    funcion2                       shift and go to state 243

state 219

    (66) funcion_punto2 -> epsilon .

    COMMA           reduce using rule 66 (funcion_punto2 -> epsilon .)
    CLOSEPAR        reduce using rule 66 (funcion_punto2 -> epsilon .)


state 220

    (96) expresion -> and generate_expresion expresion1 expresion .

    SEMICOLON       reduce using rule 96 (expresion -> and generate_expresion expresion1 expresion .)
    CLOSEPAR        reduce using rule 96 (expresion -> and generate_expresion expresion1 expresion .)
    COMMA           reduce using rule 96 (expresion -> and generate_expresion expresion1 expresion .)


state 221

    (100) and -> equal generate_and and1 and .

    OR              reduce using rule 100 (and -> equal generate_and and1 and .)
    SEMICOLON       reduce using rule 100 (and -> equal generate_and and1 and .)
    CLOSEPAR        reduce using rule 100 (and -> equal generate_and and1 and .)
    COMMA           reduce using rule 100 (and -> equal generate_and and1 and .)


state 222

    (104) equal -> compare generate_equal equal1 equal .

    AND             reduce using rule 104 (equal -> compare generate_equal equal1 equal .)
    OR              reduce using rule 104 (equal -> compare generate_equal equal1 equal .)
    SEMICOLON       reduce using rule 104 (equal -> compare generate_equal equal1 equal .)
    CLOSEPAR        reduce using rule 104 (equal -> compare generate_equal equal1 equal .)
    COMMA           reduce using rule 104 (equal -> compare generate_equal equal1 equal .)


state 223

    (116) exp -> termino generate_exp exp1 exp .

    LT              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    LE              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    GT              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    GE              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    EQ              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    NE              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    AND             reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    OR              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    SEMICOLON       reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    CLOSEPAR        reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    COMMA           reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    TO              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    CLOSEBOX        reduce using rule 116 (exp -> termino generate_exp exp1 exp .)
    DO              reduce using rule 116 (exp -> termino generate_exp exp1 exp .)


state 224

    (121) termino -> factor generate_termino termino1 termino .

    PLUS            reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    MINUS           reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    LT              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    LE              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    GT              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    GE              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    EQ              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    NE              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    AND             reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    OR              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    SEMICOLON       reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    CLOSEPAR        reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    COMMA           reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    TO              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    CLOSEBOX        reduce using rule 121 (termino -> factor generate_termino termino1 termino .)
    DO              reduce using rule 121 (termino -> factor generate_termino termino1 termino .)


state 225

    (39) funciones6 -> CLOSECURLY funciones_punto2 funciones .

    MAIN            reduce using rule 39 (funciones6 -> CLOSECURLY funciones_punto2 funciones .)


state 226

    (29) funciones -> epsilon .

    MAIN            reduce using rule 29 (funciones -> epsilon .)


state 227

    (13) vars3 -> OPENBOX INT CLOSEBOX vars4 .

    FUNCTION        reduce using rule 13 (vars3 -> OPENBOX INT CLOSEBOX vars4 .)
    MAIN            reduce using rule 13 (vars3 -> OPENBOX INT CLOSEBOX vars4 .)
    OPENCURLY       reduce using rule 13 (vars3 -> OPENBOX INT CLOSEBOX vars4 .)


state 228

    (127) factor -> OPENPAR block expresion CLOSEPAR unblock .

    MULTIPLY        reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    DIVIDE          reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    MODULO          reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    PLUS            reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    MINUS           reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    LT              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    LE              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    GT              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    GE              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    EQ              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    NE              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    AND             reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    OR              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    SEMICOLON       reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    CLOSEPAR        reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    COMMA           reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    TO              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    CLOSEBOX        reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)
    DO              reduce using rule 127 (factor -> OPENPAR block expresion CLOSEPAR unblock .)


state 229

    (136) unblock -> epsilon .

    MULTIPLY        reduce using rule 136 (unblock -> epsilon .)
    DIVIDE          reduce using rule 136 (unblock -> epsilon .)
    MODULO          reduce using rule 136 (unblock -> epsilon .)
    PLUS            reduce using rule 136 (unblock -> epsilon .)
    MINUS           reduce using rule 136 (unblock -> epsilon .)
    LT              reduce using rule 136 (unblock -> epsilon .)
    LE              reduce using rule 136 (unblock -> epsilon .)
    GT              reduce using rule 136 (unblock -> epsilon .)
    GE              reduce using rule 136 (unblock -> epsilon .)
    EQ              reduce using rule 136 (unblock -> epsilon .)
    NE              reduce using rule 136 (unblock -> epsilon .)
    AND             reduce using rule 136 (unblock -> epsilon .)
    OR              reduce using rule 136 (unblock -> epsilon .)
    SEMICOLON       reduce using rule 136 (unblock -> epsilon .)
    CLOSEPAR        reduce using rule 136 (unblock -> epsilon .)
    COMMA           reduce using rule 136 (unblock -> epsilon .)
    TO              reduce using rule 136 (unblock -> epsilon .)
    CLOSEBOX        reduce using rule 136 (unblock -> epsilon .)
    DO              reduce using rule 136 (unblock -> epsilon .)
    IS              reduce using rule 136 (unblock -> epsilon .)
    OPENPAR         reduce using rule 136 (unblock -> epsilon .)
    ID              reduce using rule 136 (unblock -> epsilon .)
    INT             reduce using rule 136 (unblock -> epsilon .)
    FLOAT           reduce using rule 136 (unblock -> epsilon .)
    CHAR            reduce using rule 136 (unblock -> epsilon .)


state 230

    (130) factor1 -> ID OPENBOX block exp . CLOSEBOX unblock

    CLOSEBOX        shift and go to state 246


state 231

    (68) retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    READ            reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    IF              reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    ID              reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    INT             reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 68 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)


state 232

    (69) lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    READ            reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    IF              reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    ID              reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    INT             reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 69 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)


state 233

    (22) lista_ids2 -> COMMA lista_ids .

    CLOSEPAR        reduce using rule 22 (lista_ids2 -> COMMA lista_ids .)


state 234

    (21) lista_ids1 -> ID OPENBOX block . exp CLOSEBOX unblock
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 247
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 235

    (70) escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    READ            reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    IF              reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    ID              reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    INT             reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 70 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)


state 236

    (73) escritura2 -> COMMA escritura1 .

    CLOSEPAR        reduce using rule 73 (escritura2 -> COMMA escritura1 .)


state 237

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN . condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (80) condicion_punto1 -> . epsilon
    (144) epsilon -> .

    OPENCURLY       reduce using rule 144 (epsilon -> .)

    condicion_punto1               shift and go to state 248
    epsilon                        shift and go to state 249

state 238

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR . while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) while_punto2 -> . epsilon
    (144) epsilon -> .

    DO              reduce using rule 144 (epsilon -> .)

    while_punto2                   shift and go to state 250
    epsilon                        shift and go to state 251

state 239

    (88) for -> FOR for1 IS exp for_punto1 . TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    TO              shift and go to state 252


state 240

    (91) for_punto1 -> epsilon .

    TO              reduce using rule 91 (for_punto1 -> epsilon .)


state 241

    (89) for1 -> ID OPENBOX block exp . CLOSEBOX unblock

    CLOSEBOX        shift and go to state 253


state 242

    (57) asignacion1 -> ID OPENBOX block exp CLOSEBOX . IS unblock
    (130) factor1 -> ID OPENBOX block exp CLOSEBOX . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    IS              shift and go to state 254
    MULTIPLY        reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    MODULO          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 255
    epsilon                        shift and go to state 229

state 243

    (61) funcion1 -> exp funcion_punto2 funcion2 .

    SEMICOLON       reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    MULTIPLY        reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    DIVIDE          reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    MODULO          reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    PLUS            reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    MINUS           reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    LT              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    LE              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    GT              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    GE              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    EQ              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    NE              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    AND             reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    OR              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    CLOSEPAR        reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    COMMA           reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    TO              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    CLOSEBOX        reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)
    DO              reduce using rule 61 (funcion1 -> exp funcion_punto2 funcion2 .)


state 244

    (63) funcion2 -> COMMA . funcion1
    (61) funcion1 -> . exp funcion_punto2 funcion2
    (62) funcion1 -> . CLOSEPAR
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSEPAR        shift and go to state 176
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    funcion1                       shift and go to state 256
    exp                            shift and go to state 175
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 245

    (64) funcion2 -> CLOSEPAR .

    SEMICOLON       reduce using rule 64 (funcion2 -> CLOSEPAR .)
    MULTIPLY        reduce using rule 64 (funcion2 -> CLOSEPAR .)
    DIVIDE          reduce using rule 64 (funcion2 -> CLOSEPAR .)
    MODULO          reduce using rule 64 (funcion2 -> CLOSEPAR .)
    PLUS            reduce using rule 64 (funcion2 -> CLOSEPAR .)
    MINUS           reduce using rule 64 (funcion2 -> CLOSEPAR .)
    LT              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    LE              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    GT              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    GE              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    EQ              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    NE              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    AND             reduce using rule 64 (funcion2 -> CLOSEPAR .)
    OR              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 64 (funcion2 -> CLOSEPAR .)
    COMMA           reduce using rule 64 (funcion2 -> CLOSEPAR .)
    TO              reduce using rule 64 (funcion2 -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 64 (funcion2 -> CLOSEPAR .)
    DO              reduce using rule 64 (funcion2 -> CLOSEPAR .)


state 246

    (130) factor1 -> ID OPENBOX block exp CLOSEBOX . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    MULTIPLY        reduce using rule 144 (epsilon -> .)
    DIVIDE          reduce using rule 144 (epsilon -> .)
    MODULO          reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    LT              reduce using rule 144 (epsilon -> .)
    LE              reduce using rule 144 (epsilon -> .)
    GT              reduce using rule 144 (epsilon -> .)
    GE              reduce using rule 144 (epsilon -> .)
    EQ              reduce using rule 144 (epsilon -> .)
    NE              reduce using rule 144 (epsilon -> .)
    AND             reduce using rule 144 (epsilon -> .)
    OR              reduce using rule 144 (epsilon -> .)
    SEMICOLON       reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)
    COMMA           reduce using rule 144 (epsilon -> .)
    TO              reduce using rule 144 (epsilon -> .)
    CLOSEBOX        reduce using rule 144 (epsilon -> .)
    DO              reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 255
    epsilon                        shift and go to state 229

state 247

    (21) lista_ids1 -> ID OPENBOX block exp . CLOSEBOX unblock

    CLOSEBOX        shift and go to state 257


state 248

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 . OPENCURLY estatutos CLOSECURLY condicion1

    OPENCURLY       shift and go to state 258


state 249

    (80) condicion_punto1 -> epsilon .

    OPENCURLY       reduce using rule 80 (condicion_punto1 -> epsilon .)


state 250

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 . DO OPENCURLY estatutos CLOSECURLY while_punto3

    DO              shift and go to state 259


state 251

    (86) while_punto2 -> epsilon .

    DO              reduce using rule 86 (while_punto2 -> epsilon .)


state 252

    (88) for -> FOR for1 IS exp for_punto1 TO . exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (65) funcion_punto1 -> . ID
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    OPENPAR         shift and go to state 47
    ID              shift and go to state 107
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 260
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    funcion                        shift and go to state 106
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 108

state 253

    (89) for1 -> ID OPENBOX block exp CLOSEBOX . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    IS              reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 261
    epsilon                        shift and go to state 229

state 254

    (57) asignacion1 -> ID OPENBOX block exp CLOSEBOX IS . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    OPENPAR         reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 262
    epsilon                        shift and go to state 229

state 255

    (130) factor1 -> ID OPENBOX block exp CLOSEBOX unblock .

    MULTIPLY        reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    DIVIDE          reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    MODULO          reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    PLUS            reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    MINUS           reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    LT              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    LE              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    GT              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    GE              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    EQ              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    NE              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    AND             reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    OR              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    SEMICOLON       reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    CLOSEPAR        reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    COMMA           reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    TO              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    CLOSEBOX        reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    DO              reduce using rule 130 (factor1 -> ID OPENBOX block exp CLOSEBOX unblock .)


state 256

    (63) funcion2 -> COMMA funcion1 .

    SEMICOLON       reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    MULTIPLY        reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    DIVIDE          reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    MODULO          reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    PLUS            reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    MINUS           reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    LT              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    LE              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    GT              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    GE              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    EQ              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    NE              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    AND             reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    OR              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    CLOSEPAR        reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    COMMA           reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    TO              reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    CLOSEBOX        reduce using rule 63 (funcion2 -> COMMA funcion1 .)
    DO              reduce using rule 63 (funcion2 -> COMMA funcion1 .)


state 257

    (21) lista_ids1 -> ID OPENBOX block exp CLOSEBOX . unblock
    (136) unblock -> . epsilon
    (144) epsilon -> .

    COMMA           reduce using rule 144 (epsilon -> .)
    CLOSEPAR        reduce using rule 144 (epsilon -> .)

    unblock                        shift and go to state 263
    epsilon                        shift and go to state 229

state 258

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY . estatutos CLOSECURLY condicion1
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 61
    estatutos                      shift and go to state 264
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 259

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO . OPENCURLY estatutos CLOSECURLY while_punto3

    OPENCURLY       shift and go to state 265


state 260

    (88) for -> FOR for1 IS exp for_punto1 TO exp . for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) for_punto2 -> . epsilon
    (144) epsilon -> .

    DO              reduce using rule 144 (epsilon -> .)

    for_punto2                     shift and go to state 266
    epsilon                        shift and go to state 267

state 261

    (89) for1 -> ID OPENBOX block exp CLOSEBOX unblock .

    IS              reduce using rule 89 (for1 -> ID OPENBOX block exp CLOSEBOX unblock .)


state 262

    (57) asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .

    OPENPAR         reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    ID              reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    PLUS            reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    MINUS           reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    INT             reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    FLOAT           reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)
    CHAR            reduce using rule 57 (asignacion1 -> ID OPENBOX block exp CLOSEBOX IS unblock .)


state 263

    (21) lista_ids1 -> ID OPENBOX block exp CLOSEBOX unblock .

    COMMA           reduce using rule 21 (lista_ids1 -> ID OPENBOX block exp CLOSEBOX unblock .)
    CLOSEPAR        reduce using rule 21 (lista_ids1 -> ID OPENBOX block exp CLOSEBOX unblock .)


state 264

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos . CLOSECURLY condicion1

    CLOSECURLY      shift and go to state 268


state 265

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY . estatutos CLOSECURLY while_punto3
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    expresion                      shift and go to state 61
    estatutos                      shift and go to state 269
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 266

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 . DO OPENCURLY estatutos CLOSECURLY for_punto3

    DO              shift and go to state 270


state 267

    (92) for_punto2 -> epsilon .

    DO              reduce using rule 92 (for_punto2 -> epsilon .)


state 268

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY . condicion1
    (78) condicion1 -> . ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (79) condicion1 -> . condicion_punto2 epsilon
    (81) condicion_punto2 -> . epsilon
    (144) epsilon -> .

    ELSE            shift and go to state 272
    RETURN          reduce using rule 144 (epsilon -> .)
    READ            reduce using rule 144 (epsilon -> .)
    WRITE           reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    OPENPAR         reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    CLOSECURLY      reduce using rule 144 (epsilon -> .)

    condicion1                     shift and go to state 271
    condicion_punto2               shift and go to state 273
    epsilon                        shift and go to state 274

state 269

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos . CLOSECURLY while_punto3

    CLOSECURLY      shift and go to state 275


state 270

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO . OPENCURLY estatutos CLOSECURLY for_punto3

    OPENCURLY       shift and go to state 276


state 271

    (77) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .

    RETURN          reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    READ            reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WRITE           reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    IF              reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WHILE           reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FOR             reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    ID              reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    OPENPAR         reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    PLUS            reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    MINUS           reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    INT             reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FLOAT           reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CHAR            reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CLOSECURLY      reduce using rule 77 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)


state 272

    (78) condicion1 -> ELSE . condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (82) condicion_punto3 -> . epsilon
    (144) epsilon -> .

    OPENCURLY       reduce using rule 144 (epsilon -> .)

    condicion_punto3               shift and go to state 277
    epsilon                        shift and go to state 278

state 273

    (79) condicion1 -> condicion_punto2 . epsilon
    (144) epsilon -> .

    RETURN          reduce using rule 144 (epsilon -> .)
    READ            reduce using rule 144 (epsilon -> .)
    WRITE           reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    OPENPAR         reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    CLOSECURLY      reduce using rule 144 (epsilon -> .)

    epsilon                        shift and go to state 279

state 274

    (81) condicion_punto2 -> epsilon .

    RETURN          reduce using rule 81 (condicion_punto2 -> epsilon .)
    READ            reduce using rule 81 (condicion_punto2 -> epsilon .)
    WRITE           reduce using rule 81 (condicion_punto2 -> epsilon .)
    IF              reduce using rule 81 (condicion_punto2 -> epsilon .)
    WHILE           reduce using rule 81 (condicion_punto2 -> epsilon .)
    FOR             reduce using rule 81 (condicion_punto2 -> epsilon .)
    ID              reduce using rule 81 (condicion_punto2 -> epsilon .)
    OPENPAR         reduce using rule 81 (condicion_punto2 -> epsilon .)
    PLUS            reduce using rule 81 (condicion_punto2 -> epsilon .)
    MINUS           reduce using rule 81 (condicion_punto2 -> epsilon .)
    INT             reduce using rule 81 (condicion_punto2 -> epsilon .)
    FLOAT           reduce using rule 81 (condicion_punto2 -> epsilon .)
    CHAR            reduce using rule 81 (condicion_punto2 -> epsilon .)
    CLOSECURLY      reduce using rule 81 (condicion_punto2 -> epsilon .)


state 275

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY . while_punto3
    (87) while_punto3 -> . epsilon
    (144) epsilon -> .

    RETURN          reduce using rule 144 (epsilon -> .)
    READ            reduce using rule 144 (epsilon -> .)
    WRITE           reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    OPENPAR         reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    CLOSECURLY      reduce using rule 144 (epsilon -> .)

    while_punto3                   shift and go to state 280
    epsilon                        shift and go to state 281

state 276

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY . estatutos CLOSECURLY for_punto3
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    exp                            shift and go to state 64
    estatutos                      shift and go to state 282
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 277

    (78) condicion1 -> ELSE condicion_punto3 . OPENCURLY estatutos CLOSECURLY condicion_punto4

    OPENCURLY       shift and go to state 283


state 278

    (82) condicion_punto3 -> epsilon .

    OPENCURLY       reduce using rule 82 (condicion_punto3 -> epsilon .)


state 279

    (79) condicion1 -> condicion_punto2 epsilon .

    RETURN          reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    READ            reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    WRITE           reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    IF              reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    WHILE           reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    FOR             reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    ID              reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    OPENPAR         reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    PLUS            reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    MINUS           reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    INT             reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    FLOAT           reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    CHAR            reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)
    CLOSECURLY      reduce using rule 79 (condicion1 -> condicion_punto2 epsilon .)


state 280

    (84) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .

    RETURN          reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    READ            reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WRITE           reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    IF              reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WHILE           reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FOR             reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    ID              reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    OPENPAR         reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    PLUS            reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    MINUS           reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    INT             reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FLOAT           reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CHAR            reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CLOSECURLY      reduce using rule 84 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)


state 281

    (87) while_punto3 -> epsilon .

    RETURN          reduce using rule 87 (while_punto3 -> epsilon .)
    READ            reduce using rule 87 (while_punto3 -> epsilon .)
    WRITE           reduce using rule 87 (while_punto3 -> epsilon .)
    IF              reduce using rule 87 (while_punto3 -> epsilon .)
    WHILE           reduce using rule 87 (while_punto3 -> epsilon .)
    FOR             reduce using rule 87 (while_punto3 -> epsilon .)
    ID              reduce using rule 87 (while_punto3 -> epsilon .)
    OPENPAR         reduce using rule 87 (while_punto3 -> epsilon .)
    PLUS            reduce using rule 87 (while_punto3 -> epsilon .)
    MINUS           reduce using rule 87 (while_punto3 -> epsilon .)
    INT             reduce using rule 87 (while_punto3 -> epsilon .)
    FLOAT           reduce using rule 87 (while_punto3 -> epsilon .)
    CHAR            reduce using rule 87 (while_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 87 (while_punto3 -> epsilon .)


state 282

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos . CLOSECURLY for_punto3

    CLOSECURLY      shift and go to state 284


state 283

    (78) condicion1 -> ELSE condicion_punto3 OPENCURLY . estatutos CLOSECURLY condicion_punto4
    (45) estatutos -> . asignacion estatutos1
    (46) estatutos -> . llamada estatutos1
    (47) estatutos -> . retorno estatutos1
    (48) estatutos -> . lectura estatutos1
    (49) estatutos -> . escritura estatutos1
    (50) estatutos -> . condicion estatutos1
    (51) estatutos -> . while estatutos1
    (52) estatutos -> . for estatutos1
    (53) estatutos -> . est_exp estatutos1
    (56) asignacion -> . asignacion1 expresion SEMICOLON
    (59) llamada -> . funcion SEMICOLON
    (68) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (69) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (70) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (77) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (84) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (94) est_exp -> . expresion SEMICOLON
    (57) asignacion1 -> . ID OPENBOX block exp CLOSEBOX IS unblock
    (58) asignacion1 -> . ID IS
    (60) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (95) expresion -> . and generate_expresion
    (96) expresion -> . and generate_expresion expresion1 expresion
    (65) funcion_punto1 -> . ID
    (99) and -> . equal generate_and
    (100) and -> . equal generate_and and1 and
    (103) equal -> . compare generate_equal
    (104) equal -> . compare generate_equal equal1 equal
    (108) compare -> . exp generate_compare
    (109) compare -> . exp generate_compare compare1 compare
    (115) exp -> . termino generate_exp
    (116) exp -> . termino generate_exp exp1 exp
    (120) termino -> . factor generate_termino
    (121) termino -> . factor generate_termino termino1 termino
    (126) factor -> . factor1
    (127) factor -> . OPENPAR block expresion CLOSEPAR unblock
    (128) factor -> . funcion
    (129) factor -> . factor2 varcte
    (130) factor1 -> . ID OPENBOX block exp CLOSEBOX unblock
    (131) factor1 -> . ID
    (132) factor2 -> . PLUS
    (133) factor2 -> . MINUS
    (134) factor2 -> . epsilon
    (144) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)

  ! ID              [ reduce using rule 144 (epsilon -> .) ]

    estatutos                      shift and go to state 285
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    factor1                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 108

state 284

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY . for_punto3
    (93) for_punto3 -> . epsilon
    (144) epsilon -> .

    RETURN          reduce using rule 144 (epsilon -> .)
    READ            reduce using rule 144 (epsilon -> .)
    WRITE           reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    OPENPAR         reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    CLOSECURLY      reduce using rule 144 (epsilon -> .)

    for_punto3                     shift and go to state 286
    epsilon                        shift and go to state 287

state 285

    (78) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos . CLOSECURLY condicion_punto4

    CLOSECURLY      shift and go to state 288


state 286

    (88) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .

    RETURN          reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    READ            reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WRITE           reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    IF              reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WHILE           reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FOR             reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    ID              reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    OPENPAR         reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    PLUS            reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    MINUS           reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    INT             reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FLOAT           reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CHAR            reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CLOSECURLY      reduce using rule 88 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)


state 287

    (93) for_punto3 -> epsilon .

    RETURN          reduce using rule 93 (for_punto3 -> epsilon .)
    READ            reduce using rule 93 (for_punto3 -> epsilon .)
    WRITE           reduce using rule 93 (for_punto3 -> epsilon .)
    IF              reduce using rule 93 (for_punto3 -> epsilon .)
    WHILE           reduce using rule 93 (for_punto3 -> epsilon .)
    FOR             reduce using rule 93 (for_punto3 -> epsilon .)
    ID              reduce using rule 93 (for_punto3 -> epsilon .)
    OPENPAR         reduce using rule 93 (for_punto3 -> epsilon .)
    PLUS            reduce using rule 93 (for_punto3 -> epsilon .)
    MINUS           reduce using rule 93 (for_punto3 -> epsilon .)
    INT             reduce using rule 93 (for_punto3 -> epsilon .)
    FLOAT           reduce using rule 93 (for_punto3 -> epsilon .)
    CHAR            reduce using rule 93 (for_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 93 (for_punto3 -> epsilon .)


state 288

    (78) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY . condicion_punto4
    (83) condicion_punto4 -> . epsilon
    (144) epsilon -> .

    RETURN          reduce using rule 144 (epsilon -> .)
    READ            reduce using rule 144 (epsilon -> .)
    WRITE           reduce using rule 144 (epsilon -> .)
    IF              reduce using rule 144 (epsilon -> .)
    WHILE           reduce using rule 144 (epsilon -> .)
    FOR             reduce using rule 144 (epsilon -> .)
    ID              reduce using rule 144 (epsilon -> .)
    OPENPAR         reduce using rule 144 (epsilon -> .)
    PLUS            reduce using rule 144 (epsilon -> .)
    MINUS           reduce using rule 144 (epsilon -> .)
    INT             reduce using rule 144 (epsilon -> .)
    FLOAT           reduce using rule 144 (epsilon -> .)
    CHAR            reduce using rule 144 (epsilon -> .)
    CLOSECURLY      reduce using rule 144 (epsilon -> .)

    condicion_punto4               shift and go to state 289
    epsilon                        shift and go to state 290

state 289

    (78) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .

    RETURN          reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    READ            reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WRITE           reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    IF              reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WHILE           reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FOR             reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    ID              reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    OPENPAR         reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    PLUS            reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    MINUS           reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    INT             reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FLOAT           reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CHAR            reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CLOSECURLY      reduce using rule 78 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)


state 290

    (83) condicion_punto4 -> epsilon .

    RETURN          reduce using rule 83 (condicion_punto4 -> epsilon .)
    READ            reduce using rule 83 (condicion_punto4 -> epsilon .)
    WRITE           reduce using rule 83 (condicion_punto4 -> epsilon .)
    IF              reduce using rule 83 (condicion_punto4 -> epsilon .)
    WHILE           reduce using rule 83 (condicion_punto4 -> epsilon .)
    FOR             reduce using rule 83 (condicion_punto4 -> epsilon .)
    ID              reduce using rule 83 (condicion_punto4 -> epsilon .)
    OPENPAR         reduce using rule 83 (condicion_punto4 -> epsilon .)
    PLUS            reduce using rule 83 (condicion_punto4 -> epsilon .)
    MINUS           reduce using rule 83 (condicion_punto4 -> epsilon .)
    INT             reduce using rule 83 (condicion_punto4 -> epsilon .)
    FLOAT           reduce using rule 83 (condicion_punto4 -> epsilon .)
    CHAR            reduce using rule 83 (condicion_punto4 -> epsilon .)
    CLOSECURLY      reduce using rule 83 (condicion_punto4 -> epsilon .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 53 resolved as shift
WARNING: shift/reduce conflict for READ in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 55 resolved as shift
WARNING: shift/reduce conflict for READ in state 55 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 56 resolved as shift
WARNING: shift/reduce conflict for READ in state 56 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 57 resolved as shift
WARNING: shift/reduce conflict for READ in state 57 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 58 resolved as shift
WARNING: shift/reduce conflict for READ in state 58 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 59 resolved as shift
WARNING: shift/reduce conflict for READ in state 59 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 170 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 177 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 181 resolved as shift
WARNING: shift/reduce conflict for ID in state 184 resolved as shift
WARNING: shift/reduce conflict for ID in state 187 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 234 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 252 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 265 resolved as shift
WARNING: shift/reduce conflict for ID in state 276 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (programa2 -> epsilon)
WARNING: rejected rule (funciones -> epsilon) in state 9
WARNING: reduce/reduce conflict in state 96 resolved using rule (estatutos1 -> epsilon)
WARNING: rejected rule (factor2 -> epsilon) in state 96
