Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
Rule 2     programa1 -> ID SEMICOLON vars
Rule 3     programa1 -> ID SEMICOLON
Rule 4     programa2 -> funciones
Rule 5     programa2 -> epsilon
Rule 6     programa3 -> estatutos
Rule 7     programa3 -> epsilon
Rule 8     main -> MAIN
Rule 9     vars -> VARS vars1
Rule 10    vars1 -> tipo COLON vars2
Rule 11    vars2 -> ID vars3
Rule 12    vars3 -> OPENBOX exp CLOSEBOX vars4
Rule 13    vars3 -> vars4
Rule 14    vars4 -> SEMICOLON vars5
Rule 15    vars4 -> COMMA vars2
Rule 16    vars5 -> vars1
Rule 17    vars5 -> epsilon
Rule 18    lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1
Rule 19    lista_ids -> ID lista_ids1
Rule 20    lista_ids1 -> COMMA lista_ids
Rule 21    lista_ids1 -> epsilon
Rule 22    tipo -> TYPEFLOAT
Rule 23    tipo -> TYPEINT
Rule 24    tipo -> TYPECHAR
Rule 25    tipo_void -> TYPEVOID
Rule 26    funciones -> FUNCTION funciones1
Rule 27    funciones -> epsilon
Rule 28    funciones1 -> tipo funciones2 funciones3
Rule 29    funciones1 -> tipo_void funciones2 funciones3
Rule 30    funciones2 -> ID OPENPAR
Rule 31    funciones3 -> parameters funciones4
Rule 32    funciones3 -> funciones4
Rule 33    funciones4 -> CLOSEPAR funciones5
Rule 34    funciones5 -> vars store_function OPENCURLY funciones6
Rule 35    funciones5 -> store_function OPENCURLY funciones6
Rule 36    funciones6 -> estatutos funciones6
Rule 37    funciones6 -> CLOSECURLY funciones
Rule 38    store_function -> epsilon
Rule 39    parameters -> tipo ID parameters1
Rule 40    parameters1 -> COMMA parameters
Rule 41    parameters1 -> epsilon
Rule 42    estatutos -> asignacion estatutos1
Rule 43    estatutos -> llamada estatutos1
Rule 44    estatutos -> retorno estatutos1
Rule 45    estatutos -> lectura estatutos1
Rule 46    estatutos -> escritura estatutos1
Rule 47    estatutos -> condicion estatutos1
Rule 48    estatutos -> while estatutos1
Rule 49    estatutos -> for estatutos1
Rule 50    estatutos -> est_exp estatutos1
Rule 51    estatutos1 -> estatutos
Rule 52    estatutos1 -> epsilon
Rule 53    asignacion -> asignacion1 expresion SEMICOLON
Rule 54    asignacion1 -> ID OPENBOX exp CLOSEBOX IS
Rule 55    asignacion1 -> ID IS
Rule 56    llamada -> funcion SEMICOLON
Rule 57    funcion -> ID OPENPAR funcion1
Rule 58    funcion1 -> exp funcion2
Rule 59    funcion2 -> COMMA funcion1
Rule 60    funcion2 -> CLOSEPAR
Rule 61    retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON
Rule 62    lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON
Rule 63    escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
Rule 64    escritura1 -> escritura_string escritura2
Rule 65    escritura1 -> escritura_expresion escritura2
Rule 66    escritura2 -> COMMA escritura1
Rule 67    escritura2 -> epsilon
Rule 68    escritura_string -> STRING
Rule 69    escritura_expresion -> expresion
Rule 70    condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
Rule 71    condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
Rule 72    condicion1 -> condicion_punto2 epsilon
Rule 73    condicion_punto1 -> epsilon
Rule 74    condicion_punto2 -> epsilon
Rule 75    condicion_punto3 -> epsilon
Rule 76    condicion_punto4 -> epsilon
Rule 77    while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
Rule 78    while_punto1 -> epsilon
Rule 79    while_punto2 -> epsilon
Rule 80    while_punto3 -> epsilon
Rule 81    for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
Rule 82    for1 -> ID OPENBOX exp CLOSEBOX
Rule 83    for1 -> ID
Rule 84    for_punto1 -> epsilon
Rule 85    for_punto2 -> epsilon
Rule 86    for_punto3 -> epsilon
Rule 87    est_exp -> expresion SEMICOLON
Rule 88    expresion -> and generate_expresion
Rule 89    expresion -> and generate_expresion expresion1 expresion
Rule 90    expresion1 -> OR
Rule 91    generate_expresion -> epsilon
Rule 92    and -> equal generate_and
Rule 93    and -> equal generate_and and1 and
Rule 94    and1 -> AND
Rule 95    generate_and -> epsilon
Rule 96    equal -> compare generate_equal
Rule 97    equal -> compare generate_equal equal1 equal
Rule 98    equal1 -> EQ
Rule 99    equal1 -> NE
Rule 100   generate_equal -> epsilon
Rule 101   compare -> exp generate_compare
Rule 102   compare -> exp generate_compare compare1 compare
Rule 103   compare1 -> LT
Rule 104   compare1 -> LE
Rule 105   compare1 -> GT
Rule 106   compare1 -> GE
Rule 107   generate_compare -> epsilon
Rule 108   exp -> termino generate_exp
Rule 109   exp -> termino generate_exp exp1 exp
Rule 110   exp1 -> PLUS
Rule 111   exp1 -> MINUS
Rule 112   generate_exp -> epsilon
Rule 113   termino -> factor generate_termino
Rule 114   termino -> factor generate_termino termino1 termino
Rule 115   termino1 -> MULTIPLY
Rule 116   termino1 -> DIVIDE
Rule 117   termino1 -> MODULO
Rule 118   generate_termino -> epsilon
Rule 119   factor -> ID factor1
Rule 120   factor -> openpar expresion closepar
Rule 121   factor -> funcion
Rule 122   factor -> factor2 varcte
Rule 123   factor1 -> OPENBOX exp CLOSEBOX
Rule 124   factor1 -> epsilon
Rule 125   factor2 -> PLUS
Rule 126   factor2 -> MINUS
Rule 127   factor2 -> epsilon
Rule 128   openpar -> OPENPAR
Rule 129   closepar -> CLOSEPAR
Rule 130   varcte -> ID
Rule 131   varcte -> int
Rule 132   varcte -> float
Rule 133   varcte -> char
Rule 134   int -> INT
Rule 135   float -> FLOAT
Rule 136   char -> CHAR
Rule 137   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 94
CHAR                 : 136
CLOSEBOX             : 12 18 54 82 123
CLOSECURLY           : 1 37 70 71 77 81
CLOSEPAR             : 1 33 60 61 62 63 70 77 129
COLON                : 10
COMMA                : 15 20 40 59 66
DIVIDE               : 116
DO                   : 77 81
ELSE                 : 71
EQ                   : 98
FLOAT                : 135
FOR                  : 81
FUNCTION             : 26
GE                   : 106
GT                   : 105
ID                   : 2 3 11 18 19 30 39 54 55 57 82 83 119 130
IF                   : 70
INT                  : 134
IS                   : 54 55 81
LE                   : 104
LT                   : 103
MAIN                 : 8
MINUS                : 111 126
MODULO               : 117
MULTIPLY             : 115
NE                   : 99
OPENBOX              : 12 18 54 82 123
OPENCURLY            : 1 34 35 70 71 77 81
OPENPAR              : 1 30 57 61 62 63 70 77 128
OR                   : 90
PLUS                 : 110 125
PROGRAM              : 1
READ                 : 62
RETURN               : 61
SEMICOLON            : 2 3 14 53 56 61 62 63 87
STRING               : 68
THEN                 : 70
TO                   : 81
TYPECHAR             : 24
TYPEFLOAT            : 22
TYPEINT              : 23
TYPEVOID             : 25
VARS                 : 9
WHILE                : 77
WRITE                : 63
error                : 

Nonterminals, with rules where they appear

and                  : 88 89 93
and1                 : 93
asignacion           : 42
asignacion1          : 53
char                 : 133
closepar             : 120
compare              : 96 97 102
compare1             : 102
condicion            : 47
condicion1           : 70
condicion_punto1     : 70
condicion_punto2     : 72
condicion_punto3     : 71
condicion_punto4     : 71
epsilon              : 5 7 17 21 27 38 41 52 67 72 73 74 75 76 78 79 80 84 85 86 91 95 100 107 112 118 124 127
equal                : 92 93 97
equal1               : 97
escritura            : 46
escritura1           : 63 66
escritura2           : 64 65
escritura_expresion  : 65
escritura_string     : 64
est_exp              : 50
estatutos            : 6 36 51 70 71 77 81
estatutos1           : 42 43 44 45 46 47 48 49 50
exp                  : 12 18 54 58 61 81 81 82 101 102 109 123
exp1                 : 109
expresion            : 53 69 70 77 87 89 120
expresion1           : 89
factor               : 113 114
factor1              : 119
factor2              : 122
float                : 132
for                  : 49
for1                 : 81
for_punto1           : 81
for_punto2           : 81
for_punto3           : 81
funcion              : 56 121
funcion1             : 57 59
funcion2             : 58
funciones            : 4 37
funciones1           : 26
funciones2           : 28 29
funciones3           : 28 29
funciones4           : 31 32
funciones5           : 33
funciones6           : 34 35 36
generate_and         : 92 93
generate_compare     : 101 102
generate_equal       : 96 97
generate_exp         : 108 109
generate_expresion   : 88 89
generate_termino     : 113 114
int                  : 131
lectura              : 45
lista_ids            : 20 62
lista_ids1           : 18 19
llamada              : 43
main                 : 1
openpar              : 120
parameters           : 31 40
parameters1          : 39
programa             : 0
programa1            : 1
programa2            : 1
programa3            : 1
retorno              : 44
store_function       : 34 35
termino              : 108 109 114
termino1             : 114
tipo                 : 10 28 39
tipo_void            : 29
varcte               : 122
vars                 : 2 34
vars1                : 9 16
vars2                : 10 15
vars3                : 11
vars4                : 12 13
vars5                : 14
while                : 48
while_punto1         : 77
while_punto2         : 77
while_punto3         : 77

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (2) programa1 -> . ID SEMICOLON vars
    (3) programa1 -> . ID SEMICOLON

    ID              shift and go to state 4

    programa1                      shift and go to state 3

state 3

    (1) programa -> PROGRAM programa1 . programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (4) programa2 -> . funciones
    (5) programa2 -> . epsilon
    (26) funciones -> . FUNCTION funciones1
    (27) funciones -> . epsilon
    (137) epsilon -> .

    FUNCTION        shift and go to state 8
    MAIN            reduce using rule 137 (epsilon -> .)

    programa2                      shift and go to state 5
    funciones                      shift and go to state 6
    epsilon                        shift and go to state 7

state 4

    (2) programa1 -> ID . SEMICOLON vars
    (3) programa1 -> ID . SEMICOLON

    SEMICOLON       shift and go to state 9


state 5

    (1) programa -> PROGRAM programa1 programa2 . main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (8) main -> . MAIN

    MAIN            shift and go to state 11

    main                           shift and go to state 10

state 6

    (4) programa2 -> funciones .

    MAIN            reduce using rule 4 (programa2 -> funciones .)


state 7

    (5) programa2 -> epsilon .
    (27) funciones -> epsilon .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (programa2 -> epsilon .)
    MAIN            reduce using rule 5 (programa2 -> epsilon .)

  ! MAIN            [ reduce using rule 27 (funciones -> epsilon .) ]


state 8

    (26) funciones -> FUNCTION . funciones1
    (28) funciones1 -> . tipo funciones2 funciones3
    (29) funciones1 -> . tipo_void funciones2 funciones3
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR
    (25) tipo_void -> . TYPEVOID

    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17
    TYPEVOID        shift and go to state 18

    funciones1                     shift and go to state 12
    tipo                           shift and go to state 13
    tipo_void                      shift and go to state 14

state 9

    (2) programa1 -> ID SEMICOLON . vars
    (3) programa1 -> ID SEMICOLON .
    (9) vars -> . VARS vars1

    FUNCTION        reduce using rule 3 (programa1 -> ID SEMICOLON .)
    MAIN            reduce using rule 3 (programa1 -> ID SEMICOLON .)
    VARS            shift and go to state 20

    vars                           shift and go to state 19

state 10

    (1) programa -> PROGRAM programa1 programa2 main . OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    OPENPAR         shift and go to state 21


state 11

    (8) main -> MAIN .

    OPENPAR         reduce using rule 8 (main -> MAIN .)


state 12

    (26) funciones -> FUNCTION funciones1 .

    MAIN            reduce using rule 26 (funciones -> FUNCTION funciones1 .)


state 13

    (28) funciones1 -> tipo . funciones2 funciones3
    (30) funciones2 -> . ID OPENPAR

    ID              shift and go to state 23

    funciones2                     shift and go to state 22

state 14

    (29) funciones1 -> tipo_void . funciones2 funciones3
    (30) funciones2 -> . ID OPENPAR

    ID              shift and go to state 23

    funciones2                     shift and go to state 24

state 15

    (22) tipo -> TYPEFLOAT .

    ID              reduce using rule 22 (tipo -> TYPEFLOAT .)
    COLON           reduce using rule 22 (tipo -> TYPEFLOAT .)


state 16

    (23) tipo -> TYPEINT .

    ID              reduce using rule 23 (tipo -> TYPEINT .)
    COLON           reduce using rule 23 (tipo -> TYPEINT .)


state 17

    (24) tipo -> TYPECHAR .

    ID              reduce using rule 24 (tipo -> TYPECHAR .)
    COLON           reduce using rule 24 (tipo -> TYPECHAR .)


state 18

    (25) tipo_void -> TYPEVOID .

    ID              reduce using rule 25 (tipo_void -> TYPEVOID .)


state 19

    (2) programa1 -> ID SEMICOLON vars .

    FUNCTION        reduce using rule 2 (programa1 -> ID SEMICOLON vars .)
    MAIN            reduce using rule 2 (programa1 -> ID SEMICOLON vars .)


state 20

    (9) vars -> VARS . vars1
    (10) vars1 -> . tipo COLON vars2
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17

    vars1                          shift and go to state 25
    tipo                           shift and go to state 26

state 21

    (1) programa -> PROGRAM programa1 programa2 main OPENPAR . CLOSEPAR OPENCURLY programa3 CLOSECURLY

    CLOSEPAR        shift and go to state 27


state 22

    (28) funciones1 -> tipo funciones2 . funciones3
    (31) funciones3 -> . parameters funciones4
    (32) funciones3 -> . funciones4
    (39) parameters -> . tipo ID parameters1
    (33) funciones4 -> . CLOSEPAR funciones5
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 32
    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17

    tipo                           shift and go to state 28
    funciones3                     shift and go to state 29
    parameters                     shift and go to state 30
    funciones4                     shift and go to state 31

state 23

    (30) funciones2 -> ID . OPENPAR

    OPENPAR         shift and go to state 33


state 24

    (29) funciones1 -> tipo_void funciones2 . funciones3
    (31) funciones3 -> . parameters funciones4
    (32) funciones3 -> . funciones4
    (39) parameters -> . tipo ID parameters1
    (33) funciones4 -> . CLOSEPAR funciones5
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 32
    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17

    funciones3                     shift and go to state 34
    parameters                     shift and go to state 30
    funciones4                     shift and go to state 31
    tipo                           shift and go to state 28

state 25

    (9) vars -> VARS vars1 .

    FUNCTION        reduce using rule 9 (vars -> VARS vars1 .)
    MAIN            reduce using rule 9 (vars -> VARS vars1 .)
    OPENCURLY       reduce using rule 9 (vars -> VARS vars1 .)


state 26

    (10) vars1 -> tipo . COLON vars2

    COLON           shift and go to state 35


state 27

    (1) programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR . OPENCURLY programa3 CLOSECURLY

    OPENCURLY       shift and go to state 36


state 28

    (39) parameters -> tipo . ID parameters1

    ID              shift and go to state 37


state 29

    (28) funciones1 -> tipo funciones2 funciones3 .

    MAIN            reduce using rule 28 (funciones1 -> tipo funciones2 funciones3 .)


state 30

    (31) funciones3 -> parameters . funciones4
    (33) funciones4 -> . CLOSEPAR funciones5

    CLOSEPAR        shift and go to state 32

    funciones4                     shift and go to state 38

state 31

    (32) funciones3 -> funciones4 .

    MAIN            reduce using rule 32 (funciones3 -> funciones4 .)


state 32

    (33) funciones4 -> CLOSEPAR . funciones5
    (34) funciones5 -> . vars store_function OPENCURLY funciones6
    (35) funciones5 -> . store_function OPENCURLY funciones6
    (9) vars -> . VARS vars1
    (38) store_function -> . epsilon
    (137) epsilon -> .

    VARS            shift and go to state 20
    OPENCURLY       reduce using rule 137 (epsilon -> .)

    funciones5                     shift and go to state 39
    vars                           shift and go to state 40
    store_function                 shift and go to state 41
    epsilon                        shift and go to state 42

state 33

    (30) funciones2 -> ID OPENPAR .

    CLOSEPAR        reduce using rule 30 (funciones2 -> ID OPENPAR .)
    TYPEFLOAT       reduce using rule 30 (funciones2 -> ID OPENPAR .)
    TYPEINT         reduce using rule 30 (funciones2 -> ID OPENPAR .)
    TYPECHAR        reduce using rule 30 (funciones2 -> ID OPENPAR .)


state 34

    (29) funciones1 -> tipo_void funciones2 funciones3 .

    MAIN            reduce using rule 29 (funciones1 -> tipo_void funciones2 funciones3 .)


state 35

    (10) vars1 -> tipo COLON . vars2
    (11) vars2 -> . ID vars3

    ID              shift and go to state 44

    vars2                          shift and go to state 43

state 36

    (1) programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY . programa3 CLOSECURLY
    (6) programa3 -> . estatutos
    (7) programa3 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    programa3                      shift and go to state 46
    estatutos                      shift and go to state 47
    epsilon                        shift and go to state 48
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 37

    (39) parameters -> tipo ID . parameters1
    (40) parameters1 -> . COMMA parameters
    (41) parameters1 -> . epsilon
    (137) epsilon -> .

    COMMA           shift and go to state 79
    CLOSEPAR        reduce using rule 137 (epsilon -> .)

    parameters1                    shift and go to state 78
    epsilon                        shift and go to state 80

state 38

    (31) funciones3 -> parameters funciones4 .

    MAIN            reduce using rule 31 (funciones3 -> parameters funciones4 .)


state 39

    (33) funciones4 -> CLOSEPAR funciones5 .

    MAIN            reduce using rule 33 (funciones4 -> CLOSEPAR funciones5 .)


state 40

    (34) funciones5 -> vars . store_function OPENCURLY funciones6
    (38) store_function -> . epsilon
    (137) epsilon -> .

    OPENCURLY       reduce using rule 137 (epsilon -> .)

    store_function                 shift and go to state 81
    epsilon                        shift and go to state 42

state 41

    (35) funciones5 -> store_function . OPENCURLY funciones6

    OPENCURLY       shift and go to state 82


state 42

    (38) store_function -> epsilon .

    OPENCURLY       reduce using rule 38 (store_function -> epsilon .)


state 43

    (10) vars1 -> tipo COLON vars2 .

    FUNCTION        reduce using rule 10 (vars1 -> tipo COLON vars2 .)
    MAIN            reduce using rule 10 (vars1 -> tipo COLON vars2 .)
    OPENCURLY       reduce using rule 10 (vars1 -> tipo COLON vars2 .)


state 44

    (11) vars2 -> ID . vars3
    (12) vars3 -> . OPENBOX exp CLOSEBOX vars4
    (13) vars3 -> . vars4
    (14) vars4 -> . SEMICOLON vars5
    (15) vars4 -> . COMMA vars2

    OPENBOX         shift and go to state 84
    SEMICOLON       shift and go to state 86
    COMMA           shift and go to state 87

    vars3                          shift and go to state 83
    vars4                          shift and go to state 85

state 45

    (128) openpar -> OPENPAR .

    ID              reduce using rule 128 (openpar -> OPENPAR .)
    OPENPAR         reduce using rule 128 (openpar -> OPENPAR .)
    PLUS            reduce using rule 128 (openpar -> OPENPAR .)
    MINUS           reduce using rule 128 (openpar -> OPENPAR .)
    INT             reduce using rule 128 (openpar -> OPENPAR .)
    FLOAT           reduce using rule 128 (openpar -> OPENPAR .)
    CHAR            reduce using rule 128 (openpar -> OPENPAR .)


state 46

    (1) programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 . CLOSECURLY

    CLOSECURLY      shift and go to state 88


state 47

    (6) programa3 -> estatutos .

    CLOSECURLY      reduce using rule 6 (programa3 -> estatutos .)


state 48

    (7) programa3 -> epsilon .
    (127) factor2 -> epsilon .

    CLOSECURLY      reduce using rule 7 (programa3 -> epsilon .)
    ID              reduce using rule 127 (factor2 -> epsilon .)
    INT             reduce using rule 127 (factor2 -> epsilon .)
    FLOAT           reduce using rule 127 (factor2 -> epsilon .)
    CHAR            reduce using rule 127 (factor2 -> epsilon .)


state 49

    (42) estatutos -> asignacion . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    asignacion                     shift and go to state 49
    estatutos1                     shift and go to state 89
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 50

    (43) estatutos -> llamada . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    llamada                        shift and go to state 50
    estatutos1                     shift and go to state 92
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 51

    (44) estatutos -> retorno . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    retorno                        shift and go to state 51
    estatutos1                     shift and go to state 93
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 52

    (45) estatutos -> lectura . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    lectura                        shift and go to state 52
    estatutos1                     shift and go to state 94
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 53

    (46) estatutos -> escritura . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    escritura                      shift and go to state 53
    estatutos1                     shift and go to state 95
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 54

    (47) estatutos -> condicion . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    condicion                      shift and go to state 54
    estatutos1                     shift and go to state 96
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 55

    (48) estatutos -> while . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    while                          shift and go to state 55
    estatutos1                     shift and go to state 97
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 56

    (49) estatutos -> for . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    for                            shift and go to state 56
    estatutos1                     shift and go to state 98
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 57

    (50) estatutos -> est_exp . estatutos1
    (51) estatutos1 -> . estatutos
    (52) estatutos1 -> . epsilon
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (137) epsilon -> .
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77

  ! RETURN          [ reduce using rule 137 (epsilon -> .) ]
  ! READ            [ reduce using rule 137 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 137 (epsilon -> .) ]
  ! IF              [ reduce using rule 137 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 137 (epsilon -> .) ]
  ! FOR             [ reduce using rule 137 (epsilon -> .) ]
  ! ID              [ reduce using rule 137 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 137 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 137 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 137 (epsilon -> .) ]

    est_exp                        shift and go to state 57
    estatutos1                     shift and go to state 99
    estatutos                      shift and go to state 90
    epsilon                        shift and go to state 91
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75

state 58

    (53) asignacion -> asignacion1 . expresion SEMICOLON
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    expresion                      shift and go to state 100
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 59

    (87) est_exp -> expresion . SEMICOLON

    SEMICOLON       shift and go to state 104


state 60

    (56) llamada -> funcion . SEMICOLON
    (121) factor -> funcion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 105
    MULTIPLY        reduce using rule 121 (factor -> funcion .)
    DIVIDE          reduce using rule 121 (factor -> funcion .)
    MODULO          reduce using rule 121 (factor -> funcion .)
    PLUS            reduce using rule 121 (factor -> funcion .)
    MINUS           reduce using rule 121 (factor -> funcion .)
    LT              reduce using rule 121 (factor -> funcion .)
    LE              reduce using rule 121 (factor -> funcion .)
    GT              reduce using rule 121 (factor -> funcion .)
    GE              reduce using rule 121 (factor -> funcion .)
    EQ              reduce using rule 121 (factor -> funcion .)
    NE              reduce using rule 121 (factor -> funcion .)
    AND             reduce using rule 121 (factor -> funcion .)
    OR              reduce using rule 121 (factor -> funcion .)

  ! SEMICOLON       [ reduce using rule 121 (factor -> funcion .) ]


state 61

    (61) retorno -> RETURN . OPENPAR exp CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 106


state 62

    (101) compare -> exp . generate_compare
    (102) compare -> exp . generate_compare compare1 compare
    (107) generate_compare -> . epsilon
    (137) epsilon -> .

    LT              reduce using rule 137 (epsilon -> .)
    LE              reduce using rule 137 (epsilon -> .)
    GT              reduce using rule 137 (epsilon -> .)
    GE              reduce using rule 137 (epsilon -> .)
    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)

    generate_compare               shift and go to state 107
    epsilon                        shift and go to state 108

state 63

    (62) lectura -> READ . OPENPAR lista_ids CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 109


state 64

    (63) escritura -> WRITE . OPENPAR escritura1 CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 110


state 65

    (70) condicion -> IF . OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    OPENPAR         shift and go to state 111


state 66

    (77) while -> WHILE . while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (78) while_punto1 -> . epsilon
    (137) epsilon -> .

    OPENPAR         reduce using rule 137 (epsilon -> .)

    while_punto1                   shift and go to state 112
    epsilon                        shift and go to state 113

state 67

    (81) for -> FOR . for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (82) for1 -> . ID OPENBOX exp CLOSEBOX
    (83) for1 -> . ID

    ID              shift and go to state 115

    for1                           shift and go to state 114

state 68

    (54) asignacion1 -> ID . OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> ID . IS
    (57) funcion -> ID . OPENPAR funcion1
    (119) factor -> ID . factor1
    (123) factor1 -> . OPENBOX exp CLOSEBOX
    (124) factor1 -> . epsilon
    (137) epsilon -> .

    OPENBOX         shift and go to state 116
    IS              shift and go to state 117
    OPENPAR         shift and go to state 118
    MULTIPLY        reduce using rule 137 (epsilon -> .)
    DIVIDE          reduce using rule 137 (epsilon -> .)
    MODULO          reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    LT              reduce using rule 137 (epsilon -> .)
    LE              reduce using rule 137 (epsilon -> .)
    GT              reduce using rule 137 (epsilon -> .)
    GE              reduce using rule 137 (epsilon -> .)
    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)

    factor1                        shift and go to state 119
    epsilon                        shift and go to state 120

state 69

    (88) expresion -> and . generate_expresion
    (89) expresion -> and . generate_expresion expresion1 expresion
    (91) generate_expresion -> . epsilon
    (137) epsilon -> .

    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)

    generate_expresion             shift and go to state 121
    epsilon                        shift and go to state 122

state 70

    (92) and -> equal . generate_and
    (93) and -> equal . generate_and and1 and
    (95) generate_and -> . epsilon
    (137) epsilon -> .

    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)

    generate_and                   shift and go to state 123
    epsilon                        shift and go to state 124

state 71

    (96) equal -> compare . generate_equal
    (97) equal -> compare . generate_equal equal1 equal
    (100) generate_equal -> . epsilon
    (137) epsilon -> .

    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)

    generate_equal                 shift and go to state 125
    epsilon                        shift and go to state 126

state 72

    (108) exp -> termino . generate_exp
    (109) exp -> termino . generate_exp exp1 exp
    (112) generate_exp -> . epsilon
    (137) epsilon -> .

    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    LT              reduce using rule 137 (epsilon -> .)
    LE              reduce using rule 137 (epsilon -> .)
    GT              reduce using rule 137 (epsilon -> .)
    GE              reduce using rule 137 (epsilon -> .)
    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    CLOSEBOX        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)
    TO              reduce using rule 137 (epsilon -> .)
    DO              reduce using rule 137 (epsilon -> .)

    generate_exp                   shift and go to state 127
    epsilon                        shift and go to state 128

state 73

    (113) termino -> factor . generate_termino
    (114) termino -> factor . generate_termino termino1 termino
    (118) generate_termino -> . epsilon
    (137) epsilon -> .

    MULTIPLY        reduce using rule 137 (epsilon -> .)
    DIVIDE          reduce using rule 137 (epsilon -> .)
    MODULO          reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    LT              reduce using rule 137 (epsilon -> .)
    LE              reduce using rule 137 (epsilon -> .)
    GT              reduce using rule 137 (epsilon -> .)
    GE              reduce using rule 137 (epsilon -> .)
    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    CLOSEBOX        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)
    TO              reduce using rule 137 (epsilon -> .)
    DO              reduce using rule 137 (epsilon -> .)

    generate_termino               shift and go to state 129
    epsilon                        shift and go to state 130

state 74

    (120) factor -> openpar . expresion closepar
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    openpar                        shift and go to state 74
    expresion                      shift and go to state 131
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 75

    (122) factor -> factor2 . varcte
    (130) varcte -> . ID
    (131) varcte -> . int
    (132) varcte -> . float
    (133) varcte -> . char
    (134) int -> . INT
    (135) float -> . FLOAT
    (136) char -> . CHAR

    ID              shift and go to state 133
    INT             shift and go to state 137
    FLOAT           shift and go to state 138
    CHAR            shift and go to state 139

    varcte                         shift and go to state 132
    int                            shift and go to state 134
    float                          shift and go to state 135
    char                           shift and go to state 136

state 76

    (125) factor2 -> PLUS .

    ID              reduce using rule 125 (factor2 -> PLUS .)
    INT             reduce using rule 125 (factor2 -> PLUS .)
    FLOAT           reduce using rule 125 (factor2 -> PLUS .)
    CHAR            reduce using rule 125 (factor2 -> PLUS .)


state 77

    (126) factor2 -> MINUS .

    ID              reduce using rule 126 (factor2 -> MINUS .)
    INT             reduce using rule 126 (factor2 -> MINUS .)
    FLOAT           reduce using rule 126 (factor2 -> MINUS .)
    CHAR            reduce using rule 126 (factor2 -> MINUS .)


state 78

    (39) parameters -> tipo ID parameters1 .

    CLOSEPAR        reduce using rule 39 (parameters -> tipo ID parameters1 .)


state 79

    (40) parameters1 -> COMMA . parameters
    (39) parameters -> . tipo ID parameters1
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17

    parameters                     shift and go to state 140
    tipo                           shift and go to state 28

state 80

    (41) parameters1 -> epsilon .

    CLOSEPAR        reduce using rule 41 (parameters1 -> epsilon .)


state 81

    (34) funciones5 -> vars store_function . OPENCURLY funciones6

    OPENCURLY       shift and go to state 141


state 82

    (35) funciones5 -> store_function OPENCURLY . funciones6
    (36) funciones6 -> . estatutos funciones6
    (37) funciones6 -> . CLOSECURLY funciones
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 144
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    funciones6                     shift and go to state 142
    estatutos                      shift and go to state 143
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 83

    (11) vars2 -> ID vars3 .

    FUNCTION        reduce using rule 11 (vars2 -> ID vars3 .)
    MAIN            reduce using rule 11 (vars2 -> ID vars3 .)
    OPENCURLY       reduce using rule 11 (vars2 -> ID vars3 .)


state 84

    (12) vars3 -> OPENBOX . exp CLOSEBOX vars4
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 145
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 85

    (13) vars3 -> vars4 .

    FUNCTION        reduce using rule 13 (vars3 -> vars4 .)
    MAIN            reduce using rule 13 (vars3 -> vars4 .)
    OPENCURLY       reduce using rule 13 (vars3 -> vars4 .)


state 86

    (14) vars4 -> SEMICOLON . vars5
    (16) vars5 -> . vars1
    (17) vars5 -> . epsilon
    (10) vars1 -> . tipo COLON vars2
    (137) epsilon -> .
    (22) tipo -> . TYPEFLOAT
    (23) tipo -> . TYPEINT
    (24) tipo -> . TYPECHAR

    FUNCTION        reduce using rule 137 (epsilon -> .)
    MAIN            reduce using rule 137 (epsilon -> .)
    OPENCURLY       reduce using rule 137 (epsilon -> .)
    TYPEFLOAT       shift and go to state 15
    TYPEINT         shift and go to state 16
    TYPECHAR        shift and go to state 17

    vars5                          shift and go to state 146
    vars1                          shift and go to state 147
    epsilon                        shift and go to state 148
    tipo                           shift and go to state 26

state 87

    (15) vars4 -> COMMA . vars2
    (11) vars2 -> . ID vars3

    ID              shift and go to state 44

    vars2                          shift and go to state 149

state 88

    (1) programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .

    $end            reduce using rule 1 (programa -> PROGRAM programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .)


state 89

    (42) estatutos -> asignacion estatutos1 .

    CLOSECURLY      reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    RETURN          reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    READ            reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    WRITE           reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    IF              reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    WHILE           reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    FOR             reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    ID              reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    OPENPAR         reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    PLUS            reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    MINUS           reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    INT             reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    FLOAT           reduce using rule 42 (estatutos -> asignacion estatutos1 .)
    CHAR            reduce using rule 42 (estatutos -> asignacion estatutos1 .)


state 90

    (51) estatutos1 -> estatutos .

    CLOSECURLY      reduce using rule 51 (estatutos1 -> estatutos .)
    RETURN          reduce using rule 51 (estatutos1 -> estatutos .)
    READ            reduce using rule 51 (estatutos1 -> estatutos .)
    WRITE           reduce using rule 51 (estatutos1 -> estatutos .)
    IF              reduce using rule 51 (estatutos1 -> estatutos .)
    WHILE           reduce using rule 51 (estatutos1 -> estatutos .)
    FOR             reduce using rule 51 (estatutos1 -> estatutos .)
    ID              reduce using rule 51 (estatutos1 -> estatutos .)
    OPENPAR         reduce using rule 51 (estatutos1 -> estatutos .)
    PLUS            reduce using rule 51 (estatutos1 -> estatutos .)
    MINUS           reduce using rule 51 (estatutos1 -> estatutos .)
    INT             reduce using rule 51 (estatutos1 -> estatutos .)
    FLOAT           reduce using rule 51 (estatutos1 -> estatutos .)
    CHAR            reduce using rule 51 (estatutos1 -> estatutos .)


state 91

    (52) estatutos1 -> epsilon .
    (127) factor2 -> epsilon .

  ! reduce/reduce conflict for ID resolved using rule 52 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for INT resolved using rule 52 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for FLOAT resolved using rule 52 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for CHAR resolved using rule 52 (estatutos1 -> epsilon .)
    CLOSECURLY      reduce using rule 52 (estatutos1 -> epsilon .)
    RETURN          reduce using rule 52 (estatutos1 -> epsilon .)
    READ            reduce using rule 52 (estatutos1 -> epsilon .)
    WRITE           reduce using rule 52 (estatutos1 -> epsilon .)
    IF              reduce using rule 52 (estatutos1 -> epsilon .)
    WHILE           reduce using rule 52 (estatutos1 -> epsilon .)
    FOR             reduce using rule 52 (estatutos1 -> epsilon .)
    ID              reduce using rule 52 (estatutos1 -> epsilon .)
    OPENPAR         reduce using rule 52 (estatutos1 -> epsilon .)
    PLUS            reduce using rule 52 (estatutos1 -> epsilon .)
    MINUS           reduce using rule 52 (estatutos1 -> epsilon .)
    INT             reduce using rule 52 (estatutos1 -> epsilon .)
    FLOAT           reduce using rule 52 (estatutos1 -> epsilon .)
    CHAR            reduce using rule 52 (estatutos1 -> epsilon .)

  ! ID              [ reduce using rule 127 (factor2 -> epsilon .) ]
  ! INT             [ reduce using rule 127 (factor2 -> epsilon .) ]
  ! FLOAT           [ reduce using rule 127 (factor2 -> epsilon .) ]
  ! CHAR            [ reduce using rule 127 (factor2 -> epsilon .) ]


state 92

    (43) estatutos -> llamada estatutos1 .

    CLOSECURLY      reduce using rule 43 (estatutos -> llamada estatutos1 .)
    RETURN          reduce using rule 43 (estatutos -> llamada estatutos1 .)
    READ            reduce using rule 43 (estatutos -> llamada estatutos1 .)
    WRITE           reduce using rule 43 (estatutos -> llamada estatutos1 .)
    IF              reduce using rule 43 (estatutos -> llamada estatutos1 .)
    WHILE           reduce using rule 43 (estatutos -> llamada estatutos1 .)
    FOR             reduce using rule 43 (estatutos -> llamada estatutos1 .)
    ID              reduce using rule 43 (estatutos -> llamada estatutos1 .)
    OPENPAR         reduce using rule 43 (estatutos -> llamada estatutos1 .)
    PLUS            reduce using rule 43 (estatutos -> llamada estatutos1 .)
    MINUS           reduce using rule 43 (estatutos -> llamada estatutos1 .)
    INT             reduce using rule 43 (estatutos -> llamada estatutos1 .)
    FLOAT           reduce using rule 43 (estatutos -> llamada estatutos1 .)
    CHAR            reduce using rule 43 (estatutos -> llamada estatutos1 .)


state 93

    (44) estatutos -> retorno estatutos1 .

    CLOSECURLY      reduce using rule 44 (estatutos -> retorno estatutos1 .)
    RETURN          reduce using rule 44 (estatutos -> retorno estatutos1 .)
    READ            reduce using rule 44 (estatutos -> retorno estatutos1 .)
    WRITE           reduce using rule 44 (estatutos -> retorno estatutos1 .)
    IF              reduce using rule 44 (estatutos -> retorno estatutos1 .)
    WHILE           reduce using rule 44 (estatutos -> retorno estatutos1 .)
    FOR             reduce using rule 44 (estatutos -> retorno estatutos1 .)
    ID              reduce using rule 44 (estatutos -> retorno estatutos1 .)
    OPENPAR         reduce using rule 44 (estatutos -> retorno estatutos1 .)
    PLUS            reduce using rule 44 (estatutos -> retorno estatutos1 .)
    MINUS           reduce using rule 44 (estatutos -> retorno estatutos1 .)
    INT             reduce using rule 44 (estatutos -> retorno estatutos1 .)
    FLOAT           reduce using rule 44 (estatutos -> retorno estatutos1 .)
    CHAR            reduce using rule 44 (estatutos -> retorno estatutos1 .)


state 94

    (45) estatutos -> lectura estatutos1 .

    CLOSECURLY      reduce using rule 45 (estatutos -> lectura estatutos1 .)
    RETURN          reduce using rule 45 (estatutos -> lectura estatutos1 .)
    READ            reduce using rule 45 (estatutos -> lectura estatutos1 .)
    WRITE           reduce using rule 45 (estatutos -> lectura estatutos1 .)
    IF              reduce using rule 45 (estatutos -> lectura estatutos1 .)
    WHILE           reduce using rule 45 (estatutos -> lectura estatutos1 .)
    FOR             reduce using rule 45 (estatutos -> lectura estatutos1 .)
    ID              reduce using rule 45 (estatutos -> lectura estatutos1 .)
    OPENPAR         reduce using rule 45 (estatutos -> lectura estatutos1 .)
    PLUS            reduce using rule 45 (estatutos -> lectura estatutos1 .)
    MINUS           reduce using rule 45 (estatutos -> lectura estatutos1 .)
    INT             reduce using rule 45 (estatutos -> lectura estatutos1 .)
    FLOAT           reduce using rule 45 (estatutos -> lectura estatutos1 .)
    CHAR            reduce using rule 45 (estatutos -> lectura estatutos1 .)


state 95

    (46) estatutos -> escritura estatutos1 .

    CLOSECURLY      reduce using rule 46 (estatutos -> escritura estatutos1 .)
    RETURN          reduce using rule 46 (estatutos -> escritura estatutos1 .)
    READ            reduce using rule 46 (estatutos -> escritura estatutos1 .)
    WRITE           reduce using rule 46 (estatutos -> escritura estatutos1 .)
    IF              reduce using rule 46 (estatutos -> escritura estatutos1 .)
    WHILE           reduce using rule 46 (estatutos -> escritura estatutos1 .)
    FOR             reduce using rule 46 (estatutos -> escritura estatutos1 .)
    ID              reduce using rule 46 (estatutos -> escritura estatutos1 .)
    OPENPAR         reduce using rule 46 (estatutos -> escritura estatutos1 .)
    PLUS            reduce using rule 46 (estatutos -> escritura estatutos1 .)
    MINUS           reduce using rule 46 (estatutos -> escritura estatutos1 .)
    INT             reduce using rule 46 (estatutos -> escritura estatutos1 .)
    FLOAT           reduce using rule 46 (estatutos -> escritura estatutos1 .)
    CHAR            reduce using rule 46 (estatutos -> escritura estatutos1 .)


state 96

    (47) estatutos -> condicion estatutos1 .

    CLOSECURLY      reduce using rule 47 (estatutos -> condicion estatutos1 .)
    RETURN          reduce using rule 47 (estatutos -> condicion estatutos1 .)
    READ            reduce using rule 47 (estatutos -> condicion estatutos1 .)
    WRITE           reduce using rule 47 (estatutos -> condicion estatutos1 .)
    IF              reduce using rule 47 (estatutos -> condicion estatutos1 .)
    WHILE           reduce using rule 47 (estatutos -> condicion estatutos1 .)
    FOR             reduce using rule 47 (estatutos -> condicion estatutos1 .)
    ID              reduce using rule 47 (estatutos -> condicion estatutos1 .)
    OPENPAR         reduce using rule 47 (estatutos -> condicion estatutos1 .)
    PLUS            reduce using rule 47 (estatutos -> condicion estatutos1 .)
    MINUS           reduce using rule 47 (estatutos -> condicion estatutos1 .)
    INT             reduce using rule 47 (estatutos -> condicion estatutos1 .)
    FLOAT           reduce using rule 47 (estatutos -> condicion estatutos1 .)
    CHAR            reduce using rule 47 (estatutos -> condicion estatutos1 .)


state 97

    (48) estatutos -> while estatutos1 .

    CLOSECURLY      reduce using rule 48 (estatutos -> while estatutos1 .)
    RETURN          reduce using rule 48 (estatutos -> while estatutos1 .)
    READ            reduce using rule 48 (estatutos -> while estatutos1 .)
    WRITE           reduce using rule 48 (estatutos -> while estatutos1 .)
    IF              reduce using rule 48 (estatutos -> while estatutos1 .)
    WHILE           reduce using rule 48 (estatutos -> while estatutos1 .)
    FOR             reduce using rule 48 (estatutos -> while estatutos1 .)
    ID              reduce using rule 48 (estatutos -> while estatutos1 .)
    OPENPAR         reduce using rule 48 (estatutos -> while estatutos1 .)
    PLUS            reduce using rule 48 (estatutos -> while estatutos1 .)
    MINUS           reduce using rule 48 (estatutos -> while estatutos1 .)
    INT             reduce using rule 48 (estatutos -> while estatutos1 .)
    FLOAT           reduce using rule 48 (estatutos -> while estatutos1 .)
    CHAR            reduce using rule 48 (estatutos -> while estatutos1 .)


state 98

    (49) estatutos -> for estatutos1 .

    CLOSECURLY      reduce using rule 49 (estatutos -> for estatutos1 .)
    RETURN          reduce using rule 49 (estatutos -> for estatutos1 .)
    READ            reduce using rule 49 (estatutos -> for estatutos1 .)
    WRITE           reduce using rule 49 (estatutos -> for estatutos1 .)
    IF              reduce using rule 49 (estatutos -> for estatutos1 .)
    WHILE           reduce using rule 49 (estatutos -> for estatutos1 .)
    FOR             reduce using rule 49 (estatutos -> for estatutos1 .)
    ID              reduce using rule 49 (estatutos -> for estatutos1 .)
    OPENPAR         reduce using rule 49 (estatutos -> for estatutos1 .)
    PLUS            reduce using rule 49 (estatutos -> for estatutos1 .)
    MINUS           reduce using rule 49 (estatutos -> for estatutos1 .)
    INT             reduce using rule 49 (estatutos -> for estatutos1 .)
    FLOAT           reduce using rule 49 (estatutos -> for estatutos1 .)
    CHAR            reduce using rule 49 (estatutos -> for estatutos1 .)


state 99

    (50) estatutos -> est_exp estatutos1 .

    CLOSECURLY      reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    RETURN          reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    READ            reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    WRITE           reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    IF              reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    WHILE           reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    FOR             reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    ID              reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    OPENPAR         reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    PLUS            reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    MINUS           reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    INT             reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    FLOAT           reduce using rule 50 (estatutos -> est_exp estatutos1 .)
    CHAR            reduce using rule 50 (estatutos -> est_exp estatutos1 .)


state 100

    (53) asignacion -> asignacion1 expresion . SEMICOLON

    SEMICOLON       shift and go to state 150


state 101

    (119) factor -> ID . factor1
    (57) funcion -> ID . OPENPAR funcion1
    (123) factor1 -> . OPENBOX exp CLOSEBOX
    (124) factor1 -> . epsilon
    (137) epsilon -> .

    OPENPAR         shift and go to state 118
    OPENBOX         shift and go to state 151
    MULTIPLY        reduce using rule 137 (epsilon -> .)
    DIVIDE          reduce using rule 137 (epsilon -> .)
    MODULO          reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    LT              reduce using rule 137 (epsilon -> .)
    LE              reduce using rule 137 (epsilon -> .)
    GT              reduce using rule 137 (epsilon -> .)
    GE              reduce using rule 137 (epsilon -> .)
    EQ              reduce using rule 137 (epsilon -> .)
    NE              reduce using rule 137 (epsilon -> .)
    AND             reduce using rule 137 (epsilon -> .)
    OR              reduce using rule 137 (epsilon -> .)
    SEMICOLON       reduce using rule 137 (epsilon -> .)
    CLOSEPAR        reduce using rule 137 (epsilon -> .)
    CLOSEBOX        reduce using rule 137 (epsilon -> .)
    COMMA           reduce using rule 137 (epsilon -> .)
    TO              reduce using rule 137 (epsilon -> .)
    DO              reduce using rule 137 (epsilon -> .)

    factor1                        shift and go to state 119
    epsilon                        shift and go to state 120

state 102

    (121) factor -> funcion .

    MULTIPLY        reduce using rule 121 (factor -> funcion .)
    DIVIDE          reduce using rule 121 (factor -> funcion .)
    MODULO          reduce using rule 121 (factor -> funcion .)
    PLUS            reduce using rule 121 (factor -> funcion .)
    MINUS           reduce using rule 121 (factor -> funcion .)
    LT              reduce using rule 121 (factor -> funcion .)
    LE              reduce using rule 121 (factor -> funcion .)
    GT              reduce using rule 121 (factor -> funcion .)
    GE              reduce using rule 121 (factor -> funcion .)
    EQ              reduce using rule 121 (factor -> funcion .)
    NE              reduce using rule 121 (factor -> funcion .)
    AND             reduce using rule 121 (factor -> funcion .)
    OR              reduce using rule 121 (factor -> funcion .)
    SEMICOLON       reduce using rule 121 (factor -> funcion .)
    CLOSEPAR        reduce using rule 121 (factor -> funcion .)
    CLOSEBOX        reduce using rule 121 (factor -> funcion .)
    COMMA           reduce using rule 121 (factor -> funcion .)
    TO              reduce using rule 121 (factor -> funcion .)
    DO              reduce using rule 121 (factor -> funcion .)


state 103

    (127) factor2 -> epsilon .

    ID              reduce using rule 127 (factor2 -> epsilon .)
    INT             reduce using rule 127 (factor2 -> epsilon .)
    FLOAT           reduce using rule 127 (factor2 -> epsilon .)
    CHAR            reduce using rule 127 (factor2 -> epsilon .)


state 104

    (87) est_exp -> expresion SEMICOLON .

    RETURN          reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    READ            reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    WRITE           reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    IF              reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    WHILE           reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    FOR             reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    ID              reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    OPENPAR         reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    PLUS            reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    MINUS           reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    INT             reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    FLOAT           reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    CHAR            reduce using rule 87 (est_exp -> expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 87 (est_exp -> expresion SEMICOLON .)


state 105

    (56) llamada -> funcion SEMICOLON .

    RETURN          reduce using rule 56 (llamada -> funcion SEMICOLON .)
    READ            reduce using rule 56 (llamada -> funcion SEMICOLON .)
    WRITE           reduce using rule 56 (llamada -> funcion SEMICOLON .)
    IF              reduce using rule 56 (llamada -> funcion SEMICOLON .)
    WHILE           reduce using rule 56 (llamada -> funcion SEMICOLON .)
    FOR             reduce using rule 56 (llamada -> funcion SEMICOLON .)
    ID              reduce using rule 56 (llamada -> funcion SEMICOLON .)
    OPENPAR         reduce using rule 56 (llamada -> funcion SEMICOLON .)
    PLUS            reduce using rule 56 (llamada -> funcion SEMICOLON .)
    MINUS           reduce using rule 56 (llamada -> funcion SEMICOLON .)
    INT             reduce using rule 56 (llamada -> funcion SEMICOLON .)
    FLOAT           reduce using rule 56 (llamada -> funcion SEMICOLON .)
    CHAR            reduce using rule 56 (llamada -> funcion SEMICOLON .)
    CLOSECURLY      reduce using rule 56 (llamada -> funcion SEMICOLON .)


state 106

    (61) retorno -> RETURN OPENPAR . exp CLOSEPAR SEMICOLON
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 152
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 107

    (101) compare -> exp generate_compare .
    (102) compare -> exp generate_compare . compare1 compare
    (103) compare1 -> . LT
    (104) compare1 -> . LE
    (105) compare1 -> . GT
    (106) compare1 -> . GE

    EQ              reduce using rule 101 (compare -> exp generate_compare .)
    NE              reduce using rule 101 (compare -> exp generate_compare .)
    AND             reduce using rule 101 (compare -> exp generate_compare .)
    OR              reduce using rule 101 (compare -> exp generate_compare .)
    SEMICOLON       reduce using rule 101 (compare -> exp generate_compare .)
    CLOSEPAR        reduce using rule 101 (compare -> exp generate_compare .)
    COMMA           reduce using rule 101 (compare -> exp generate_compare .)
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157

    compare1                       shift and go to state 153

state 108

    (107) generate_compare -> epsilon .

    LT              reduce using rule 107 (generate_compare -> epsilon .)
    LE              reduce using rule 107 (generate_compare -> epsilon .)
    GT              reduce using rule 107 (generate_compare -> epsilon .)
    GE              reduce using rule 107 (generate_compare -> epsilon .)
    EQ              reduce using rule 107 (generate_compare -> epsilon .)
    NE              reduce using rule 107 (generate_compare -> epsilon .)
    AND             reduce using rule 107 (generate_compare -> epsilon .)
    OR              reduce using rule 107 (generate_compare -> epsilon .)
    SEMICOLON       reduce using rule 107 (generate_compare -> epsilon .)
    CLOSEPAR        reduce using rule 107 (generate_compare -> epsilon .)
    COMMA           reduce using rule 107 (generate_compare -> epsilon .)


state 109

    (62) lectura -> READ OPENPAR . lista_ids CLOSEPAR SEMICOLON
    (18) lista_ids -> . ID OPENBOX exp CLOSEBOX lista_ids1
    (19) lista_ids -> . ID lista_ids1

    ID              shift and go to state 159

    lista_ids                      shift and go to state 158

state 110

    (63) escritura -> WRITE OPENPAR . escritura1 CLOSEPAR SEMICOLON
    (64) escritura1 -> . escritura_string escritura2
    (65) escritura1 -> . escritura_expresion escritura2
    (68) escritura_string -> . STRING
    (69) escritura_expresion -> . expresion
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 163
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    escritura1                     shift and go to state 160
    escritura_string               shift and go to state 161
    escritura_expresion            shift and go to state 162
    expresion                      shift and go to state 164
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 111

    (70) condicion -> IF OPENPAR . expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    expresion                      shift and go to state 165
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 112

    (77) while -> WHILE while_punto1 . OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    OPENPAR         shift and go to state 166


state 113

    (78) while_punto1 -> epsilon .

    OPENPAR         reduce using rule 78 (while_punto1 -> epsilon .)


state 114

    (81) for -> FOR for1 . IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    IS              shift and go to state 167


state 115

    (82) for1 -> ID . OPENBOX exp CLOSEBOX
    (83) for1 -> ID .

    OPENBOX         shift and go to state 168
    IS              reduce using rule 83 (for1 -> ID .)


state 116

    (54) asignacion1 -> ID OPENBOX . exp CLOSEBOX IS
    (123) factor1 -> OPENBOX . exp CLOSEBOX
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 169
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 117

    (55) asignacion1 -> ID IS .

    ID              reduce using rule 55 (asignacion1 -> ID IS .)
    OPENPAR         reduce using rule 55 (asignacion1 -> ID IS .)
    PLUS            reduce using rule 55 (asignacion1 -> ID IS .)
    MINUS           reduce using rule 55 (asignacion1 -> ID IS .)
    INT             reduce using rule 55 (asignacion1 -> ID IS .)
    FLOAT           reduce using rule 55 (asignacion1 -> ID IS .)
    CHAR            reduce using rule 55 (asignacion1 -> ID IS .)


state 118

    (57) funcion -> ID OPENPAR . funcion1
    (58) funcion1 -> . exp funcion2
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    funcion1                       shift and go to state 170
    exp                            shift and go to state 171
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 119

    (119) factor -> ID factor1 .

    MULTIPLY        reduce using rule 119 (factor -> ID factor1 .)
    DIVIDE          reduce using rule 119 (factor -> ID factor1 .)
    MODULO          reduce using rule 119 (factor -> ID factor1 .)
    PLUS            reduce using rule 119 (factor -> ID factor1 .)
    MINUS           reduce using rule 119 (factor -> ID factor1 .)
    LT              reduce using rule 119 (factor -> ID factor1 .)
    LE              reduce using rule 119 (factor -> ID factor1 .)
    GT              reduce using rule 119 (factor -> ID factor1 .)
    GE              reduce using rule 119 (factor -> ID factor1 .)
    EQ              reduce using rule 119 (factor -> ID factor1 .)
    NE              reduce using rule 119 (factor -> ID factor1 .)
    AND             reduce using rule 119 (factor -> ID factor1 .)
    OR              reduce using rule 119 (factor -> ID factor1 .)
    SEMICOLON       reduce using rule 119 (factor -> ID factor1 .)
    CLOSEPAR        reduce using rule 119 (factor -> ID factor1 .)
    CLOSEBOX        reduce using rule 119 (factor -> ID factor1 .)
    COMMA           reduce using rule 119 (factor -> ID factor1 .)
    TO              reduce using rule 119 (factor -> ID factor1 .)
    DO              reduce using rule 119 (factor -> ID factor1 .)


state 120

    (124) factor1 -> epsilon .

    MULTIPLY        reduce using rule 124 (factor1 -> epsilon .)
    DIVIDE          reduce using rule 124 (factor1 -> epsilon .)
    MODULO          reduce using rule 124 (factor1 -> epsilon .)
    PLUS            reduce using rule 124 (factor1 -> epsilon .)
    MINUS           reduce using rule 124 (factor1 -> epsilon .)
    LT              reduce using rule 124 (factor1 -> epsilon .)
    LE              reduce using rule 124 (factor1 -> epsilon .)
    GT              reduce using rule 124 (factor1 -> epsilon .)
    GE              reduce using rule 124 (factor1 -> epsilon .)
    EQ              reduce using rule 124 (factor1 -> epsilon .)
    NE              reduce using rule 124 (factor1 -> epsilon .)
    AND             reduce using rule 124 (factor1 -> epsilon .)
    OR              reduce using rule 124 (factor1 -> epsilon .)
    SEMICOLON       reduce using rule 124 (factor1 -> epsilon .)
    CLOSEPAR        reduce using rule 124 (factor1 -> epsilon .)
    CLOSEBOX        reduce using rule 124 (factor1 -> epsilon .)
    COMMA           reduce using rule 124 (factor1 -> epsilon .)
    TO              reduce using rule 124 (factor1 -> epsilon .)
    DO              reduce using rule 124 (factor1 -> epsilon .)


state 121

    (88) expresion -> and generate_expresion .
    (89) expresion -> and generate_expresion . expresion1 expresion
    (90) expresion1 -> . OR

    SEMICOLON       reduce using rule 88 (expresion -> and generate_expresion .)
    CLOSEPAR        reduce using rule 88 (expresion -> and generate_expresion .)
    COMMA           reduce using rule 88 (expresion -> and generate_expresion .)
    OR              shift and go to state 173

    expresion1                     shift and go to state 172

state 122

    (91) generate_expresion -> epsilon .

    OR              reduce using rule 91 (generate_expresion -> epsilon .)
    SEMICOLON       reduce using rule 91 (generate_expresion -> epsilon .)
    CLOSEPAR        reduce using rule 91 (generate_expresion -> epsilon .)
    COMMA           reduce using rule 91 (generate_expresion -> epsilon .)


state 123

    (92) and -> equal generate_and .
    (93) and -> equal generate_and . and1 and
    (94) and1 -> . AND

    OR              reduce using rule 92 (and -> equal generate_and .)
    SEMICOLON       reduce using rule 92 (and -> equal generate_and .)
    CLOSEPAR        reduce using rule 92 (and -> equal generate_and .)
    COMMA           reduce using rule 92 (and -> equal generate_and .)
    AND             shift and go to state 175

    and1                           shift and go to state 174

state 124

    (95) generate_and -> epsilon .

    AND             reduce using rule 95 (generate_and -> epsilon .)
    OR              reduce using rule 95 (generate_and -> epsilon .)
    SEMICOLON       reduce using rule 95 (generate_and -> epsilon .)
    CLOSEPAR        reduce using rule 95 (generate_and -> epsilon .)
    COMMA           reduce using rule 95 (generate_and -> epsilon .)


state 125

    (96) equal -> compare generate_equal .
    (97) equal -> compare generate_equal . equal1 equal
    (98) equal1 -> . EQ
    (99) equal1 -> . NE

    AND             reduce using rule 96 (equal -> compare generate_equal .)
    OR              reduce using rule 96 (equal -> compare generate_equal .)
    SEMICOLON       reduce using rule 96 (equal -> compare generate_equal .)
    CLOSEPAR        reduce using rule 96 (equal -> compare generate_equal .)
    COMMA           reduce using rule 96 (equal -> compare generate_equal .)
    EQ              shift and go to state 177
    NE              shift and go to state 178

    equal1                         shift and go to state 176

state 126

    (100) generate_equal -> epsilon .

    EQ              reduce using rule 100 (generate_equal -> epsilon .)
    NE              reduce using rule 100 (generate_equal -> epsilon .)
    AND             reduce using rule 100 (generate_equal -> epsilon .)
    OR              reduce using rule 100 (generate_equal -> epsilon .)
    SEMICOLON       reduce using rule 100 (generate_equal -> epsilon .)
    CLOSEPAR        reduce using rule 100 (generate_equal -> epsilon .)
    COMMA           reduce using rule 100 (generate_equal -> epsilon .)


state 127

    (108) exp -> termino generate_exp .
    (109) exp -> termino generate_exp . exp1 exp
    (110) exp1 -> . PLUS
    (111) exp1 -> . MINUS

    LT              reduce using rule 108 (exp -> termino generate_exp .)
    LE              reduce using rule 108 (exp -> termino generate_exp .)
    GT              reduce using rule 108 (exp -> termino generate_exp .)
    GE              reduce using rule 108 (exp -> termino generate_exp .)
    EQ              reduce using rule 108 (exp -> termino generate_exp .)
    NE              reduce using rule 108 (exp -> termino generate_exp .)
    AND             reduce using rule 108 (exp -> termino generate_exp .)
    OR              reduce using rule 108 (exp -> termino generate_exp .)
    SEMICOLON       reduce using rule 108 (exp -> termino generate_exp .)
    CLOSEPAR        reduce using rule 108 (exp -> termino generate_exp .)
    CLOSEBOX        reduce using rule 108 (exp -> termino generate_exp .)
    COMMA           reduce using rule 108 (exp -> termino generate_exp .)
    TO              reduce using rule 108 (exp -> termino generate_exp .)
    DO              reduce using rule 108 (exp -> termino generate_exp .)
    PLUS            shift and go to state 180
    MINUS           shift and go to state 181

    exp1                           shift and go to state 179

state 128

    (112) generate_exp -> epsilon .

    PLUS            reduce using rule 112 (generate_exp -> epsilon .)
    MINUS           reduce using rule 112 (generate_exp -> epsilon .)
    LT              reduce using rule 112 (generate_exp -> epsilon .)
    LE              reduce using rule 112 (generate_exp -> epsilon .)
    GT              reduce using rule 112 (generate_exp -> epsilon .)
    GE              reduce using rule 112 (generate_exp -> epsilon .)
    EQ              reduce using rule 112 (generate_exp -> epsilon .)
    NE              reduce using rule 112 (generate_exp -> epsilon .)
    AND             reduce using rule 112 (generate_exp -> epsilon .)
    OR              reduce using rule 112 (generate_exp -> epsilon .)
    SEMICOLON       reduce using rule 112 (generate_exp -> epsilon .)
    CLOSEPAR        reduce using rule 112 (generate_exp -> epsilon .)
    CLOSEBOX        reduce using rule 112 (generate_exp -> epsilon .)
    COMMA           reduce using rule 112 (generate_exp -> epsilon .)
    TO              reduce using rule 112 (generate_exp -> epsilon .)
    DO              reduce using rule 112 (generate_exp -> epsilon .)


state 129

    (113) termino -> factor generate_termino .
    (114) termino -> factor generate_termino . termino1 termino
    (115) termino1 -> . MULTIPLY
    (116) termino1 -> . DIVIDE
    (117) termino1 -> . MODULO

    PLUS            reduce using rule 113 (termino -> factor generate_termino .)
    MINUS           reduce using rule 113 (termino -> factor generate_termino .)
    LT              reduce using rule 113 (termino -> factor generate_termino .)
    LE              reduce using rule 113 (termino -> factor generate_termino .)
    GT              reduce using rule 113 (termino -> factor generate_termino .)
    GE              reduce using rule 113 (termino -> factor generate_termino .)
    EQ              reduce using rule 113 (termino -> factor generate_termino .)
    NE              reduce using rule 113 (termino -> factor generate_termino .)
    AND             reduce using rule 113 (termino -> factor generate_termino .)
    OR              reduce using rule 113 (termino -> factor generate_termino .)
    SEMICOLON       reduce using rule 113 (termino -> factor generate_termino .)
    CLOSEPAR        reduce using rule 113 (termino -> factor generate_termino .)
    CLOSEBOX        reduce using rule 113 (termino -> factor generate_termino .)
    COMMA           reduce using rule 113 (termino -> factor generate_termino .)
    TO              reduce using rule 113 (termino -> factor generate_termino .)
    DO              reduce using rule 113 (termino -> factor generate_termino .)
    MULTIPLY        shift and go to state 183
    DIVIDE          shift and go to state 184
    MODULO          shift and go to state 185

    termino1                       shift and go to state 182

state 130

    (118) generate_termino -> epsilon .

    MULTIPLY        reduce using rule 118 (generate_termino -> epsilon .)
    DIVIDE          reduce using rule 118 (generate_termino -> epsilon .)
    MODULO          reduce using rule 118 (generate_termino -> epsilon .)
    PLUS            reduce using rule 118 (generate_termino -> epsilon .)
    MINUS           reduce using rule 118 (generate_termino -> epsilon .)
    LT              reduce using rule 118 (generate_termino -> epsilon .)
    LE              reduce using rule 118 (generate_termino -> epsilon .)
    GT              reduce using rule 118 (generate_termino -> epsilon .)
    GE              reduce using rule 118 (generate_termino -> epsilon .)
    EQ              reduce using rule 118 (generate_termino -> epsilon .)
    NE              reduce using rule 118 (generate_termino -> epsilon .)
    AND             reduce using rule 118 (generate_termino -> epsilon .)
    OR              reduce using rule 118 (generate_termino -> epsilon .)
    SEMICOLON       reduce using rule 118 (generate_termino -> epsilon .)
    CLOSEPAR        reduce using rule 118 (generate_termino -> epsilon .)
    CLOSEBOX        reduce using rule 118 (generate_termino -> epsilon .)
    COMMA           reduce using rule 118 (generate_termino -> epsilon .)
    TO              reduce using rule 118 (generate_termino -> epsilon .)
    DO              reduce using rule 118 (generate_termino -> epsilon .)


state 131

    (120) factor -> openpar expresion . closepar
    (129) closepar -> . CLOSEPAR

    CLOSEPAR        shift and go to state 187

    closepar                       shift and go to state 186

state 132

    (122) factor -> factor2 varcte .

    MULTIPLY        reduce using rule 122 (factor -> factor2 varcte .)
    DIVIDE          reduce using rule 122 (factor -> factor2 varcte .)
    MODULO          reduce using rule 122 (factor -> factor2 varcte .)
    PLUS            reduce using rule 122 (factor -> factor2 varcte .)
    MINUS           reduce using rule 122 (factor -> factor2 varcte .)
    LT              reduce using rule 122 (factor -> factor2 varcte .)
    LE              reduce using rule 122 (factor -> factor2 varcte .)
    GT              reduce using rule 122 (factor -> factor2 varcte .)
    GE              reduce using rule 122 (factor -> factor2 varcte .)
    EQ              reduce using rule 122 (factor -> factor2 varcte .)
    NE              reduce using rule 122 (factor -> factor2 varcte .)
    AND             reduce using rule 122 (factor -> factor2 varcte .)
    OR              reduce using rule 122 (factor -> factor2 varcte .)
    SEMICOLON       reduce using rule 122 (factor -> factor2 varcte .)
    CLOSEPAR        reduce using rule 122 (factor -> factor2 varcte .)
    CLOSEBOX        reduce using rule 122 (factor -> factor2 varcte .)
    COMMA           reduce using rule 122 (factor -> factor2 varcte .)
    TO              reduce using rule 122 (factor -> factor2 varcte .)
    DO              reduce using rule 122 (factor -> factor2 varcte .)


state 133

    (130) varcte -> ID .

    MULTIPLY        reduce using rule 130 (varcte -> ID .)
    DIVIDE          reduce using rule 130 (varcte -> ID .)
    MODULO          reduce using rule 130 (varcte -> ID .)
    PLUS            reduce using rule 130 (varcte -> ID .)
    MINUS           reduce using rule 130 (varcte -> ID .)
    LT              reduce using rule 130 (varcte -> ID .)
    LE              reduce using rule 130 (varcte -> ID .)
    GT              reduce using rule 130 (varcte -> ID .)
    GE              reduce using rule 130 (varcte -> ID .)
    EQ              reduce using rule 130 (varcte -> ID .)
    NE              reduce using rule 130 (varcte -> ID .)
    AND             reduce using rule 130 (varcte -> ID .)
    OR              reduce using rule 130 (varcte -> ID .)
    SEMICOLON       reduce using rule 130 (varcte -> ID .)
    CLOSEPAR        reduce using rule 130 (varcte -> ID .)
    CLOSEBOX        reduce using rule 130 (varcte -> ID .)
    COMMA           reduce using rule 130 (varcte -> ID .)
    TO              reduce using rule 130 (varcte -> ID .)
    DO              reduce using rule 130 (varcte -> ID .)


state 134

    (131) varcte -> int .

    MULTIPLY        reduce using rule 131 (varcte -> int .)
    DIVIDE          reduce using rule 131 (varcte -> int .)
    MODULO          reduce using rule 131 (varcte -> int .)
    PLUS            reduce using rule 131 (varcte -> int .)
    MINUS           reduce using rule 131 (varcte -> int .)
    LT              reduce using rule 131 (varcte -> int .)
    LE              reduce using rule 131 (varcte -> int .)
    GT              reduce using rule 131 (varcte -> int .)
    GE              reduce using rule 131 (varcte -> int .)
    EQ              reduce using rule 131 (varcte -> int .)
    NE              reduce using rule 131 (varcte -> int .)
    AND             reduce using rule 131 (varcte -> int .)
    OR              reduce using rule 131 (varcte -> int .)
    SEMICOLON       reduce using rule 131 (varcte -> int .)
    CLOSEPAR        reduce using rule 131 (varcte -> int .)
    CLOSEBOX        reduce using rule 131 (varcte -> int .)
    COMMA           reduce using rule 131 (varcte -> int .)
    TO              reduce using rule 131 (varcte -> int .)
    DO              reduce using rule 131 (varcte -> int .)


state 135

    (132) varcte -> float .

    MULTIPLY        reduce using rule 132 (varcte -> float .)
    DIVIDE          reduce using rule 132 (varcte -> float .)
    MODULO          reduce using rule 132 (varcte -> float .)
    PLUS            reduce using rule 132 (varcte -> float .)
    MINUS           reduce using rule 132 (varcte -> float .)
    LT              reduce using rule 132 (varcte -> float .)
    LE              reduce using rule 132 (varcte -> float .)
    GT              reduce using rule 132 (varcte -> float .)
    GE              reduce using rule 132 (varcte -> float .)
    EQ              reduce using rule 132 (varcte -> float .)
    NE              reduce using rule 132 (varcte -> float .)
    AND             reduce using rule 132 (varcte -> float .)
    OR              reduce using rule 132 (varcte -> float .)
    SEMICOLON       reduce using rule 132 (varcte -> float .)
    CLOSEPAR        reduce using rule 132 (varcte -> float .)
    CLOSEBOX        reduce using rule 132 (varcte -> float .)
    COMMA           reduce using rule 132 (varcte -> float .)
    TO              reduce using rule 132 (varcte -> float .)
    DO              reduce using rule 132 (varcte -> float .)


state 136

    (133) varcte -> char .

    MULTIPLY        reduce using rule 133 (varcte -> char .)
    DIVIDE          reduce using rule 133 (varcte -> char .)
    MODULO          reduce using rule 133 (varcte -> char .)
    PLUS            reduce using rule 133 (varcte -> char .)
    MINUS           reduce using rule 133 (varcte -> char .)
    LT              reduce using rule 133 (varcte -> char .)
    LE              reduce using rule 133 (varcte -> char .)
    GT              reduce using rule 133 (varcte -> char .)
    GE              reduce using rule 133 (varcte -> char .)
    EQ              reduce using rule 133 (varcte -> char .)
    NE              reduce using rule 133 (varcte -> char .)
    AND             reduce using rule 133 (varcte -> char .)
    OR              reduce using rule 133 (varcte -> char .)
    SEMICOLON       reduce using rule 133 (varcte -> char .)
    CLOSEPAR        reduce using rule 133 (varcte -> char .)
    CLOSEBOX        reduce using rule 133 (varcte -> char .)
    COMMA           reduce using rule 133 (varcte -> char .)
    TO              reduce using rule 133 (varcte -> char .)
    DO              reduce using rule 133 (varcte -> char .)


state 137

    (134) int -> INT .

    MULTIPLY        reduce using rule 134 (int -> INT .)
    DIVIDE          reduce using rule 134 (int -> INT .)
    MODULO          reduce using rule 134 (int -> INT .)
    PLUS            reduce using rule 134 (int -> INT .)
    MINUS           reduce using rule 134 (int -> INT .)
    LT              reduce using rule 134 (int -> INT .)
    LE              reduce using rule 134 (int -> INT .)
    GT              reduce using rule 134 (int -> INT .)
    GE              reduce using rule 134 (int -> INT .)
    EQ              reduce using rule 134 (int -> INT .)
    NE              reduce using rule 134 (int -> INT .)
    AND             reduce using rule 134 (int -> INT .)
    OR              reduce using rule 134 (int -> INT .)
    SEMICOLON       reduce using rule 134 (int -> INT .)
    CLOSEPAR        reduce using rule 134 (int -> INT .)
    CLOSEBOX        reduce using rule 134 (int -> INT .)
    COMMA           reduce using rule 134 (int -> INT .)
    TO              reduce using rule 134 (int -> INT .)
    DO              reduce using rule 134 (int -> INT .)


state 138

    (135) float -> FLOAT .

    MULTIPLY        reduce using rule 135 (float -> FLOAT .)
    DIVIDE          reduce using rule 135 (float -> FLOAT .)
    MODULO          reduce using rule 135 (float -> FLOAT .)
    PLUS            reduce using rule 135 (float -> FLOAT .)
    MINUS           reduce using rule 135 (float -> FLOAT .)
    LT              reduce using rule 135 (float -> FLOAT .)
    LE              reduce using rule 135 (float -> FLOAT .)
    GT              reduce using rule 135 (float -> FLOAT .)
    GE              reduce using rule 135 (float -> FLOAT .)
    EQ              reduce using rule 135 (float -> FLOAT .)
    NE              reduce using rule 135 (float -> FLOAT .)
    AND             reduce using rule 135 (float -> FLOAT .)
    OR              reduce using rule 135 (float -> FLOAT .)
    SEMICOLON       reduce using rule 135 (float -> FLOAT .)
    CLOSEPAR        reduce using rule 135 (float -> FLOAT .)
    CLOSEBOX        reduce using rule 135 (float -> FLOAT .)
    COMMA           reduce using rule 135 (float -> FLOAT .)
    TO              reduce using rule 135 (float -> FLOAT .)
    DO              reduce using rule 135 (float -> FLOAT .)


state 139

    (136) char -> CHAR .

    MULTIPLY        reduce using rule 136 (char -> CHAR .)
    DIVIDE          reduce using rule 136 (char -> CHAR .)
    MODULO          reduce using rule 136 (char -> CHAR .)
    PLUS            reduce using rule 136 (char -> CHAR .)
    MINUS           reduce using rule 136 (char -> CHAR .)
    LT              reduce using rule 136 (char -> CHAR .)
    LE              reduce using rule 136 (char -> CHAR .)
    GT              reduce using rule 136 (char -> CHAR .)
    GE              reduce using rule 136 (char -> CHAR .)
    EQ              reduce using rule 136 (char -> CHAR .)
    NE              reduce using rule 136 (char -> CHAR .)
    AND             reduce using rule 136 (char -> CHAR .)
    OR              reduce using rule 136 (char -> CHAR .)
    SEMICOLON       reduce using rule 136 (char -> CHAR .)
    CLOSEPAR        reduce using rule 136 (char -> CHAR .)
    CLOSEBOX        reduce using rule 136 (char -> CHAR .)
    COMMA           reduce using rule 136 (char -> CHAR .)
    TO              reduce using rule 136 (char -> CHAR .)
    DO              reduce using rule 136 (char -> CHAR .)


state 140

    (40) parameters1 -> COMMA parameters .

    CLOSEPAR        reduce using rule 40 (parameters1 -> COMMA parameters .)


state 141

    (34) funciones5 -> vars store_function OPENCURLY . funciones6
    (36) funciones6 -> . estatutos funciones6
    (37) funciones6 -> . CLOSECURLY funciones
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 144
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    funciones6                     shift and go to state 188
    estatutos                      shift and go to state 143
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 142

    (35) funciones5 -> store_function OPENCURLY funciones6 .

    MAIN            reduce using rule 35 (funciones5 -> store_function OPENCURLY funciones6 .)


state 143

    (36) funciones6 -> estatutos . funciones6
    (36) funciones6 -> . estatutos funciones6
    (37) funciones6 -> . CLOSECURLY funciones
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 144
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    estatutos                      shift and go to state 143
    funciones6                     shift and go to state 189
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 144

    (37) funciones6 -> CLOSECURLY . funciones
    (26) funciones -> . FUNCTION funciones1
    (27) funciones -> . epsilon
    (137) epsilon -> .

    FUNCTION        shift and go to state 8
    MAIN            reduce using rule 137 (epsilon -> .)

    funciones                      shift and go to state 190
    epsilon                        shift and go to state 191

state 145

    (12) vars3 -> OPENBOX exp . CLOSEBOX vars4

    CLOSEBOX        shift and go to state 192


state 146

    (14) vars4 -> SEMICOLON vars5 .

    FUNCTION        reduce using rule 14 (vars4 -> SEMICOLON vars5 .)
    MAIN            reduce using rule 14 (vars4 -> SEMICOLON vars5 .)
    OPENCURLY       reduce using rule 14 (vars4 -> SEMICOLON vars5 .)


state 147

    (16) vars5 -> vars1 .

    FUNCTION        reduce using rule 16 (vars5 -> vars1 .)
    MAIN            reduce using rule 16 (vars5 -> vars1 .)
    OPENCURLY       reduce using rule 16 (vars5 -> vars1 .)


state 148

    (17) vars5 -> epsilon .

    FUNCTION        reduce using rule 17 (vars5 -> epsilon .)
    MAIN            reduce using rule 17 (vars5 -> epsilon .)
    OPENCURLY       reduce using rule 17 (vars5 -> epsilon .)


state 149

    (15) vars4 -> COMMA vars2 .

    FUNCTION        reduce using rule 15 (vars4 -> COMMA vars2 .)
    MAIN            reduce using rule 15 (vars4 -> COMMA vars2 .)
    OPENCURLY       reduce using rule 15 (vars4 -> COMMA vars2 .)


state 150

    (53) asignacion -> asignacion1 expresion SEMICOLON .

    RETURN          reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    READ            reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    WRITE           reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    IF              reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    WHILE           reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    FOR             reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    ID              reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    OPENPAR         reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    PLUS            reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    MINUS           reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    INT             reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    FLOAT           reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    CHAR            reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 53 (asignacion -> asignacion1 expresion SEMICOLON .)


state 151

    (123) factor1 -> OPENBOX . exp CLOSEBOX
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 193
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 152

    (61) retorno -> RETURN OPENPAR exp . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 194


state 153

    (102) compare -> exp generate_compare compare1 . compare
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 62
    compare                        shift and go to state 195
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 154

    (103) compare1 -> LT .

    ID              reduce using rule 103 (compare1 -> LT .)
    OPENPAR         reduce using rule 103 (compare1 -> LT .)
    PLUS            reduce using rule 103 (compare1 -> LT .)
    MINUS           reduce using rule 103 (compare1 -> LT .)
    INT             reduce using rule 103 (compare1 -> LT .)
    FLOAT           reduce using rule 103 (compare1 -> LT .)
    CHAR            reduce using rule 103 (compare1 -> LT .)


state 155

    (104) compare1 -> LE .

    ID              reduce using rule 104 (compare1 -> LE .)
    OPENPAR         reduce using rule 104 (compare1 -> LE .)
    PLUS            reduce using rule 104 (compare1 -> LE .)
    MINUS           reduce using rule 104 (compare1 -> LE .)
    INT             reduce using rule 104 (compare1 -> LE .)
    FLOAT           reduce using rule 104 (compare1 -> LE .)
    CHAR            reduce using rule 104 (compare1 -> LE .)


state 156

    (105) compare1 -> GT .

    ID              reduce using rule 105 (compare1 -> GT .)
    OPENPAR         reduce using rule 105 (compare1 -> GT .)
    PLUS            reduce using rule 105 (compare1 -> GT .)
    MINUS           reduce using rule 105 (compare1 -> GT .)
    INT             reduce using rule 105 (compare1 -> GT .)
    FLOAT           reduce using rule 105 (compare1 -> GT .)
    CHAR            reduce using rule 105 (compare1 -> GT .)


state 157

    (106) compare1 -> GE .

    ID              reduce using rule 106 (compare1 -> GE .)
    OPENPAR         reduce using rule 106 (compare1 -> GE .)
    PLUS            reduce using rule 106 (compare1 -> GE .)
    MINUS           reduce using rule 106 (compare1 -> GE .)
    INT             reduce using rule 106 (compare1 -> GE .)
    FLOAT           reduce using rule 106 (compare1 -> GE .)
    CHAR            reduce using rule 106 (compare1 -> GE .)


state 158

    (62) lectura -> READ OPENPAR lista_ids . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 196


state 159

    (18) lista_ids -> ID . OPENBOX exp CLOSEBOX lista_ids1
    (19) lista_ids -> ID . lista_ids1
    (20) lista_ids1 -> . COMMA lista_ids
    (21) lista_ids1 -> . epsilon
    (137) epsilon -> .

    OPENBOX         shift and go to state 197
    COMMA           shift and go to state 199
    CLOSEPAR        reduce using rule 137 (epsilon -> .)

    lista_ids1                     shift and go to state 198
    epsilon                        shift and go to state 200

state 160

    (63) escritura -> WRITE OPENPAR escritura1 . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 201


state 161

    (64) escritura1 -> escritura_string . escritura2
    (66) escritura2 -> . COMMA escritura1
    (67) escritura2 -> . epsilon
    (137) epsilon -> .

    COMMA           shift and go to state 203
    CLOSEPAR        reduce using rule 137 (epsilon -> .)

    escritura2                     shift and go to state 202
    epsilon                        shift and go to state 204

state 162

    (65) escritura1 -> escritura_expresion . escritura2
    (66) escritura2 -> . COMMA escritura1
    (67) escritura2 -> . epsilon
    (137) epsilon -> .

    COMMA           shift and go to state 203
    CLOSEPAR        reduce using rule 137 (epsilon -> .)

    escritura2                     shift and go to state 205
    epsilon                        shift and go to state 204

state 163

    (68) escritura_string -> STRING .

    COMMA           reduce using rule 68 (escritura_string -> STRING .)
    CLOSEPAR        reduce using rule 68 (escritura_string -> STRING .)


state 164

    (69) escritura_expresion -> expresion .

    COMMA           reduce using rule 69 (escritura_expresion -> expresion .)
    CLOSEPAR        reduce using rule 69 (escritura_expresion -> expresion .)


state 165

    (70) condicion -> IF OPENPAR expresion . CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    CLOSEPAR        shift and go to state 206


state 166

    (77) while -> WHILE while_punto1 OPENPAR . expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    expresion                      shift and go to state 207
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 167

    (81) for -> FOR for1 IS . exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 208
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 168

    (82) for1 -> ID OPENBOX . exp CLOSEBOX
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 209
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 169

    (54) asignacion1 -> ID OPENBOX exp . CLOSEBOX IS
    (123) factor1 -> OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 210


state 170

    (57) funcion -> ID OPENPAR funcion1 .

    SEMICOLON       reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    MULTIPLY        reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    DIVIDE          reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    MODULO          reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    PLUS            reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    MINUS           reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    LT              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    LE              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    GT              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    GE              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    EQ              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    NE              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    AND             reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    OR              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    CLOSEPAR        reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    CLOSEBOX        reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    COMMA           reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    TO              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)
    DO              reduce using rule 57 (funcion -> ID OPENPAR funcion1 .)


state 171

    (58) funcion1 -> exp . funcion2
    (59) funcion2 -> . COMMA funcion1
    (60) funcion2 -> . CLOSEPAR

    COMMA           shift and go to state 212
    CLOSEPAR        shift and go to state 213

    funcion2                       shift and go to state 211

state 172

    (89) expresion -> and generate_expresion expresion1 . expresion
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    and                            shift and go to state 69
    expresion                      shift and go to state 214
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 173

    (90) expresion1 -> OR .

    ID              reduce using rule 90 (expresion1 -> OR .)
    OPENPAR         reduce using rule 90 (expresion1 -> OR .)
    PLUS            reduce using rule 90 (expresion1 -> OR .)
    MINUS           reduce using rule 90 (expresion1 -> OR .)
    INT             reduce using rule 90 (expresion1 -> OR .)
    FLOAT           reduce using rule 90 (expresion1 -> OR .)
    CHAR            reduce using rule 90 (expresion1 -> OR .)


state 174

    (93) and -> equal generate_and and1 . and
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    equal                          shift and go to state 70
    and                            shift and go to state 215
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 175

    (94) and1 -> AND .

    ID              reduce using rule 94 (and1 -> AND .)
    OPENPAR         reduce using rule 94 (and1 -> AND .)
    PLUS            reduce using rule 94 (and1 -> AND .)
    MINUS           reduce using rule 94 (and1 -> AND .)
    INT             reduce using rule 94 (and1 -> AND .)
    FLOAT           reduce using rule 94 (and1 -> AND .)
    CHAR            reduce using rule 94 (and1 -> AND .)


state 176

    (97) equal -> compare generate_equal equal1 . equal
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    compare                        shift and go to state 71
    equal                          shift and go to state 216
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 177

    (98) equal1 -> EQ .

    ID              reduce using rule 98 (equal1 -> EQ .)
    OPENPAR         reduce using rule 98 (equal1 -> EQ .)
    PLUS            reduce using rule 98 (equal1 -> EQ .)
    MINUS           reduce using rule 98 (equal1 -> EQ .)
    INT             reduce using rule 98 (equal1 -> EQ .)
    FLOAT           reduce using rule 98 (equal1 -> EQ .)
    CHAR            reduce using rule 98 (equal1 -> EQ .)


state 178

    (99) equal1 -> NE .

    ID              reduce using rule 99 (equal1 -> NE .)
    OPENPAR         reduce using rule 99 (equal1 -> NE .)
    PLUS            reduce using rule 99 (equal1 -> NE .)
    MINUS           reduce using rule 99 (equal1 -> NE .)
    INT             reduce using rule 99 (equal1 -> NE .)
    FLOAT           reduce using rule 99 (equal1 -> NE .)
    CHAR            reduce using rule 99 (equal1 -> NE .)


state 179

    (109) exp -> termino generate_exp exp1 . exp
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    termino                        shift and go to state 72
    exp                            shift and go to state 217
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 180

    (110) exp1 -> PLUS .

    ID              reduce using rule 110 (exp1 -> PLUS .)
    OPENPAR         reduce using rule 110 (exp1 -> PLUS .)
    PLUS            reduce using rule 110 (exp1 -> PLUS .)
    MINUS           reduce using rule 110 (exp1 -> PLUS .)
    INT             reduce using rule 110 (exp1 -> PLUS .)
    FLOAT           reduce using rule 110 (exp1 -> PLUS .)
    CHAR            reduce using rule 110 (exp1 -> PLUS .)


state 181

    (111) exp1 -> MINUS .

    ID              reduce using rule 111 (exp1 -> MINUS .)
    OPENPAR         reduce using rule 111 (exp1 -> MINUS .)
    PLUS            reduce using rule 111 (exp1 -> MINUS .)
    MINUS           reduce using rule 111 (exp1 -> MINUS .)
    INT             reduce using rule 111 (exp1 -> MINUS .)
    FLOAT           reduce using rule 111 (exp1 -> MINUS .)
    CHAR            reduce using rule 111 (exp1 -> MINUS .)


state 182

    (114) termino -> factor generate_termino termino1 . termino
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    factor                         shift and go to state 73
    termino                        shift and go to state 218
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 183

    (115) termino1 -> MULTIPLY .

    ID              reduce using rule 115 (termino1 -> MULTIPLY .)
    OPENPAR         reduce using rule 115 (termino1 -> MULTIPLY .)
    PLUS            reduce using rule 115 (termino1 -> MULTIPLY .)
    MINUS           reduce using rule 115 (termino1 -> MULTIPLY .)
    INT             reduce using rule 115 (termino1 -> MULTIPLY .)
    FLOAT           reduce using rule 115 (termino1 -> MULTIPLY .)
    CHAR            reduce using rule 115 (termino1 -> MULTIPLY .)


state 184

    (116) termino1 -> DIVIDE .

    ID              reduce using rule 116 (termino1 -> DIVIDE .)
    OPENPAR         reduce using rule 116 (termino1 -> DIVIDE .)
    PLUS            reduce using rule 116 (termino1 -> DIVIDE .)
    MINUS           reduce using rule 116 (termino1 -> DIVIDE .)
    INT             reduce using rule 116 (termino1 -> DIVIDE .)
    FLOAT           reduce using rule 116 (termino1 -> DIVIDE .)
    CHAR            reduce using rule 116 (termino1 -> DIVIDE .)


state 185

    (117) termino1 -> MODULO .

    ID              reduce using rule 117 (termino1 -> MODULO .)
    OPENPAR         reduce using rule 117 (termino1 -> MODULO .)
    PLUS            reduce using rule 117 (termino1 -> MODULO .)
    MINUS           reduce using rule 117 (termino1 -> MODULO .)
    INT             reduce using rule 117 (termino1 -> MODULO .)
    FLOAT           reduce using rule 117 (termino1 -> MODULO .)
    CHAR            reduce using rule 117 (termino1 -> MODULO .)


state 186

    (120) factor -> openpar expresion closepar .

    MULTIPLY        reduce using rule 120 (factor -> openpar expresion closepar .)
    DIVIDE          reduce using rule 120 (factor -> openpar expresion closepar .)
    MODULO          reduce using rule 120 (factor -> openpar expresion closepar .)
    PLUS            reduce using rule 120 (factor -> openpar expresion closepar .)
    MINUS           reduce using rule 120 (factor -> openpar expresion closepar .)
    LT              reduce using rule 120 (factor -> openpar expresion closepar .)
    LE              reduce using rule 120 (factor -> openpar expresion closepar .)
    GT              reduce using rule 120 (factor -> openpar expresion closepar .)
    GE              reduce using rule 120 (factor -> openpar expresion closepar .)
    EQ              reduce using rule 120 (factor -> openpar expresion closepar .)
    NE              reduce using rule 120 (factor -> openpar expresion closepar .)
    AND             reduce using rule 120 (factor -> openpar expresion closepar .)
    OR              reduce using rule 120 (factor -> openpar expresion closepar .)
    SEMICOLON       reduce using rule 120 (factor -> openpar expresion closepar .)
    CLOSEPAR        reduce using rule 120 (factor -> openpar expresion closepar .)
    CLOSEBOX        reduce using rule 120 (factor -> openpar expresion closepar .)
    COMMA           reduce using rule 120 (factor -> openpar expresion closepar .)
    TO              reduce using rule 120 (factor -> openpar expresion closepar .)
    DO              reduce using rule 120 (factor -> openpar expresion closepar .)


state 187

    (129) closepar -> CLOSEPAR .

    MULTIPLY        reduce using rule 129 (closepar -> CLOSEPAR .)
    DIVIDE          reduce using rule 129 (closepar -> CLOSEPAR .)
    MODULO          reduce using rule 129 (closepar -> CLOSEPAR .)
    PLUS            reduce using rule 129 (closepar -> CLOSEPAR .)
    MINUS           reduce using rule 129 (closepar -> CLOSEPAR .)
    LT              reduce using rule 129 (closepar -> CLOSEPAR .)
    LE              reduce using rule 129 (closepar -> CLOSEPAR .)
    GT              reduce using rule 129 (closepar -> CLOSEPAR .)
    GE              reduce using rule 129 (closepar -> CLOSEPAR .)
    EQ              reduce using rule 129 (closepar -> CLOSEPAR .)
    NE              reduce using rule 129 (closepar -> CLOSEPAR .)
    AND             reduce using rule 129 (closepar -> CLOSEPAR .)
    OR              reduce using rule 129 (closepar -> CLOSEPAR .)
    SEMICOLON       reduce using rule 129 (closepar -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 129 (closepar -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 129 (closepar -> CLOSEPAR .)
    COMMA           reduce using rule 129 (closepar -> CLOSEPAR .)
    TO              reduce using rule 129 (closepar -> CLOSEPAR .)
    DO              reduce using rule 129 (closepar -> CLOSEPAR .)


state 188

    (34) funciones5 -> vars store_function OPENCURLY funciones6 .

    MAIN            reduce using rule 34 (funciones5 -> vars store_function OPENCURLY funciones6 .)


state 189

    (36) funciones6 -> estatutos funciones6 .

    MAIN            reduce using rule 36 (funciones6 -> estatutos funciones6 .)


state 190

    (37) funciones6 -> CLOSECURLY funciones .

    MAIN            reduce using rule 37 (funciones6 -> CLOSECURLY funciones .)


state 191

    (27) funciones -> epsilon .

    MAIN            reduce using rule 27 (funciones -> epsilon .)


state 192

    (12) vars3 -> OPENBOX exp CLOSEBOX . vars4
    (14) vars4 -> . SEMICOLON vars5
    (15) vars4 -> . COMMA vars2

    SEMICOLON       shift and go to state 86
    COMMA           shift and go to state 87

    vars4                          shift and go to state 219

state 193

    (123) factor1 -> OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 220


state 194

    (61) retorno -> RETURN OPENPAR exp CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 221


state 195

    (102) compare -> exp generate_compare compare1 compare .

    EQ              reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    NE              reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    AND             reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    OR              reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    SEMICOLON       reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    CLOSEPAR        reduce using rule 102 (compare -> exp generate_compare compare1 compare .)
    COMMA           reduce using rule 102 (compare -> exp generate_compare compare1 compare .)


state 196

    (62) lectura -> READ OPENPAR lista_ids CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 222


state 197

    (18) lista_ids -> ID OPENBOX . exp CLOSEBOX lista_ids1
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 223
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 198

    (19) lista_ids -> ID lista_ids1 .

    CLOSEPAR        reduce using rule 19 (lista_ids -> ID lista_ids1 .)


state 199

    (20) lista_ids1 -> COMMA . lista_ids
    (18) lista_ids -> . ID OPENBOX exp CLOSEBOX lista_ids1
    (19) lista_ids -> . ID lista_ids1

    ID              shift and go to state 159

    lista_ids                      shift and go to state 224

state 200

    (21) lista_ids1 -> epsilon .

    CLOSEPAR        reduce using rule 21 (lista_ids1 -> epsilon .)


state 201

    (63) escritura -> WRITE OPENPAR escritura1 CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 225


state 202

    (64) escritura1 -> escritura_string escritura2 .

    CLOSEPAR        reduce using rule 64 (escritura1 -> escritura_string escritura2 .)


state 203

    (66) escritura2 -> COMMA . escritura1
    (64) escritura1 -> . escritura_string escritura2
    (65) escritura1 -> . escritura_expresion escritura2
    (68) escritura_string -> . STRING
    (69) escritura_expresion -> . expresion
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 163
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    escritura1                     shift and go to state 226
    escritura_string               shift and go to state 161
    escritura_expresion            shift and go to state 162
    expresion                      shift and go to state 164
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    exp                            shift and go to state 62
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 204

    (67) escritura2 -> epsilon .

    CLOSEPAR        reduce using rule 67 (escritura2 -> epsilon .)


state 205

    (65) escritura1 -> escritura_expresion escritura2 .

    CLOSEPAR        reduce using rule 65 (escritura1 -> escritura_expresion escritura2 .)


state 206

    (70) condicion -> IF OPENPAR expresion CLOSEPAR . THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    THEN            shift and go to state 227


state 207

    (77) while -> WHILE while_punto1 OPENPAR expresion . CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    CLOSEPAR        shift and go to state 228


state 208

    (81) for -> FOR for1 IS exp . for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (84) for_punto1 -> . epsilon
    (137) epsilon -> .

    TO              reduce using rule 137 (epsilon -> .)

    for_punto1                     shift and go to state 229
    epsilon                        shift and go to state 230

state 209

    (82) for1 -> ID OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 231


state 210

    (54) asignacion1 -> ID OPENBOX exp CLOSEBOX . IS
    (123) factor1 -> OPENBOX exp CLOSEBOX .

    IS              shift and go to state 232
    MULTIPLY        reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    DIVIDE          reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    MODULO          reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    PLUS            reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    MINUS           reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    LT              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    LE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    GT              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    GE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    EQ              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    NE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    AND             reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    OR              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    SEMICOLON       reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)


state 211

    (58) funcion1 -> exp funcion2 .

    SEMICOLON       reduce using rule 58 (funcion1 -> exp funcion2 .)
    MULTIPLY        reduce using rule 58 (funcion1 -> exp funcion2 .)
    DIVIDE          reduce using rule 58 (funcion1 -> exp funcion2 .)
    MODULO          reduce using rule 58 (funcion1 -> exp funcion2 .)
    PLUS            reduce using rule 58 (funcion1 -> exp funcion2 .)
    MINUS           reduce using rule 58 (funcion1 -> exp funcion2 .)
    LT              reduce using rule 58 (funcion1 -> exp funcion2 .)
    LE              reduce using rule 58 (funcion1 -> exp funcion2 .)
    GT              reduce using rule 58 (funcion1 -> exp funcion2 .)
    GE              reduce using rule 58 (funcion1 -> exp funcion2 .)
    EQ              reduce using rule 58 (funcion1 -> exp funcion2 .)
    NE              reduce using rule 58 (funcion1 -> exp funcion2 .)
    AND             reduce using rule 58 (funcion1 -> exp funcion2 .)
    OR              reduce using rule 58 (funcion1 -> exp funcion2 .)
    CLOSEPAR        reduce using rule 58 (funcion1 -> exp funcion2 .)
    CLOSEBOX        reduce using rule 58 (funcion1 -> exp funcion2 .)
    COMMA           reduce using rule 58 (funcion1 -> exp funcion2 .)
    TO              reduce using rule 58 (funcion1 -> exp funcion2 .)
    DO              reduce using rule 58 (funcion1 -> exp funcion2 .)


state 212

    (59) funcion2 -> COMMA . funcion1
    (58) funcion1 -> . exp funcion2
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    funcion1                       shift and go to state 233
    exp                            shift and go to state 171
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 213

    (60) funcion2 -> CLOSEPAR .

    SEMICOLON       reduce using rule 60 (funcion2 -> CLOSEPAR .)
    MULTIPLY        reduce using rule 60 (funcion2 -> CLOSEPAR .)
    DIVIDE          reduce using rule 60 (funcion2 -> CLOSEPAR .)
    MODULO          reduce using rule 60 (funcion2 -> CLOSEPAR .)
    PLUS            reduce using rule 60 (funcion2 -> CLOSEPAR .)
    MINUS           reduce using rule 60 (funcion2 -> CLOSEPAR .)
    LT              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    LE              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    GT              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    GE              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    EQ              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    NE              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    AND             reduce using rule 60 (funcion2 -> CLOSEPAR .)
    OR              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 60 (funcion2 -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 60 (funcion2 -> CLOSEPAR .)
    COMMA           reduce using rule 60 (funcion2 -> CLOSEPAR .)
    TO              reduce using rule 60 (funcion2 -> CLOSEPAR .)
    DO              reduce using rule 60 (funcion2 -> CLOSEPAR .)


state 214

    (89) expresion -> and generate_expresion expresion1 expresion .

    SEMICOLON       reduce using rule 89 (expresion -> and generate_expresion expresion1 expresion .)
    CLOSEPAR        reduce using rule 89 (expresion -> and generate_expresion expresion1 expresion .)
    COMMA           reduce using rule 89 (expresion -> and generate_expresion expresion1 expresion .)


state 215

    (93) and -> equal generate_and and1 and .

    OR              reduce using rule 93 (and -> equal generate_and and1 and .)
    SEMICOLON       reduce using rule 93 (and -> equal generate_and and1 and .)
    CLOSEPAR        reduce using rule 93 (and -> equal generate_and and1 and .)
    COMMA           reduce using rule 93 (and -> equal generate_and and1 and .)


state 216

    (97) equal -> compare generate_equal equal1 equal .

    AND             reduce using rule 97 (equal -> compare generate_equal equal1 equal .)
    OR              reduce using rule 97 (equal -> compare generate_equal equal1 equal .)
    SEMICOLON       reduce using rule 97 (equal -> compare generate_equal equal1 equal .)
    CLOSEPAR        reduce using rule 97 (equal -> compare generate_equal equal1 equal .)
    COMMA           reduce using rule 97 (equal -> compare generate_equal equal1 equal .)


state 217

    (109) exp -> termino generate_exp exp1 exp .

    LT              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    LE              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    GT              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    GE              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    EQ              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    NE              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    AND             reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    OR              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    SEMICOLON       reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    CLOSEPAR        reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    CLOSEBOX        reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    COMMA           reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    TO              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)
    DO              reduce using rule 109 (exp -> termino generate_exp exp1 exp .)


state 218

    (114) termino -> factor generate_termino termino1 termino .

    PLUS            reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    MINUS           reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    LT              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    LE              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    GT              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    GE              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    EQ              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    NE              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    AND             reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    OR              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    SEMICOLON       reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    CLOSEPAR        reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    CLOSEBOX        reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    COMMA           reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    TO              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)
    DO              reduce using rule 114 (termino -> factor generate_termino termino1 termino .)


state 219

    (12) vars3 -> OPENBOX exp CLOSEBOX vars4 .

    FUNCTION        reduce using rule 12 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)
    MAIN            reduce using rule 12 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)
    OPENCURLY       reduce using rule 12 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)


state 220

    (123) factor1 -> OPENBOX exp CLOSEBOX .

    MULTIPLY        reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    DIVIDE          reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    MODULO          reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    PLUS            reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    MINUS           reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    LT              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    LE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    GT              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    GE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    EQ              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    NE              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    AND             reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    OR              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    SEMICOLON       reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    CLOSEPAR        reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    CLOSEBOX        reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    COMMA           reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    TO              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)
    DO              reduce using rule 123 (factor1 -> OPENBOX exp CLOSEBOX .)


state 221

    (61) retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    READ            reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    IF              reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    ID              reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    INT             reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 61 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)


state 222

    (62) lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    READ            reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    IF              reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    ID              reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    INT             reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 62 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)


state 223

    (18) lista_ids -> ID OPENBOX exp . CLOSEBOX lista_ids1

    CLOSEBOX        shift and go to state 234


state 224

    (20) lista_ids1 -> COMMA lista_ids .

    CLOSEPAR        reduce using rule 20 (lista_ids1 -> COMMA lista_ids .)


state 225

    (63) escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    READ            reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    IF              reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    ID              reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    INT             reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 63 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)


state 226

    (66) escritura2 -> COMMA escritura1 .

    CLOSEPAR        reduce using rule 66 (escritura2 -> COMMA escritura1 .)


state 227

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN . condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (73) condicion_punto1 -> . epsilon
    (137) epsilon -> .

    OPENCURLY       reduce using rule 137 (epsilon -> .)

    condicion_punto1               shift and go to state 235
    epsilon                        shift and go to state 236

state 228

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR . while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (79) while_punto2 -> . epsilon
    (137) epsilon -> .

    DO              reduce using rule 137 (epsilon -> .)

    while_punto2                   shift and go to state 237
    epsilon                        shift and go to state 238

state 229

    (81) for -> FOR for1 IS exp for_punto1 . TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    TO              shift and go to state 239


state 230

    (84) for_punto1 -> epsilon .

    TO              reduce using rule 84 (for_punto1 -> epsilon .)


state 231

    (82) for1 -> ID OPENBOX exp CLOSEBOX .

    IS              reduce using rule 82 (for1 -> ID OPENBOX exp CLOSEBOX .)


state 232

    (54) asignacion1 -> ID OPENBOX exp CLOSEBOX IS .

    ID              reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    OPENPAR         reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    PLUS            reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    MINUS           reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    INT             reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    FLOAT           reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    CHAR            reduce using rule 54 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)


state 233

    (59) funcion2 -> COMMA funcion1 .

    SEMICOLON       reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    MULTIPLY        reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    DIVIDE          reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    MODULO          reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    PLUS            reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    MINUS           reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    LT              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    LE              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    GT              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    GE              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    EQ              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    NE              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    AND             reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    OR              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    CLOSEPAR        reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    CLOSEBOX        reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    COMMA           reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    TO              reduce using rule 59 (funcion2 -> COMMA funcion1 .)
    DO              reduce using rule 59 (funcion2 -> COMMA funcion1 .)


state 234

    (18) lista_ids -> ID OPENBOX exp CLOSEBOX . lista_ids1
    (20) lista_ids1 -> . COMMA lista_ids
    (21) lista_ids1 -> . epsilon
    (137) epsilon -> .

    COMMA           shift and go to state 199
    CLOSEPAR        reduce using rule 137 (epsilon -> .)

    lista_ids1                     shift and go to state 240
    epsilon                        shift and go to state 200

state 235

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 . OPENCURLY estatutos CLOSECURLY condicion1

    OPENCURLY       shift and go to state 241


state 236

    (73) condicion_punto1 -> epsilon .

    OPENCURLY       reduce using rule 73 (condicion_punto1 -> epsilon .)


state 237

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 . DO OPENCURLY estatutos CLOSECURLY while_punto3

    DO              shift and go to state 242


state 238

    (79) while_punto2 -> epsilon .

    DO              reduce using rule 79 (while_punto2 -> epsilon .)


state 239

    (81) for -> FOR for1 IS exp for_punto1 TO . exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (57) funcion -> . ID OPENPAR funcion1
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 101
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 243
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    funcion                        shift and go to state 102
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 240

    (18) lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1 .

    CLOSEPAR        reduce using rule 18 (lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1 .)


state 241

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY . estatutos CLOSECURLY condicion1
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    expresion                      shift and go to state 59
    estatutos                      shift and go to state 244
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 242

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO . OPENCURLY estatutos CLOSECURLY while_punto3

    OPENCURLY       shift and go to state 245


state 243

    (81) for -> FOR for1 IS exp for_punto1 TO exp . for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (85) for_punto2 -> . epsilon
    (137) epsilon -> .

    DO              reduce using rule 137 (epsilon -> .)

    for_punto2                     shift and go to state 246
    epsilon                        shift and go to state 247

state 244

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos . CLOSECURLY condicion1

    CLOSECURLY      shift and go to state 248


state 245

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY . estatutos CLOSECURLY while_punto3
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    expresion                      shift and go to state 59
    estatutos                      shift and go to state 249
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 246

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 . DO OPENCURLY estatutos CLOSECURLY for_punto3

    DO              shift and go to state 250


state 247

    (85) for_punto2 -> epsilon .

    DO              reduce using rule 85 (for_punto2 -> epsilon .)


state 248

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY . condicion1
    (71) condicion1 -> . ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (72) condicion1 -> . condicion_punto2 epsilon
    (74) condicion_punto2 -> . epsilon
    (137) epsilon -> .

    ELSE            shift and go to state 252
    RETURN          reduce using rule 137 (epsilon -> .)
    READ            reduce using rule 137 (epsilon -> .)
    WRITE           reduce using rule 137 (epsilon -> .)
    IF              reduce using rule 137 (epsilon -> .)
    WHILE           reduce using rule 137 (epsilon -> .)
    FOR             reduce using rule 137 (epsilon -> .)
    ID              reduce using rule 137 (epsilon -> .)
    OPENPAR         reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    CLOSECURLY      reduce using rule 137 (epsilon -> .)

    condicion1                     shift and go to state 251
    condicion_punto2               shift and go to state 253
    epsilon                        shift and go to state 254

state 249

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos . CLOSECURLY while_punto3

    CLOSECURLY      shift and go to state 255


state 250

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO . OPENCURLY estatutos CLOSECURLY for_punto3

    OPENCURLY       shift and go to state 256


state 251

    (70) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .

    RETURN          reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    READ            reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WRITE           reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    IF              reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WHILE           reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FOR             reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    ID              reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    OPENPAR         reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    PLUS            reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    MINUS           reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    INT             reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FLOAT           reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CHAR            reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CLOSECURLY      reduce using rule 70 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)


state 252

    (71) condicion1 -> ELSE . condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (75) condicion_punto3 -> . epsilon
    (137) epsilon -> .

    OPENCURLY       reduce using rule 137 (epsilon -> .)

    condicion_punto3               shift and go to state 257
    epsilon                        shift and go to state 258

state 253

    (72) condicion1 -> condicion_punto2 . epsilon
    (137) epsilon -> .

    RETURN          reduce using rule 137 (epsilon -> .)
    READ            reduce using rule 137 (epsilon -> .)
    WRITE           reduce using rule 137 (epsilon -> .)
    IF              reduce using rule 137 (epsilon -> .)
    WHILE           reduce using rule 137 (epsilon -> .)
    FOR             reduce using rule 137 (epsilon -> .)
    ID              reduce using rule 137 (epsilon -> .)
    OPENPAR         reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    CLOSECURLY      reduce using rule 137 (epsilon -> .)

    epsilon                        shift and go to state 259

state 254

    (74) condicion_punto2 -> epsilon .

    RETURN          reduce using rule 74 (condicion_punto2 -> epsilon .)
    READ            reduce using rule 74 (condicion_punto2 -> epsilon .)
    WRITE           reduce using rule 74 (condicion_punto2 -> epsilon .)
    IF              reduce using rule 74 (condicion_punto2 -> epsilon .)
    WHILE           reduce using rule 74 (condicion_punto2 -> epsilon .)
    FOR             reduce using rule 74 (condicion_punto2 -> epsilon .)
    ID              reduce using rule 74 (condicion_punto2 -> epsilon .)
    OPENPAR         reduce using rule 74 (condicion_punto2 -> epsilon .)
    PLUS            reduce using rule 74 (condicion_punto2 -> epsilon .)
    MINUS           reduce using rule 74 (condicion_punto2 -> epsilon .)
    INT             reduce using rule 74 (condicion_punto2 -> epsilon .)
    FLOAT           reduce using rule 74 (condicion_punto2 -> epsilon .)
    CHAR            reduce using rule 74 (condicion_punto2 -> epsilon .)
    CLOSECURLY      reduce using rule 74 (condicion_punto2 -> epsilon .)


state 255

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY . while_punto3
    (80) while_punto3 -> . epsilon
    (137) epsilon -> .

    RETURN          reduce using rule 137 (epsilon -> .)
    READ            reduce using rule 137 (epsilon -> .)
    WRITE           reduce using rule 137 (epsilon -> .)
    IF              reduce using rule 137 (epsilon -> .)
    WHILE           reduce using rule 137 (epsilon -> .)
    FOR             reduce using rule 137 (epsilon -> .)
    ID              reduce using rule 137 (epsilon -> .)
    OPENPAR         reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    CLOSECURLY      reduce using rule 137 (epsilon -> .)

    while_punto3                   shift and go to state 260
    epsilon                        shift and go to state 261

state 256

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY . estatutos CLOSECURLY for_punto3
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    exp                            shift and go to state 62
    estatutos                      shift and go to state 262
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 257

    (71) condicion1 -> ELSE condicion_punto3 . OPENCURLY estatutos CLOSECURLY condicion_punto4

    OPENCURLY       shift and go to state 263


state 258

    (75) condicion_punto3 -> epsilon .

    OPENCURLY       reduce using rule 75 (condicion_punto3 -> epsilon .)


state 259

    (72) condicion1 -> condicion_punto2 epsilon .

    RETURN          reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    READ            reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    WRITE           reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    IF              reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    WHILE           reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    FOR             reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    ID              reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    OPENPAR         reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    PLUS            reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    MINUS           reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    INT             reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    FLOAT           reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    CHAR            reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)
    CLOSECURLY      reduce using rule 72 (condicion1 -> condicion_punto2 epsilon .)


state 260

    (77) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .

    RETURN          reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    READ            reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WRITE           reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    IF              reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WHILE           reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FOR             reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    ID              reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    OPENPAR         reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    PLUS            reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    MINUS           reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    INT             reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FLOAT           reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CHAR            reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CLOSECURLY      reduce using rule 77 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)


state 261

    (80) while_punto3 -> epsilon .

    RETURN          reduce using rule 80 (while_punto3 -> epsilon .)
    READ            reduce using rule 80 (while_punto3 -> epsilon .)
    WRITE           reduce using rule 80 (while_punto3 -> epsilon .)
    IF              reduce using rule 80 (while_punto3 -> epsilon .)
    WHILE           reduce using rule 80 (while_punto3 -> epsilon .)
    FOR             reduce using rule 80 (while_punto3 -> epsilon .)
    ID              reduce using rule 80 (while_punto3 -> epsilon .)
    OPENPAR         reduce using rule 80 (while_punto3 -> epsilon .)
    PLUS            reduce using rule 80 (while_punto3 -> epsilon .)
    MINUS           reduce using rule 80 (while_punto3 -> epsilon .)
    INT             reduce using rule 80 (while_punto3 -> epsilon .)
    FLOAT           reduce using rule 80 (while_punto3 -> epsilon .)
    CHAR            reduce using rule 80 (while_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 80 (while_punto3 -> epsilon .)


state 262

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos . CLOSECURLY for_punto3

    CLOSECURLY      shift and go to state 264


state 263

    (71) condicion1 -> ELSE condicion_punto3 OPENCURLY . estatutos CLOSECURLY condicion_punto4
    (42) estatutos -> . asignacion estatutos1
    (43) estatutos -> . llamada estatutos1
    (44) estatutos -> . retorno estatutos1
    (45) estatutos -> . lectura estatutos1
    (46) estatutos -> . escritura estatutos1
    (47) estatutos -> . condicion estatutos1
    (48) estatutos -> . while estatutos1
    (49) estatutos -> . for estatutos1
    (50) estatutos -> . est_exp estatutos1
    (53) asignacion -> . asignacion1 expresion SEMICOLON
    (56) llamada -> . funcion SEMICOLON
    (61) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (62) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (63) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (70) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (77) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (81) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) est_exp -> . expresion SEMICOLON
    (54) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (55) asignacion1 -> . ID IS
    (57) funcion -> . ID OPENPAR funcion1
    (88) expresion -> . and generate_expresion
    (89) expresion -> . and generate_expresion expresion1 expresion
    (92) and -> . equal generate_and
    (93) and -> . equal generate_and and1 and
    (96) equal -> . compare generate_equal
    (97) equal -> . compare generate_equal equal1 equal
    (101) compare -> . exp generate_compare
    (102) compare -> . exp generate_compare compare1 compare
    (108) exp -> . termino generate_exp
    (109) exp -> . termino generate_exp exp1 exp
    (113) termino -> . factor generate_termino
    (114) termino -> . factor generate_termino termino1 termino
    (119) factor -> . ID factor1
    (120) factor -> . openpar expresion closepar
    (121) factor -> . funcion
    (122) factor -> . factor2 varcte
    (128) openpar -> . OPENPAR
    (125) factor2 -> . PLUS
    (126) factor2 -> . MINUS
    (127) factor2 -> . epsilon
    (137) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 61
    READ            shift and go to state 63
    WRITE           shift and go to state 64
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    ID              shift and go to state 68
    OPENPAR         shift and go to state 45
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)

  ! ID              [ reduce using rule 137 (epsilon -> .) ]

    estatutos                      shift and go to state 265
    asignacion                     shift and go to state 49
    llamada                        shift and go to state 50
    retorno                        shift and go to state 51
    lectura                        shift and go to state 52
    escritura                      shift and go to state 53
    condicion                      shift and go to state 54
    while                          shift and go to state 55
    for                            shift and go to state 56
    est_exp                        shift and go to state 57
    asignacion1                    shift and go to state 58
    expresion                      shift and go to state 59
    funcion                        shift and go to state 60
    exp                            shift and go to state 62
    and                            shift and go to state 69
    equal                          shift and go to state 70
    compare                        shift and go to state 71
    termino                        shift and go to state 72
    factor                         shift and go to state 73
    openpar                        shift and go to state 74
    factor2                        shift and go to state 75
    epsilon                        shift and go to state 103

state 264

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY . for_punto3
    (86) for_punto3 -> . epsilon
    (137) epsilon -> .

    RETURN          reduce using rule 137 (epsilon -> .)
    READ            reduce using rule 137 (epsilon -> .)
    WRITE           reduce using rule 137 (epsilon -> .)
    IF              reduce using rule 137 (epsilon -> .)
    WHILE           reduce using rule 137 (epsilon -> .)
    FOR             reduce using rule 137 (epsilon -> .)
    ID              reduce using rule 137 (epsilon -> .)
    OPENPAR         reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    CLOSECURLY      reduce using rule 137 (epsilon -> .)

    for_punto3                     shift and go to state 266
    epsilon                        shift and go to state 267

state 265

    (71) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos . CLOSECURLY condicion_punto4

    CLOSECURLY      shift and go to state 268


state 266

    (81) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .

    RETURN          reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    READ            reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WRITE           reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    IF              reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WHILE           reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FOR             reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    ID              reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    OPENPAR         reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    PLUS            reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    MINUS           reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    INT             reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FLOAT           reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CHAR            reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CLOSECURLY      reduce using rule 81 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)


state 267

    (86) for_punto3 -> epsilon .

    RETURN          reduce using rule 86 (for_punto3 -> epsilon .)
    READ            reduce using rule 86 (for_punto3 -> epsilon .)
    WRITE           reduce using rule 86 (for_punto3 -> epsilon .)
    IF              reduce using rule 86 (for_punto3 -> epsilon .)
    WHILE           reduce using rule 86 (for_punto3 -> epsilon .)
    FOR             reduce using rule 86 (for_punto3 -> epsilon .)
    ID              reduce using rule 86 (for_punto3 -> epsilon .)
    OPENPAR         reduce using rule 86 (for_punto3 -> epsilon .)
    PLUS            reduce using rule 86 (for_punto3 -> epsilon .)
    MINUS           reduce using rule 86 (for_punto3 -> epsilon .)
    INT             reduce using rule 86 (for_punto3 -> epsilon .)
    FLOAT           reduce using rule 86 (for_punto3 -> epsilon .)
    CHAR            reduce using rule 86 (for_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 86 (for_punto3 -> epsilon .)


state 268

    (71) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY . condicion_punto4
    (76) condicion_punto4 -> . epsilon
    (137) epsilon -> .

    RETURN          reduce using rule 137 (epsilon -> .)
    READ            reduce using rule 137 (epsilon -> .)
    WRITE           reduce using rule 137 (epsilon -> .)
    IF              reduce using rule 137 (epsilon -> .)
    WHILE           reduce using rule 137 (epsilon -> .)
    FOR             reduce using rule 137 (epsilon -> .)
    ID              reduce using rule 137 (epsilon -> .)
    OPENPAR         reduce using rule 137 (epsilon -> .)
    PLUS            reduce using rule 137 (epsilon -> .)
    MINUS           reduce using rule 137 (epsilon -> .)
    INT             reduce using rule 137 (epsilon -> .)
    FLOAT           reduce using rule 137 (epsilon -> .)
    CHAR            reduce using rule 137 (epsilon -> .)
    CLOSECURLY      reduce using rule 137 (epsilon -> .)

    condicion_punto4               shift and go to state 269
    epsilon                        shift and go to state 270

state 269

    (71) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .

    RETURN          reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    READ            reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WRITE           reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    IF              reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WHILE           reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FOR             reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    ID              reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    OPENPAR         reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    PLUS            reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    MINUS           reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    INT             reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FLOAT           reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CHAR            reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CLOSECURLY      reduce using rule 71 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)


state 270

    (76) condicion_punto4 -> epsilon .

    RETURN          reduce using rule 76 (condicion_punto4 -> epsilon .)
    READ            reduce using rule 76 (condicion_punto4 -> epsilon .)
    WRITE           reduce using rule 76 (condicion_punto4 -> epsilon .)
    IF              reduce using rule 76 (condicion_punto4 -> epsilon .)
    WHILE           reduce using rule 76 (condicion_punto4 -> epsilon .)
    FOR             reduce using rule 76 (condicion_punto4 -> epsilon .)
    ID              reduce using rule 76 (condicion_punto4 -> epsilon .)
    OPENPAR         reduce using rule 76 (condicion_punto4 -> epsilon .)
    PLUS            reduce using rule 76 (condicion_punto4 -> epsilon .)
    MINUS           reduce using rule 76 (condicion_punto4 -> epsilon .)
    INT             reduce using rule 76 (condicion_punto4 -> epsilon .)
    FLOAT           reduce using rule 76 (condicion_punto4 -> epsilon .)
    CHAR            reduce using rule 76 (condicion_punto4 -> epsilon .)
    CLOSECURLY      reduce using rule 76 (condicion_punto4 -> epsilon .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 53 resolved as shift
WARNING: shift/reduce conflict for READ in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 55 resolved as shift
WARNING: shift/reduce conflict for READ in state 55 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 56 resolved as shift
WARNING: shift/reduce conflict for READ in state 56 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 57 resolved as shift
WARNING: shift/reduce conflict for READ in state 57 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for ID in state 166 resolved as shift
WARNING: shift/reduce conflict for ID in state 167 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 176 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 182 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 203 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for ID in state 239 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 256 resolved as shift
WARNING: shift/reduce conflict for ID in state 263 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (programa2 -> epsilon)
WARNING: rejected rule (funciones -> epsilon) in state 7
WARNING: reduce/reduce conflict in state 91 resolved using rule (estatutos1 -> epsilon)
WARNING: rejected rule (factor2 -> epsilon) in state 91
