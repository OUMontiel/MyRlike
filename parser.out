Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
Rule 2     programa1 -> ID SEMICOLON vars
Rule 3     programa1 -> ID SEMICOLON
Rule 4     programa2 -> funciones
Rule 5     programa2 -> epsilon
Rule 6     programa3 -> estatutos
Rule 7     programa3 -> epsilon
Rule 8     programa_punto1 -> epsilon
Rule 9     main -> MAIN
Rule 10    vars -> VARS vars1
Rule 11    vars1 -> tipo COLON vars2
Rule 12    vars2 -> ID vars3
Rule 13    vars3 -> OPENBOX exp CLOSEBOX vars4
Rule 14    vars3 -> vars4
Rule 15    vars4 -> SEMICOLON vars5
Rule 16    vars4 -> COMMA vars2
Rule 17    vars5 -> vars1
Rule 18    vars5 -> epsilon
Rule 19    lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1
Rule 20    lista_ids -> ID lista_ids1
Rule 21    lista_ids1 -> COMMA lista_ids
Rule 22    lista_ids1 -> epsilon
Rule 23    tipo -> TYPEFLOAT
Rule 24    tipo -> TYPEINT
Rule 25    tipo -> TYPECHAR
Rule 26    tipo_void -> TYPEVOID
Rule 27    funciones -> FUNCTION funciones1
Rule 28    funciones -> epsilon
Rule 29    funciones1 -> tipo funciones2 funciones3
Rule 30    funciones1 -> tipo_void funciones2 funciones3
Rule 31    funciones2 -> ID OPENPAR
Rule 32    funciones3 -> parameters funciones4
Rule 33    funciones3 -> funciones4
Rule 34    funciones4 -> CLOSEPAR funciones5
Rule 35    funciones5 -> vars funciones_punto1 OPENCURLY funciones6
Rule 36    funciones5 -> funciones_punto1 OPENCURLY funciones6
Rule 37    funciones6 -> estatutos funciones6
Rule 38    funciones6 -> CLOSECURLY funciones_punto2 funciones
Rule 39    funciones_punto1 -> epsilon
Rule 40    funciones_punto2 -> epsilon
Rule 41    parameters -> tipo ID parameters1
Rule 42    parameters1 -> COMMA parameters
Rule 43    parameters1 -> epsilon
Rule 44    estatutos -> asignacion estatutos1
Rule 45    estatutos -> llamada estatutos1
Rule 46    estatutos -> retorno estatutos1
Rule 47    estatutos -> lectura estatutos1
Rule 48    estatutos -> escritura estatutos1
Rule 49    estatutos -> condicion estatutos1
Rule 50    estatutos -> while estatutos1
Rule 51    estatutos -> for estatutos1
Rule 52    estatutos -> est_exp estatutos1
Rule 53    estatutos1 -> estatutos
Rule 54    estatutos1 -> epsilon
Rule 55    asignacion -> asignacion1 expresion SEMICOLON
Rule 56    asignacion1 -> ID OPENBOX exp CLOSEBOX IS
Rule 57    asignacion1 -> ID IS
Rule 58    llamada -> funcion SEMICOLON
Rule 59    funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3
Rule 60    funcion1 -> exp funcion_punto2 funcion2
Rule 61    funcion2 -> COMMA funcion1
Rule 62    funcion2 -> CLOSEPAR
Rule 63    funcion_punto1 -> ID
Rule 64    funcion_punto2 -> epsilon
Rule 65    funcion_punto3 -> epsilon
Rule 66    retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON
Rule 67    lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON
Rule 68    escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
Rule 69    escritura1 -> escritura_string escritura2
Rule 70    escritura1 -> escritura_expresion escritura2
Rule 71    escritura2 -> COMMA escritura1
Rule 72    escritura2 -> epsilon
Rule 73    escritura_string -> STRING
Rule 74    escritura_expresion -> expresion
Rule 75    condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
Rule 76    condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
Rule 77    condicion1 -> condicion_punto2 epsilon
Rule 78    condicion_punto1 -> epsilon
Rule 79    condicion_punto2 -> epsilon
Rule 80    condicion_punto3 -> epsilon
Rule 81    condicion_punto4 -> epsilon
Rule 82    while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
Rule 83    while_punto1 -> epsilon
Rule 84    while_punto2 -> epsilon
Rule 85    while_punto3 -> epsilon
Rule 86    for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
Rule 87    for1 -> ID OPENBOX exp CLOSEBOX
Rule 88    for1 -> ID
Rule 89    for_punto1 -> epsilon
Rule 90    for_punto2 -> epsilon
Rule 91    for_punto3 -> epsilon
Rule 92    est_exp -> expresion SEMICOLON
Rule 93    expresion -> and generate_expresion
Rule 94    expresion -> and generate_expresion expresion1 expresion
Rule 95    expresion1 -> OR
Rule 96    generate_expresion -> epsilon
Rule 97    and -> equal generate_and
Rule 98    and -> equal generate_and and1 and
Rule 99    and1 -> AND
Rule 100   generate_and -> epsilon
Rule 101   equal -> compare generate_equal
Rule 102   equal -> compare generate_equal equal1 equal
Rule 103   equal1 -> EQ
Rule 104   equal1 -> NE
Rule 105   generate_equal -> epsilon
Rule 106   compare -> exp generate_compare
Rule 107   compare -> exp generate_compare compare1 compare
Rule 108   compare1 -> LT
Rule 109   compare1 -> LE
Rule 110   compare1 -> GT
Rule 111   compare1 -> GE
Rule 112   generate_compare -> epsilon
Rule 113   exp -> termino generate_exp
Rule 114   exp -> termino generate_exp exp1 exp
Rule 115   exp1 -> PLUS
Rule 116   exp1 -> MINUS
Rule 117   generate_exp -> epsilon
Rule 118   termino -> factor generate_termino
Rule 119   termino -> factor generate_termino termino1 termino
Rule 120   termino1 -> MULTIPLY
Rule 121   termino1 -> DIVIDE
Rule 122   termino1 -> MODULO
Rule 123   generate_termino -> epsilon
Rule 124   factor -> ID factor1
Rule 125   factor -> openpar expresion closepar
Rule 126   factor -> funcion
Rule 127   factor -> factor2 varcte
Rule 128   factor1 -> OPENBOX exp CLOSEBOX
Rule 129   factor1 -> epsilon
Rule 130   factor2 -> PLUS
Rule 131   factor2 -> MINUS
Rule 132   factor2 -> epsilon
Rule 133   openpar -> OPENPAR
Rule 134   closepar -> CLOSEPAR
Rule 135   varcte -> ID
Rule 136   varcte -> int
Rule 137   varcte -> float
Rule 138   varcte -> char
Rule 139   int -> INT
Rule 140   float -> FLOAT
Rule 141   char -> CHAR
Rule 142   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 99
CHAR                 : 141
CLOSEBOX             : 13 19 56 87 128
CLOSECURLY           : 1 38 75 76 82 86
CLOSEPAR             : 1 34 62 66 67 68 75 82 134
COLON                : 11
COMMA                : 16 21 42 61 71
DIVIDE               : 121
DO                   : 82 86
ELSE                 : 76
EQ                   : 103
FLOAT                : 140
FOR                  : 86
FUNCTION             : 27
GE                   : 111
GT                   : 110
ID                   : 2 3 12 19 20 31 41 56 57 63 87 88 124 135
IF                   : 75
INT                  : 139
IS                   : 56 57 86
LE                   : 109
LT                   : 108
MAIN                 : 9
MINUS                : 116 131
MODULO               : 122
MULTIPLY             : 120
NE                   : 104
OPENBOX              : 13 19 56 87 128
OPENCURLY            : 1 35 36 75 76 82 86
OPENPAR              : 1 31 59 66 67 68 75 82 133
OR                   : 95
PLUS                 : 115 130
PROGRAM              : 1
READ                 : 67
RETURN               : 66
SEMICOLON            : 2 3 15 55 58 66 67 68 92
STRING               : 73
THEN                 : 75
TO                   : 86
TYPECHAR             : 25
TYPEFLOAT            : 23
TYPEINT              : 24
TYPEVOID             : 26
VARS                 : 10
WHILE                : 82
WRITE                : 68
error                : 

Nonterminals, with rules where they appear

and                  : 93 94 98
and1                 : 98
asignacion           : 44
asignacion1          : 55
char                 : 138
closepar             : 125
compare              : 101 102 107
compare1             : 107
condicion            : 49
condicion1           : 75
condicion_punto1     : 75
condicion_punto2     : 77
condicion_punto3     : 76
condicion_punto4     : 76
epsilon              : 5 7 8 18 22 28 39 40 43 54 64 65 72 77 78 79 80 81 83 84 85 89 90 91 96 100 105 112 117 123 129 132
equal                : 97 98 102
equal1               : 102
escritura            : 48
escritura1           : 68 71
escritura2           : 69 70
escritura_expresion  : 70
escritura_string     : 69
est_exp              : 52
estatutos            : 6 37 53 75 76 82 86
estatutos1           : 44 45 46 47 48 49 50 51 52
exp                  : 13 19 56 60 66 86 86 87 106 107 114 128
exp1                 : 114
expresion            : 55 74 75 82 92 94 125
expresion1           : 94
factor               : 118 119
factor1              : 124
factor2              : 127
float                : 137
for                  : 51
for1                 : 86
for_punto1           : 86
for_punto2           : 86
for_punto3           : 86
funcion              : 58 126
funcion1             : 59 61
funcion2             : 60
funcion_punto1       : 59
funcion_punto2       : 60
funcion_punto3       : 59
funciones            : 4 38
funciones1           : 27
funciones2           : 29 30
funciones3           : 29 30
funciones4           : 32 33
funciones5           : 34
funciones6           : 35 36 37
funciones_punto1     : 35 36
funciones_punto2     : 38
generate_and         : 97 98
generate_compare     : 106 107
generate_equal       : 101 102
generate_exp         : 113 114
generate_expresion   : 93 94
generate_termino     : 118 119
int                  : 136
lectura              : 47
lista_ids            : 21 67
lista_ids1           : 19 20
llamada              : 45
main                 : 1
openpar              : 125
parameters           : 32 42
parameters1          : 41
programa             : 0
programa1            : 1
programa2            : 1
programa3            : 1
programa_punto1      : 1
retorno              : 46
termino              : 113 114 119
termino1             : 119
tipo                 : 11 29 41
tipo_void            : 30
varcte               : 127
vars                 : 2 35
vars1                : 10 17
vars2                : 11 16
vars3                : 12
vars4                : 13 14
vars5                : 15
while                : 50
while_punto1         : 82
while_punto2         : 82
while_punto3         : 82

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (8) programa_punto1 -> . epsilon
    (142) epsilon -> .

    ID              reduce using rule 142 (epsilon -> .)

    programa_punto1                shift and go to state 3
    epsilon                        shift and go to state 4

state 3

    (1) programa -> PROGRAM programa_punto1 . programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (2) programa1 -> . ID SEMICOLON vars
    (3) programa1 -> . ID SEMICOLON

    ID              shift and go to state 6

    programa1                      shift and go to state 5

state 4

    (8) programa_punto1 -> epsilon .

    ID              reduce using rule 8 (programa_punto1 -> epsilon .)


state 5

    (1) programa -> PROGRAM programa_punto1 programa1 . programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (4) programa2 -> . funciones
    (5) programa2 -> . epsilon
    (27) funciones -> . FUNCTION funciones1
    (28) funciones -> . epsilon
    (142) epsilon -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 142 (epsilon -> .)

    programa2                      shift and go to state 7
    funciones                      shift and go to state 8
    epsilon                        shift and go to state 9

state 6

    (2) programa1 -> ID . SEMICOLON vars
    (3) programa1 -> ID . SEMICOLON

    SEMICOLON       shift and go to state 11


state 7

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 . main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY
    (9) main -> . MAIN

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (4) programa2 -> funciones .

    MAIN            reduce using rule 4 (programa2 -> funciones .)


state 9

    (5) programa2 -> epsilon .
    (28) funciones -> epsilon .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (programa2 -> epsilon .)
    MAIN            reduce using rule 5 (programa2 -> epsilon .)

  ! MAIN            [ reduce using rule 28 (funciones -> epsilon .) ]


state 10

    (27) funciones -> FUNCTION . funciones1
    (29) funciones1 -> . tipo funciones2 funciones3
    (30) funciones1 -> . tipo_void funciones2 funciones3
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR
    (26) tipo_void -> . TYPEVOID

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19
    TYPEVOID        shift and go to state 20

    funciones1                     shift and go to state 14
    tipo                           shift and go to state 15
    tipo_void                      shift and go to state 16

state 11

    (2) programa1 -> ID SEMICOLON . vars
    (3) programa1 -> ID SEMICOLON .
    (10) vars -> . VARS vars1

    FUNCTION        reduce using rule 3 (programa1 -> ID SEMICOLON .)
    MAIN            reduce using rule 3 (programa1 -> ID SEMICOLON .)
    VARS            shift and go to state 22

    vars                           shift and go to state 21

state 12

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main . OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY

    OPENPAR         shift and go to state 23


state 13

    (9) main -> MAIN .

    OPENPAR         reduce using rule 9 (main -> MAIN .)


state 14

    (27) funciones -> FUNCTION funciones1 .

    MAIN            reduce using rule 27 (funciones -> FUNCTION funciones1 .)


state 15

    (29) funciones1 -> tipo . funciones2 funciones3
    (31) funciones2 -> . ID OPENPAR

    ID              shift and go to state 25

    funciones2                     shift and go to state 24

state 16

    (30) funciones1 -> tipo_void . funciones2 funciones3
    (31) funciones2 -> . ID OPENPAR

    ID              shift and go to state 25

    funciones2                     shift and go to state 26

state 17

    (23) tipo -> TYPEFLOAT .

    ID              reduce using rule 23 (tipo -> TYPEFLOAT .)
    COLON           reduce using rule 23 (tipo -> TYPEFLOAT .)


state 18

    (24) tipo -> TYPEINT .

    ID              reduce using rule 24 (tipo -> TYPEINT .)
    COLON           reduce using rule 24 (tipo -> TYPEINT .)


state 19

    (25) tipo -> TYPECHAR .

    ID              reduce using rule 25 (tipo -> TYPECHAR .)
    COLON           reduce using rule 25 (tipo -> TYPECHAR .)


state 20

    (26) tipo_void -> TYPEVOID .

    ID              reduce using rule 26 (tipo_void -> TYPEVOID .)


state 21

    (2) programa1 -> ID SEMICOLON vars .

    FUNCTION        reduce using rule 2 (programa1 -> ID SEMICOLON vars .)
    MAIN            reduce using rule 2 (programa1 -> ID SEMICOLON vars .)


state 22

    (10) vars -> VARS . vars1
    (11) vars1 -> . tipo COLON vars2
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    vars1                          shift and go to state 27
    tipo                           shift and go to state 28

state 23

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR . CLOSEPAR OPENCURLY programa3 CLOSECURLY

    CLOSEPAR        shift and go to state 29


state 24

    (29) funciones1 -> tipo funciones2 . funciones3
    (32) funciones3 -> . parameters funciones4
    (33) funciones3 -> . funciones4
    (41) parameters -> . tipo ID parameters1
    (34) funciones4 -> . CLOSEPAR funciones5
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 34
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    tipo                           shift and go to state 30
    funciones3                     shift and go to state 31
    parameters                     shift and go to state 32
    funciones4                     shift and go to state 33

state 25

    (31) funciones2 -> ID . OPENPAR

    OPENPAR         shift and go to state 35


state 26

    (30) funciones1 -> tipo_void funciones2 . funciones3
    (32) funciones3 -> . parameters funciones4
    (33) funciones3 -> . funciones4
    (41) parameters -> . tipo ID parameters1
    (34) funciones4 -> . CLOSEPAR funciones5
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR

    CLOSEPAR        shift and go to state 34
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    funciones3                     shift and go to state 36
    parameters                     shift and go to state 32
    funciones4                     shift and go to state 33
    tipo                           shift and go to state 30

state 27

    (10) vars -> VARS vars1 .

    FUNCTION        reduce using rule 10 (vars -> VARS vars1 .)
    MAIN            reduce using rule 10 (vars -> VARS vars1 .)
    OPENCURLY       reduce using rule 10 (vars -> VARS vars1 .)


state 28

    (11) vars1 -> tipo . COLON vars2

    COLON           shift and go to state 37


state 29

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR . OPENCURLY programa3 CLOSECURLY

    OPENCURLY       shift and go to state 38


state 30

    (41) parameters -> tipo . ID parameters1

    ID              shift and go to state 39


state 31

    (29) funciones1 -> tipo funciones2 funciones3 .

    MAIN            reduce using rule 29 (funciones1 -> tipo funciones2 funciones3 .)


state 32

    (32) funciones3 -> parameters . funciones4
    (34) funciones4 -> . CLOSEPAR funciones5

    CLOSEPAR        shift and go to state 34

    funciones4                     shift and go to state 40

state 33

    (33) funciones3 -> funciones4 .

    MAIN            reduce using rule 33 (funciones3 -> funciones4 .)


state 34

    (34) funciones4 -> CLOSEPAR . funciones5
    (35) funciones5 -> . vars funciones_punto1 OPENCURLY funciones6
    (36) funciones5 -> . funciones_punto1 OPENCURLY funciones6
    (10) vars -> . VARS vars1
    (39) funciones_punto1 -> . epsilon
    (142) epsilon -> .

    VARS            shift and go to state 22
    OPENCURLY       reduce using rule 142 (epsilon -> .)

    funciones5                     shift and go to state 41
    vars                           shift and go to state 42
    funciones_punto1               shift and go to state 43
    epsilon                        shift and go to state 44

state 35

    (31) funciones2 -> ID OPENPAR .

    CLOSEPAR        reduce using rule 31 (funciones2 -> ID OPENPAR .)
    TYPEFLOAT       reduce using rule 31 (funciones2 -> ID OPENPAR .)
    TYPEINT         reduce using rule 31 (funciones2 -> ID OPENPAR .)
    TYPECHAR        reduce using rule 31 (funciones2 -> ID OPENPAR .)


state 36

    (30) funciones1 -> tipo_void funciones2 funciones3 .

    MAIN            reduce using rule 30 (funciones1 -> tipo_void funciones2 funciones3 .)


state 37

    (11) vars1 -> tipo COLON . vars2
    (12) vars2 -> . ID vars3

    ID              shift and go to state 46

    vars2                          shift and go to state 45

state 38

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY . programa3 CLOSECURLY
    (6) programa3 -> . estatutos
    (7) programa3 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    programa3                      shift and go to state 48
    estatutos                      shift and go to state 49
    epsilon                        shift and go to state 50
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 39

    (41) parameters -> tipo ID . parameters1
    (42) parameters1 -> . COMMA parameters
    (43) parameters1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 82
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    parameters1                    shift and go to state 81
    epsilon                        shift and go to state 83

state 40

    (32) funciones3 -> parameters funciones4 .

    MAIN            reduce using rule 32 (funciones3 -> parameters funciones4 .)


state 41

    (34) funciones4 -> CLOSEPAR funciones5 .

    MAIN            reduce using rule 34 (funciones4 -> CLOSEPAR funciones5 .)


state 42

    (35) funciones5 -> vars . funciones_punto1 OPENCURLY funciones6
    (39) funciones_punto1 -> . epsilon
    (142) epsilon -> .

    OPENCURLY       reduce using rule 142 (epsilon -> .)

    funciones_punto1               shift and go to state 84
    epsilon                        shift and go to state 44

state 43

    (36) funciones5 -> funciones_punto1 . OPENCURLY funciones6

    OPENCURLY       shift and go to state 85


state 44

    (39) funciones_punto1 -> epsilon .

    OPENCURLY       reduce using rule 39 (funciones_punto1 -> epsilon .)


state 45

    (11) vars1 -> tipo COLON vars2 .

    FUNCTION        reduce using rule 11 (vars1 -> tipo COLON vars2 .)
    MAIN            reduce using rule 11 (vars1 -> tipo COLON vars2 .)
    OPENCURLY       reduce using rule 11 (vars1 -> tipo COLON vars2 .)


state 46

    (12) vars2 -> ID . vars3
    (13) vars3 -> . OPENBOX exp CLOSEBOX vars4
    (14) vars3 -> . vars4
    (15) vars4 -> . SEMICOLON vars5
    (16) vars4 -> . COMMA vars2

    OPENBOX         shift and go to state 87
    SEMICOLON       shift and go to state 89
    COMMA           shift and go to state 90

    vars3                          shift and go to state 86
    vars4                          shift and go to state 88

state 47

    (133) openpar -> OPENPAR .

    ID              reduce using rule 133 (openpar -> OPENPAR .)
    OPENPAR         reduce using rule 133 (openpar -> OPENPAR .)
    PLUS            reduce using rule 133 (openpar -> OPENPAR .)
    MINUS           reduce using rule 133 (openpar -> OPENPAR .)
    INT             reduce using rule 133 (openpar -> OPENPAR .)
    FLOAT           reduce using rule 133 (openpar -> OPENPAR .)
    CHAR            reduce using rule 133 (openpar -> OPENPAR .)


state 48

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 . CLOSECURLY

    CLOSECURLY      shift and go to state 91


state 49

    (6) programa3 -> estatutos .

    CLOSECURLY      reduce using rule 6 (programa3 -> estatutos .)


state 50

    (7) programa3 -> epsilon .
    (132) factor2 -> epsilon .

    CLOSECURLY      reduce using rule 7 (programa3 -> epsilon .)
    ID              reduce using rule 132 (factor2 -> epsilon .)
    INT             reduce using rule 132 (factor2 -> epsilon .)
    FLOAT           reduce using rule 132 (factor2 -> epsilon .)
    CHAR            reduce using rule 132 (factor2 -> epsilon .)


state 51

    (44) estatutos -> asignacion . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    asignacion                     shift and go to state 51
    estatutos1                     shift and go to state 92
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 52

    (45) estatutos -> llamada . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    llamada                        shift and go to state 52
    estatutos1                     shift and go to state 95
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 53

    (46) estatutos -> retorno . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    retorno                        shift and go to state 53
    estatutos1                     shift and go to state 96
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 54

    (47) estatutos -> lectura . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    lectura                        shift and go to state 54
    estatutos1                     shift and go to state 97
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 55

    (48) estatutos -> escritura . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    escritura                      shift and go to state 55
    estatutos1                     shift and go to state 98
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 56

    (49) estatutos -> condicion . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    condicion                      shift and go to state 56
    estatutos1                     shift and go to state 99
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 57

    (50) estatutos -> while . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    while                          shift and go to state 57
    estatutos1                     shift and go to state 100
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 58

    (51) estatutos -> for . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    for                            shift and go to state 58
    estatutos1                     shift and go to state 101
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 59

    (52) estatutos -> est_exp . estatutos1
    (53) estatutos1 -> . estatutos
    (54) estatutos1 -> . epsilon
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (142) epsilon -> .
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for OPENPAR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CLOSECURLY      reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80

  ! RETURN          [ reduce using rule 142 (epsilon -> .) ]
  ! READ            [ reduce using rule 142 (epsilon -> .) ]
  ! WRITE           [ reduce using rule 142 (epsilon -> .) ]
  ! IF              [ reduce using rule 142 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 142 (epsilon -> .) ]
  ! FOR             [ reduce using rule 142 (epsilon -> .) ]
  ! ID              [ reduce using rule 142 (epsilon -> .) ]
  ! OPENPAR         [ reduce using rule 142 (epsilon -> .) ]
  ! PLUS            [ reduce using rule 142 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 142 (epsilon -> .) ]

    est_exp                        shift and go to state 59
    estatutos1                     shift and go to state 102
    estatutos                      shift and go to state 93
    epsilon                        shift and go to state 94
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78

state 60

    (55) asignacion -> asignacion1 . expresion SEMICOLON
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    expresion                      shift and go to state 103
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 61

    (92) est_exp -> expresion . SEMICOLON

    SEMICOLON       shift and go to state 107


state 62

    (58) llamada -> funcion . SEMICOLON
    (126) factor -> funcion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 108
    MULTIPLY        reduce using rule 126 (factor -> funcion .)
    DIVIDE          reduce using rule 126 (factor -> funcion .)
    MODULO          reduce using rule 126 (factor -> funcion .)
    PLUS            reduce using rule 126 (factor -> funcion .)
    MINUS           reduce using rule 126 (factor -> funcion .)
    LT              reduce using rule 126 (factor -> funcion .)
    LE              reduce using rule 126 (factor -> funcion .)
    GT              reduce using rule 126 (factor -> funcion .)
    GE              reduce using rule 126 (factor -> funcion .)
    EQ              reduce using rule 126 (factor -> funcion .)
    NE              reduce using rule 126 (factor -> funcion .)
    AND             reduce using rule 126 (factor -> funcion .)
    OR              reduce using rule 126 (factor -> funcion .)

  ! SEMICOLON       [ reduce using rule 126 (factor -> funcion .) ]


state 63

    (66) retorno -> RETURN . OPENPAR exp CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 109


state 64

    (106) compare -> exp . generate_compare
    (107) compare -> exp . generate_compare compare1 compare
    (112) generate_compare -> . epsilon
    (142) epsilon -> .

    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)

    generate_compare               shift and go to state 110
    epsilon                        shift and go to state 111

state 65

    (67) lectura -> READ . OPENPAR lista_ids CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 112


state 66

    (68) escritura -> WRITE . OPENPAR escritura1 CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 113


state 67

    (75) condicion -> IF . OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    OPENPAR         shift and go to state 114


state 68

    (82) while -> WHILE . while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (83) while_punto1 -> . epsilon
    (142) epsilon -> .

    OPENPAR         reduce using rule 142 (epsilon -> .)

    while_punto1                   shift and go to state 115
    epsilon                        shift and go to state 116

state 69

    (86) for -> FOR . for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (87) for1 -> . ID OPENBOX exp CLOSEBOX
    (88) for1 -> . ID

    ID              shift and go to state 118

    for1                           shift and go to state 117

state 70

    (56) asignacion1 -> ID . OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> ID . IS
    (63) funcion_punto1 -> ID .
    (124) factor -> ID . factor1
    (128) factor1 -> . OPENBOX exp CLOSEBOX
    (129) factor1 -> . epsilon
    (142) epsilon -> .

    OPENBOX         shift and go to state 119
    IS              shift and go to state 120
    OPENPAR         reduce using rule 63 (funcion_punto1 -> ID .)
    MULTIPLY        reduce using rule 142 (epsilon -> .)
    DIVIDE          reduce using rule 142 (epsilon -> .)
    MODULO          reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)

    factor1                        shift and go to state 121
    epsilon                        shift and go to state 122

state 71

    (59) funcion -> funcion_punto1 . OPENPAR funcion1 funcion_punto3

    OPENPAR         shift and go to state 123


state 72

    (93) expresion -> and . generate_expresion
    (94) expresion -> and . generate_expresion expresion1 expresion
    (96) generate_expresion -> . epsilon
    (142) epsilon -> .

    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)

    generate_expresion             shift and go to state 124
    epsilon                        shift and go to state 125

state 73

    (97) and -> equal . generate_and
    (98) and -> equal . generate_and and1 and
    (100) generate_and -> . epsilon
    (142) epsilon -> .

    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)

    generate_and                   shift and go to state 126
    epsilon                        shift and go to state 127

state 74

    (101) equal -> compare . generate_equal
    (102) equal -> compare . generate_equal equal1 equal
    (105) generate_equal -> . epsilon
    (142) epsilon -> .

    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)

    generate_equal                 shift and go to state 128
    epsilon                        shift and go to state 129

state 75

    (113) exp -> termino . generate_exp
    (114) exp -> termino . generate_exp exp1 exp
    (117) generate_exp -> . epsilon
    (142) epsilon -> .

    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    CLOSEBOX        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)

    generate_exp                   shift and go to state 130
    epsilon                        shift and go to state 131

state 76

    (118) termino -> factor . generate_termino
    (119) termino -> factor . generate_termino termino1 termino
    (123) generate_termino -> . epsilon
    (142) epsilon -> .

    MULTIPLY        reduce using rule 142 (epsilon -> .)
    DIVIDE          reduce using rule 142 (epsilon -> .)
    MODULO          reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    CLOSEBOX        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)

    generate_termino               shift and go to state 132
    epsilon                        shift and go to state 133

state 77

    (125) factor -> openpar . expresion closepar
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    openpar                        shift and go to state 77
    expresion                      shift and go to state 134
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 78

    (127) factor -> factor2 . varcte
    (135) varcte -> . ID
    (136) varcte -> . int
    (137) varcte -> . float
    (138) varcte -> . char
    (139) int -> . INT
    (140) float -> . FLOAT
    (141) char -> . CHAR

    ID              shift and go to state 136
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    CHAR            shift and go to state 142

    varcte                         shift and go to state 135
    int                            shift and go to state 137
    float                          shift and go to state 138
    char                           shift and go to state 139

state 79

    (130) factor2 -> PLUS .

    ID              reduce using rule 130 (factor2 -> PLUS .)
    INT             reduce using rule 130 (factor2 -> PLUS .)
    FLOAT           reduce using rule 130 (factor2 -> PLUS .)
    CHAR            reduce using rule 130 (factor2 -> PLUS .)


state 80

    (131) factor2 -> MINUS .

    ID              reduce using rule 131 (factor2 -> MINUS .)
    INT             reduce using rule 131 (factor2 -> MINUS .)
    FLOAT           reduce using rule 131 (factor2 -> MINUS .)
    CHAR            reduce using rule 131 (factor2 -> MINUS .)


state 81

    (41) parameters -> tipo ID parameters1 .

    CLOSEPAR        reduce using rule 41 (parameters -> tipo ID parameters1 .)


state 82

    (42) parameters1 -> COMMA . parameters
    (41) parameters -> . tipo ID parameters1
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR

    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    parameters                     shift and go to state 143
    tipo                           shift and go to state 30

state 83

    (43) parameters1 -> epsilon .

    CLOSEPAR        reduce using rule 43 (parameters1 -> epsilon .)


state 84

    (35) funciones5 -> vars funciones_punto1 . OPENCURLY funciones6

    OPENCURLY       shift and go to state 144


state 85

    (36) funciones5 -> funciones_punto1 OPENCURLY . funciones6
    (37) funciones6 -> . estatutos funciones6
    (38) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 147
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    funciones6                     shift and go to state 145
    estatutos                      shift and go to state 146
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 86

    (12) vars2 -> ID vars3 .

    FUNCTION        reduce using rule 12 (vars2 -> ID vars3 .)
    MAIN            reduce using rule 12 (vars2 -> ID vars3 .)
    OPENCURLY       reduce using rule 12 (vars2 -> ID vars3 .)


state 87

    (13) vars3 -> OPENBOX . exp CLOSEBOX vars4
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 148
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 88

    (14) vars3 -> vars4 .

    FUNCTION        reduce using rule 14 (vars3 -> vars4 .)
    MAIN            reduce using rule 14 (vars3 -> vars4 .)
    OPENCURLY       reduce using rule 14 (vars3 -> vars4 .)


state 89

    (15) vars4 -> SEMICOLON . vars5
    (17) vars5 -> . vars1
    (18) vars5 -> . epsilon
    (11) vars1 -> . tipo COLON vars2
    (142) epsilon -> .
    (23) tipo -> . TYPEFLOAT
    (24) tipo -> . TYPEINT
    (25) tipo -> . TYPECHAR

    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)
    OPENCURLY       reduce using rule 142 (epsilon -> .)
    TYPEFLOAT       shift and go to state 17
    TYPEINT         shift and go to state 18
    TYPECHAR        shift and go to state 19

    vars5                          shift and go to state 149
    vars1                          shift and go to state 150
    epsilon                        shift and go to state 151
    tipo                           shift and go to state 28

state 90

    (16) vars4 -> COMMA . vars2
    (12) vars2 -> . ID vars3

    ID              shift and go to state 46

    vars2                          shift and go to state 152

state 91

    (1) programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .

    $end            reduce using rule 1 (programa -> PROGRAM programa_punto1 programa1 programa2 main OPENPAR CLOSEPAR OPENCURLY programa3 CLOSECURLY .)


state 92

    (44) estatutos -> asignacion estatutos1 .

    CLOSECURLY      reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    RETURN          reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    READ            reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    WRITE           reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    IF              reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    WHILE           reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    FOR             reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    ID              reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    OPENPAR         reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    PLUS            reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    MINUS           reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    INT             reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    FLOAT           reduce using rule 44 (estatutos -> asignacion estatutos1 .)
    CHAR            reduce using rule 44 (estatutos -> asignacion estatutos1 .)


state 93

    (53) estatutos1 -> estatutos .

    CLOSECURLY      reduce using rule 53 (estatutos1 -> estatutos .)
    RETURN          reduce using rule 53 (estatutos1 -> estatutos .)
    READ            reduce using rule 53 (estatutos1 -> estatutos .)
    WRITE           reduce using rule 53 (estatutos1 -> estatutos .)
    IF              reduce using rule 53 (estatutos1 -> estatutos .)
    WHILE           reduce using rule 53 (estatutos1 -> estatutos .)
    FOR             reduce using rule 53 (estatutos1 -> estatutos .)
    ID              reduce using rule 53 (estatutos1 -> estatutos .)
    OPENPAR         reduce using rule 53 (estatutos1 -> estatutos .)
    PLUS            reduce using rule 53 (estatutos1 -> estatutos .)
    MINUS           reduce using rule 53 (estatutos1 -> estatutos .)
    INT             reduce using rule 53 (estatutos1 -> estatutos .)
    FLOAT           reduce using rule 53 (estatutos1 -> estatutos .)
    CHAR            reduce using rule 53 (estatutos1 -> estatutos .)


state 94

    (54) estatutos1 -> epsilon .
    (132) factor2 -> epsilon .

  ! reduce/reduce conflict for ID resolved using rule 54 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for INT resolved using rule 54 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for FLOAT resolved using rule 54 (estatutos1 -> epsilon .)
  ! reduce/reduce conflict for CHAR resolved using rule 54 (estatutos1 -> epsilon .)
    CLOSECURLY      reduce using rule 54 (estatutos1 -> epsilon .)
    RETURN          reduce using rule 54 (estatutos1 -> epsilon .)
    READ            reduce using rule 54 (estatutos1 -> epsilon .)
    WRITE           reduce using rule 54 (estatutos1 -> epsilon .)
    IF              reduce using rule 54 (estatutos1 -> epsilon .)
    WHILE           reduce using rule 54 (estatutos1 -> epsilon .)
    FOR             reduce using rule 54 (estatutos1 -> epsilon .)
    ID              reduce using rule 54 (estatutos1 -> epsilon .)
    OPENPAR         reduce using rule 54 (estatutos1 -> epsilon .)
    PLUS            reduce using rule 54 (estatutos1 -> epsilon .)
    MINUS           reduce using rule 54 (estatutos1 -> epsilon .)
    INT             reduce using rule 54 (estatutos1 -> epsilon .)
    FLOAT           reduce using rule 54 (estatutos1 -> epsilon .)
    CHAR            reduce using rule 54 (estatutos1 -> epsilon .)

  ! ID              [ reduce using rule 132 (factor2 -> epsilon .) ]
  ! INT             [ reduce using rule 132 (factor2 -> epsilon .) ]
  ! FLOAT           [ reduce using rule 132 (factor2 -> epsilon .) ]
  ! CHAR            [ reduce using rule 132 (factor2 -> epsilon .) ]


state 95

    (45) estatutos -> llamada estatutos1 .

    CLOSECURLY      reduce using rule 45 (estatutos -> llamada estatutos1 .)
    RETURN          reduce using rule 45 (estatutos -> llamada estatutos1 .)
    READ            reduce using rule 45 (estatutos -> llamada estatutos1 .)
    WRITE           reduce using rule 45 (estatutos -> llamada estatutos1 .)
    IF              reduce using rule 45 (estatutos -> llamada estatutos1 .)
    WHILE           reduce using rule 45 (estatutos -> llamada estatutos1 .)
    FOR             reduce using rule 45 (estatutos -> llamada estatutos1 .)
    ID              reduce using rule 45 (estatutos -> llamada estatutos1 .)
    OPENPAR         reduce using rule 45 (estatutos -> llamada estatutos1 .)
    PLUS            reduce using rule 45 (estatutos -> llamada estatutos1 .)
    MINUS           reduce using rule 45 (estatutos -> llamada estatutos1 .)
    INT             reduce using rule 45 (estatutos -> llamada estatutos1 .)
    FLOAT           reduce using rule 45 (estatutos -> llamada estatutos1 .)
    CHAR            reduce using rule 45 (estatutos -> llamada estatutos1 .)


state 96

    (46) estatutos -> retorno estatutos1 .

    CLOSECURLY      reduce using rule 46 (estatutos -> retorno estatutos1 .)
    RETURN          reduce using rule 46 (estatutos -> retorno estatutos1 .)
    READ            reduce using rule 46 (estatutos -> retorno estatutos1 .)
    WRITE           reduce using rule 46 (estatutos -> retorno estatutos1 .)
    IF              reduce using rule 46 (estatutos -> retorno estatutos1 .)
    WHILE           reduce using rule 46 (estatutos -> retorno estatutos1 .)
    FOR             reduce using rule 46 (estatutos -> retorno estatutos1 .)
    ID              reduce using rule 46 (estatutos -> retorno estatutos1 .)
    OPENPAR         reduce using rule 46 (estatutos -> retorno estatutos1 .)
    PLUS            reduce using rule 46 (estatutos -> retorno estatutos1 .)
    MINUS           reduce using rule 46 (estatutos -> retorno estatutos1 .)
    INT             reduce using rule 46 (estatutos -> retorno estatutos1 .)
    FLOAT           reduce using rule 46 (estatutos -> retorno estatutos1 .)
    CHAR            reduce using rule 46 (estatutos -> retorno estatutos1 .)


state 97

    (47) estatutos -> lectura estatutos1 .

    CLOSECURLY      reduce using rule 47 (estatutos -> lectura estatutos1 .)
    RETURN          reduce using rule 47 (estatutos -> lectura estatutos1 .)
    READ            reduce using rule 47 (estatutos -> lectura estatutos1 .)
    WRITE           reduce using rule 47 (estatutos -> lectura estatutos1 .)
    IF              reduce using rule 47 (estatutos -> lectura estatutos1 .)
    WHILE           reduce using rule 47 (estatutos -> lectura estatutos1 .)
    FOR             reduce using rule 47 (estatutos -> lectura estatutos1 .)
    ID              reduce using rule 47 (estatutos -> lectura estatutos1 .)
    OPENPAR         reduce using rule 47 (estatutos -> lectura estatutos1 .)
    PLUS            reduce using rule 47 (estatutos -> lectura estatutos1 .)
    MINUS           reduce using rule 47 (estatutos -> lectura estatutos1 .)
    INT             reduce using rule 47 (estatutos -> lectura estatutos1 .)
    FLOAT           reduce using rule 47 (estatutos -> lectura estatutos1 .)
    CHAR            reduce using rule 47 (estatutos -> lectura estatutos1 .)


state 98

    (48) estatutos -> escritura estatutos1 .

    CLOSECURLY      reduce using rule 48 (estatutos -> escritura estatutos1 .)
    RETURN          reduce using rule 48 (estatutos -> escritura estatutos1 .)
    READ            reduce using rule 48 (estatutos -> escritura estatutos1 .)
    WRITE           reduce using rule 48 (estatutos -> escritura estatutos1 .)
    IF              reduce using rule 48 (estatutos -> escritura estatutos1 .)
    WHILE           reduce using rule 48 (estatutos -> escritura estatutos1 .)
    FOR             reduce using rule 48 (estatutos -> escritura estatutos1 .)
    ID              reduce using rule 48 (estatutos -> escritura estatutos1 .)
    OPENPAR         reduce using rule 48 (estatutos -> escritura estatutos1 .)
    PLUS            reduce using rule 48 (estatutos -> escritura estatutos1 .)
    MINUS           reduce using rule 48 (estatutos -> escritura estatutos1 .)
    INT             reduce using rule 48 (estatutos -> escritura estatutos1 .)
    FLOAT           reduce using rule 48 (estatutos -> escritura estatutos1 .)
    CHAR            reduce using rule 48 (estatutos -> escritura estatutos1 .)


state 99

    (49) estatutos -> condicion estatutos1 .

    CLOSECURLY      reduce using rule 49 (estatutos -> condicion estatutos1 .)
    RETURN          reduce using rule 49 (estatutos -> condicion estatutos1 .)
    READ            reduce using rule 49 (estatutos -> condicion estatutos1 .)
    WRITE           reduce using rule 49 (estatutos -> condicion estatutos1 .)
    IF              reduce using rule 49 (estatutos -> condicion estatutos1 .)
    WHILE           reduce using rule 49 (estatutos -> condicion estatutos1 .)
    FOR             reduce using rule 49 (estatutos -> condicion estatutos1 .)
    ID              reduce using rule 49 (estatutos -> condicion estatutos1 .)
    OPENPAR         reduce using rule 49 (estatutos -> condicion estatutos1 .)
    PLUS            reduce using rule 49 (estatutos -> condicion estatutos1 .)
    MINUS           reduce using rule 49 (estatutos -> condicion estatutos1 .)
    INT             reduce using rule 49 (estatutos -> condicion estatutos1 .)
    FLOAT           reduce using rule 49 (estatutos -> condicion estatutos1 .)
    CHAR            reduce using rule 49 (estatutos -> condicion estatutos1 .)


state 100

    (50) estatutos -> while estatutos1 .

    CLOSECURLY      reduce using rule 50 (estatutos -> while estatutos1 .)
    RETURN          reduce using rule 50 (estatutos -> while estatutos1 .)
    READ            reduce using rule 50 (estatutos -> while estatutos1 .)
    WRITE           reduce using rule 50 (estatutos -> while estatutos1 .)
    IF              reduce using rule 50 (estatutos -> while estatutos1 .)
    WHILE           reduce using rule 50 (estatutos -> while estatutos1 .)
    FOR             reduce using rule 50 (estatutos -> while estatutos1 .)
    ID              reduce using rule 50 (estatutos -> while estatutos1 .)
    OPENPAR         reduce using rule 50 (estatutos -> while estatutos1 .)
    PLUS            reduce using rule 50 (estatutos -> while estatutos1 .)
    MINUS           reduce using rule 50 (estatutos -> while estatutos1 .)
    INT             reduce using rule 50 (estatutos -> while estatutos1 .)
    FLOAT           reduce using rule 50 (estatutos -> while estatutos1 .)
    CHAR            reduce using rule 50 (estatutos -> while estatutos1 .)


state 101

    (51) estatutos -> for estatutos1 .

    CLOSECURLY      reduce using rule 51 (estatutos -> for estatutos1 .)
    RETURN          reduce using rule 51 (estatutos -> for estatutos1 .)
    READ            reduce using rule 51 (estatutos -> for estatutos1 .)
    WRITE           reduce using rule 51 (estatutos -> for estatutos1 .)
    IF              reduce using rule 51 (estatutos -> for estatutos1 .)
    WHILE           reduce using rule 51 (estatutos -> for estatutos1 .)
    FOR             reduce using rule 51 (estatutos -> for estatutos1 .)
    ID              reduce using rule 51 (estatutos -> for estatutos1 .)
    OPENPAR         reduce using rule 51 (estatutos -> for estatutos1 .)
    PLUS            reduce using rule 51 (estatutos -> for estatutos1 .)
    MINUS           reduce using rule 51 (estatutos -> for estatutos1 .)
    INT             reduce using rule 51 (estatutos -> for estatutos1 .)
    FLOAT           reduce using rule 51 (estatutos -> for estatutos1 .)
    CHAR            reduce using rule 51 (estatutos -> for estatutos1 .)


state 102

    (52) estatutos -> est_exp estatutos1 .

    CLOSECURLY      reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    RETURN          reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    READ            reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    WRITE           reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    IF              reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    WHILE           reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    FOR             reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    ID              reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    OPENPAR         reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    PLUS            reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    MINUS           reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    INT             reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    FLOAT           reduce using rule 52 (estatutos -> est_exp estatutos1 .)
    CHAR            reduce using rule 52 (estatutos -> est_exp estatutos1 .)


state 103

    (55) asignacion -> asignacion1 expresion . SEMICOLON

    SEMICOLON       shift and go to state 153


state 104

    (124) factor -> ID . factor1
    (63) funcion_punto1 -> ID .
    (128) factor1 -> . OPENBOX exp CLOSEBOX
    (129) factor1 -> . epsilon
    (142) epsilon -> .

    OPENPAR         reduce using rule 63 (funcion_punto1 -> ID .)
    OPENBOX         shift and go to state 154
    MULTIPLY        reduce using rule 142 (epsilon -> .)
    DIVIDE          reduce using rule 142 (epsilon -> .)
    MODULO          reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    SEMICOLON       reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    CLOSEBOX        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)

    factor1                        shift and go to state 121
    epsilon                        shift and go to state 122

state 105

    (126) factor -> funcion .

    MULTIPLY        reduce using rule 126 (factor -> funcion .)
    DIVIDE          reduce using rule 126 (factor -> funcion .)
    MODULO          reduce using rule 126 (factor -> funcion .)
    PLUS            reduce using rule 126 (factor -> funcion .)
    MINUS           reduce using rule 126 (factor -> funcion .)
    LT              reduce using rule 126 (factor -> funcion .)
    LE              reduce using rule 126 (factor -> funcion .)
    GT              reduce using rule 126 (factor -> funcion .)
    GE              reduce using rule 126 (factor -> funcion .)
    EQ              reduce using rule 126 (factor -> funcion .)
    NE              reduce using rule 126 (factor -> funcion .)
    AND             reduce using rule 126 (factor -> funcion .)
    OR              reduce using rule 126 (factor -> funcion .)
    SEMICOLON       reduce using rule 126 (factor -> funcion .)
    CLOSEPAR        reduce using rule 126 (factor -> funcion .)
    CLOSEBOX        reduce using rule 126 (factor -> funcion .)
    COMMA           reduce using rule 126 (factor -> funcion .)
    TO              reduce using rule 126 (factor -> funcion .)
    DO              reduce using rule 126 (factor -> funcion .)


state 106

    (132) factor2 -> epsilon .

    ID              reduce using rule 132 (factor2 -> epsilon .)
    INT             reduce using rule 132 (factor2 -> epsilon .)
    FLOAT           reduce using rule 132 (factor2 -> epsilon .)
    CHAR            reduce using rule 132 (factor2 -> epsilon .)


state 107

    (92) est_exp -> expresion SEMICOLON .

    RETURN          reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    READ            reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    WRITE           reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    IF              reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    WHILE           reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    FOR             reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    ID              reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    OPENPAR         reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    PLUS            reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    MINUS           reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    INT             reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    FLOAT           reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    CHAR            reduce using rule 92 (est_exp -> expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 92 (est_exp -> expresion SEMICOLON .)


state 108

    (58) llamada -> funcion SEMICOLON .

    RETURN          reduce using rule 58 (llamada -> funcion SEMICOLON .)
    READ            reduce using rule 58 (llamada -> funcion SEMICOLON .)
    WRITE           reduce using rule 58 (llamada -> funcion SEMICOLON .)
    IF              reduce using rule 58 (llamada -> funcion SEMICOLON .)
    WHILE           reduce using rule 58 (llamada -> funcion SEMICOLON .)
    FOR             reduce using rule 58 (llamada -> funcion SEMICOLON .)
    ID              reduce using rule 58 (llamada -> funcion SEMICOLON .)
    OPENPAR         reduce using rule 58 (llamada -> funcion SEMICOLON .)
    PLUS            reduce using rule 58 (llamada -> funcion SEMICOLON .)
    MINUS           reduce using rule 58 (llamada -> funcion SEMICOLON .)
    INT             reduce using rule 58 (llamada -> funcion SEMICOLON .)
    FLOAT           reduce using rule 58 (llamada -> funcion SEMICOLON .)
    CHAR            reduce using rule 58 (llamada -> funcion SEMICOLON .)
    CLOSECURLY      reduce using rule 58 (llamada -> funcion SEMICOLON .)


state 109

    (66) retorno -> RETURN OPENPAR . exp CLOSEPAR SEMICOLON
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 155
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 110

    (106) compare -> exp generate_compare .
    (107) compare -> exp generate_compare . compare1 compare
    (108) compare1 -> . LT
    (109) compare1 -> . LE
    (110) compare1 -> . GT
    (111) compare1 -> . GE

    EQ              reduce using rule 106 (compare -> exp generate_compare .)
    NE              reduce using rule 106 (compare -> exp generate_compare .)
    AND             reduce using rule 106 (compare -> exp generate_compare .)
    OR              reduce using rule 106 (compare -> exp generate_compare .)
    SEMICOLON       reduce using rule 106 (compare -> exp generate_compare .)
    CLOSEPAR        reduce using rule 106 (compare -> exp generate_compare .)
    COMMA           reduce using rule 106 (compare -> exp generate_compare .)
    LT              shift and go to state 157
    LE              shift and go to state 158
    GT              shift and go to state 159
    GE              shift and go to state 160

    compare1                       shift and go to state 156

state 111

    (112) generate_compare -> epsilon .

    LT              reduce using rule 112 (generate_compare -> epsilon .)
    LE              reduce using rule 112 (generate_compare -> epsilon .)
    GT              reduce using rule 112 (generate_compare -> epsilon .)
    GE              reduce using rule 112 (generate_compare -> epsilon .)
    EQ              reduce using rule 112 (generate_compare -> epsilon .)
    NE              reduce using rule 112 (generate_compare -> epsilon .)
    AND             reduce using rule 112 (generate_compare -> epsilon .)
    OR              reduce using rule 112 (generate_compare -> epsilon .)
    SEMICOLON       reduce using rule 112 (generate_compare -> epsilon .)
    CLOSEPAR        reduce using rule 112 (generate_compare -> epsilon .)
    COMMA           reduce using rule 112 (generate_compare -> epsilon .)


state 112

    (67) lectura -> READ OPENPAR . lista_ids CLOSEPAR SEMICOLON
    (19) lista_ids -> . ID OPENBOX exp CLOSEBOX lista_ids1
    (20) lista_ids -> . ID lista_ids1

    ID              shift and go to state 162

    lista_ids                      shift and go to state 161

state 113

    (68) escritura -> WRITE OPENPAR . escritura1 CLOSEPAR SEMICOLON
    (69) escritura1 -> . escritura_string escritura2
    (70) escritura1 -> . escritura_expresion escritura2
    (73) escritura_string -> . STRING
    (74) escritura_expresion -> . expresion
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 166
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    escritura1                     shift and go to state 163
    escritura_string               shift and go to state 164
    escritura_expresion            shift and go to state 165
    expresion                      shift and go to state 167
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 114

    (75) condicion -> IF OPENPAR . expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    expresion                      shift and go to state 168
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 115

    (82) while -> WHILE while_punto1 . OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    OPENPAR         shift and go to state 169


state 116

    (83) while_punto1 -> epsilon .

    OPENPAR         reduce using rule 83 (while_punto1 -> epsilon .)


state 117

    (86) for -> FOR for1 . IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    IS              shift and go to state 170


state 118

    (87) for1 -> ID . OPENBOX exp CLOSEBOX
    (88) for1 -> ID .

    OPENBOX         shift and go to state 171
    IS              reduce using rule 88 (for1 -> ID .)


state 119

    (56) asignacion1 -> ID OPENBOX . exp CLOSEBOX IS
    (128) factor1 -> OPENBOX . exp CLOSEBOX
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 172
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 120

    (57) asignacion1 -> ID IS .

    ID              reduce using rule 57 (asignacion1 -> ID IS .)
    OPENPAR         reduce using rule 57 (asignacion1 -> ID IS .)
    PLUS            reduce using rule 57 (asignacion1 -> ID IS .)
    MINUS           reduce using rule 57 (asignacion1 -> ID IS .)
    INT             reduce using rule 57 (asignacion1 -> ID IS .)
    FLOAT           reduce using rule 57 (asignacion1 -> ID IS .)
    CHAR            reduce using rule 57 (asignacion1 -> ID IS .)


state 121

    (124) factor -> ID factor1 .

    MULTIPLY        reduce using rule 124 (factor -> ID factor1 .)
    DIVIDE          reduce using rule 124 (factor -> ID factor1 .)
    MODULO          reduce using rule 124 (factor -> ID factor1 .)
    PLUS            reduce using rule 124 (factor -> ID factor1 .)
    MINUS           reduce using rule 124 (factor -> ID factor1 .)
    LT              reduce using rule 124 (factor -> ID factor1 .)
    LE              reduce using rule 124 (factor -> ID factor1 .)
    GT              reduce using rule 124 (factor -> ID factor1 .)
    GE              reduce using rule 124 (factor -> ID factor1 .)
    EQ              reduce using rule 124 (factor -> ID factor1 .)
    NE              reduce using rule 124 (factor -> ID factor1 .)
    AND             reduce using rule 124 (factor -> ID factor1 .)
    OR              reduce using rule 124 (factor -> ID factor1 .)
    SEMICOLON       reduce using rule 124 (factor -> ID factor1 .)
    CLOSEPAR        reduce using rule 124 (factor -> ID factor1 .)
    CLOSEBOX        reduce using rule 124 (factor -> ID factor1 .)
    COMMA           reduce using rule 124 (factor -> ID factor1 .)
    TO              reduce using rule 124 (factor -> ID factor1 .)
    DO              reduce using rule 124 (factor -> ID factor1 .)


state 122

    (129) factor1 -> epsilon .

    MULTIPLY        reduce using rule 129 (factor1 -> epsilon .)
    DIVIDE          reduce using rule 129 (factor1 -> epsilon .)
    MODULO          reduce using rule 129 (factor1 -> epsilon .)
    PLUS            reduce using rule 129 (factor1 -> epsilon .)
    MINUS           reduce using rule 129 (factor1 -> epsilon .)
    LT              reduce using rule 129 (factor1 -> epsilon .)
    LE              reduce using rule 129 (factor1 -> epsilon .)
    GT              reduce using rule 129 (factor1 -> epsilon .)
    GE              reduce using rule 129 (factor1 -> epsilon .)
    EQ              reduce using rule 129 (factor1 -> epsilon .)
    NE              reduce using rule 129 (factor1 -> epsilon .)
    AND             reduce using rule 129 (factor1 -> epsilon .)
    OR              reduce using rule 129 (factor1 -> epsilon .)
    SEMICOLON       reduce using rule 129 (factor1 -> epsilon .)
    CLOSEPAR        reduce using rule 129 (factor1 -> epsilon .)
    CLOSEBOX        reduce using rule 129 (factor1 -> epsilon .)
    COMMA           reduce using rule 129 (factor1 -> epsilon .)
    TO              reduce using rule 129 (factor1 -> epsilon .)
    DO              reduce using rule 129 (factor1 -> epsilon .)


state 123

    (59) funcion -> funcion_punto1 OPENPAR . funcion1 funcion_punto3
    (60) funcion1 -> . exp funcion_punto2 funcion2
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    funcion_punto1                 shift and go to state 71
    funcion1                       shift and go to state 173
    exp                            shift and go to state 174
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 124

    (93) expresion -> and generate_expresion .
    (94) expresion -> and generate_expresion . expresion1 expresion
    (95) expresion1 -> . OR

    SEMICOLON       reduce using rule 93 (expresion -> and generate_expresion .)
    CLOSEPAR        reduce using rule 93 (expresion -> and generate_expresion .)
    COMMA           reduce using rule 93 (expresion -> and generate_expresion .)
    OR              shift and go to state 176

    expresion1                     shift and go to state 175

state 125

    (96) generate_expresion -> epsilon .

    OR              reduce using rule 96 (generate_expresion -> epsilon .)
    SEMICOLON       reduce using rule 96 (generate_expresion -> epsilon .)
    CLOSEPAR        reduce using rule 96 (generate_expresion -> epsilon .)
    COMMA           reduce using rule 96 (generate_expresion -> epsilon .)


state 126

    (97) and -> equal generate_and .
    (98) and -> equal generate_and . and1 and
    (99) and1 -> . AND

    OR              reduce using rule 97 (and -> equal generate_and .)
    SEMICOLON       reduce using rule 97 (and -> equal generate_and .)
    CLOSEPAR        reduce using rule 97 (and -> equal generate_and .)
    COMMA           reduce using rule 97 (and -> equal generate_and .)
    AND             shift and go to state 178

    and1                           shift and go to state 177

state 127

    (100) generate_and -> epsilon .

    AND             reduce using rule 100 (generate_and -> epsilon .)
    OR              reduce using rule 100 (generate_and -> epsilon .)
    SEMICOLON       reduce using rule 100 (generate_and -> epsilon .)
    CLOSEPAR        reduce using rule 100 (generate_and -> epsilon .)
    COMMA           reduce using rule 100 (generate_and -> epsilon .)


state 128

    (101) equal -> compare generate_equal .
    (102) equal -> compare generate_equal . equal1 equal
    (103) equal1 -> . EQ
    (104) equal1 -> . NE

    AND             reduce using rule 101 (equal -> compare generate_equal .)
    OR              reduce using rule 101 (equal -> compare generate_equal .)
    SEMICOLON       reduce using rule 101 (equal -> compare generate_equal .)
    CLOSEPAR        reduce using rule 101 (equal -> compare generate_equal .)
    COMMA           reduce using rule 101 (equal -> compare generate_equal .)
    EQ              shift and go to state 180
    NE              shift and go to state 181

    equal1                         shift and go to state 179

state 129

    (105) generate_equal -> epsilon .

    EQ              reduce using rule 105 (generate_equal -> epsilon .)
    NE              reduce using rule 105 (generate_equal -> epsilon .)
    AND             reduce using rule 105 (generate_equal -> epsilon .)
    OR              reduce using rule 105 (generate_equal -> epsilon .)
    SEMICOLON       reduce using rule 105 (generate_equal -> epsilon .)
    CLOSEPAR        reduce using rule 105 (generate_equal -> epsilon .)
    COMMA           reduce using rule 105 (generate_equal -> epsilon .)


state 130

    (113) exp -> termino generate_exp .
    (114) exp -> termino generate_exp . exp1 exp
    (115) exp1 -> . PLUS
    (116) exp1 -> . MINUS

    LT              reduce using rule 113 (exp -> termino generate_exp .)
    LE              reduce using rule 113 (exp -> termino generate_exp .)
    GT              reduce using rule 113 (exp -> termino generate_exp .)
    GE              reduce using rule 113 (exp -> termino generate_exp .)
    EQ              reduce using rule 113 (exp -> termino generate_exp .)
    NE              reduce using rule 113 (exp -> termino generate_exp .)
    AND             reduce using rule 113 (exp -> termino generate_exp .)
    OR              reduce using rule 113 (exp -> termino generate_exp .)
    SEMICOLON       reduce using rule 113 (exp -> termino generate_exp .)
    CLOSEPAR        reduce using rule 113 (exp -> termino generate_exp .)
    CLOSEBOX        reduce using rule 113 (exp -> termino generate_exp .)
    COMMA           reduce using rule 113 (exp -> termino generate_exp .)
    TO              reduce using rule 113 (exp -> termino generate_exp .)
    DO              reduce using rule 113 (exp -> termino generate_exp .)
    PLUS            shift and go to state 183
    MINUS           shift and go to state 184

    exp1                           shift and go to state 182

state 131

    (117) generate_exp -> epsilon .

    PLUS            reduce using rule 117 (generate_exp -> epsilon .)
    MINUS           reduce using rule 117 (generate_exp -> epsilon .)
    LT              reduce using rule 117 (generate_exp -> epsilon .)
    LE              reduce using rule 117 (generate_exp -> epsilon .)
    GT              reduce using rule 117 (generate_exp -> epsilon .)
    GE              reduce using rule 117 (generate_exp -> epsilon .)
    EQ              reduce using rule 117 (generate_exp -> epsilon .)
    NE              reduce using rule 117 (generate_exp -> epsilon .)
    AND             reduce using rule 117 (generate_exp -> epsilon .)
    OR              reduce using rule 117 (generate_exp -> epsilon .)
    SEMICOLON       reduce using rule 117 (generate_exp -> epsilon .)
    CLOSEPAR        reduce using rule 117 (generate_exp -> epsilon .)
    CLOSEBOX        reduce using rule 117 (generate_exp -> epsilon .)
    COMMA           reduce using rule 117 (generate_exp -> epsilon .)
    TO              reduce using rule 117 (generate_exp -> epsilon .)
    DO              reduce using rule 117 (generate_exp -> epsilon .)


state 132

    (118) termino -> factor generate_termino .
    (119) termino -> factor generate_termino . termino1 termino
    (120) termino1 -> . MULTIPLY
    (121) termino1 -> . DIVIDE
    (122) termino1 -> . MODULO

    PLUS            reduce using rule 118 (termino -> factor generate_termino .)
    MINUS           reduce using rule 118 (termino -> factor generate_termino .)
    LT              reduce using rule 118 (termino -> factor generate_termino .)
    LE              reduce using rule 118 (termino -> factor generate_termino .)
    GT              reduce using rule 118 (termino -> factor generate_termino .)
    GE              reduce using rule 118 (termino -> factor generate_termino .)
    EQ              reduce using rule 118 (termino -> factor generate_termino .)
    NE              reduce using rule 118 (termino -> factor generate_termino .)
    AND             reduce using rule 118 (termino -> factor generate_termino .)
    OR              reduce using rule 118 (termino -> factor generate_termino .)
    SEMICOLON       reduce using rule 118 (termino -> factor generate_termino .)
    CLOSEPAR        reduce using rule 118 (termino -> factor generate_termino .)
    CLOSEBOX        reduce using rule 118 (termino -> factor generate_termino .)
    COMMA           reduce using rule 118 (termino -> factor generate_termino .)
    TO              reduce using rule 118 (termino -> factor generate_termino .)
    DO              reduce using rule 118 (termino -> factor generate_termino .)
    MULTIPLY        shift and go to state 186
    DIVIDE          shift and go to state 187
    MODULO          shift and go to state 188

    termino1                       shift and go to state 185

state 133

    (123) generate_termino -> epsilon .

    MULTIPLY        reduce using rule 123 (generate_termino -> epsilon .)
    DIVIDE          reduce using rule 123 (generate_termino -> epsilon .)
    MODULO          reduce using rule 123 (generate_termino -> epsilon .)
    PLUS            reduce using rule 123 (generate_termino -> epsilon .)
    MINUS           reduce using rule 123 (generate_termino -> epsilon .)
    LT              reduce using rule 123 (generate_termino -> epsilon .)
    LE              reduce using rule 123 (generate_termino -> epsilon .)
    GT              reduce using rule 123 (generate_termino -> epsilon .)
    GE              reduce using rule 123 (generate_termino -> epsilon .)
    EQ              reduce using rule 123 (generate_termino -> epsilon .)
    NE              reduce using rule 123 (generate_termino -> epsilon .)
    AND             reduce using rule 123 (generate_termino -> epsilon .)
    OR              reduce using rule 123 (generate_termino -> epsilon .)
    SEMICOLON       reduce using rule 123 (generate_termino -> epsilon .)
    CLOSEPAR        reduce using rule 123 (generate_termino -> epsilon .)
    CLOSEBOX        reduce using rule 123 (generate_termino -> epsilon .)
    COMMA           reduce using rule 123 (generate_termino -> epsilon .)
    TO              reduce using rule 123 (generate_termino -> epsilon .)
    DO              reduce using rule 123 (generate_termino -> epsilon .)


state 134

    (125) factor -> openpar expresion . closepar
    (134) closepar -> . CLOSEPAR

    CLOSEPAR        shift and go to state 190

    closepar                       shift and go to state 189

state 135

    (127) factor -> factor2 varcte .

    MULTIPLY        reduce using rule 127 (factor -> factor2 varcte .)
    DIVIDE          reduce using rule 127 (factor -> factor2 varcte .)
    MODULO          reduce using rule 127 (factor -> factor2 varcte .)
    PLUS            reduce using rule 127 (factor -> factor2 varcte .)
    MINUS           reduce using rule 127 (factor -> factor2 varcte .)
    LT              reduce using rule 127 (factor -> factor2 varcte .)
    LE              reduce using rule 127 (factor -> factor2 varcte .)
    GT              reduce using rule 127 (factor -> factor2 varcte .)
    GE              reduce using rule 127 (factor -> factor2 varcte .)
    EQ              reduce using rule 127 (factor -> factor2 varcte .)
    NE              reduce using rule 127 (factor -> factor2 varcte .)
    AND             reduce using rule 127 (factor -> factor2 varcte .)
    OR              reduce using rule 127 (factor -> factor2 varcte .)
    SEMICOLON       reduce using rule 127 (factor -> factor2 varcte .)
    CLOSEPAR        reduce using rule 127 (factor -> factor2 varcte .)
    CLOSEBOX        reduce using rule 127 (factor -> factor2 varcte .)
    COMMA           reduce using rule 127 (factor -> factor2 varcte .)
    TO              reduce using rule 127 (factor -> factor2 varcte .)
    DO              reduce using rule 127 (factor -> factor2 varcte .)


state 136

    (135) varcte -> ID .

    MULTIPLY        reduce using rule 135 (varcte -> ID .)
    DIVIDE          reduce using rule 135 (varcte -> ID .)
    MODULO          reduce using rule 135 (varcte -> ID .)
    PLUS            reduce using rule 135 (varcte -> ID .)
    MINUS           reduce using rule 135 (varcte -> ID .)
    LT              reduce using rule 135 (varcte -> ID .)
    LE              reduce using rule 135 (varcte -> ID .)
    GT              reduce using rule 135 (varcte -> ID .)
    GE              reduce using rule 135 (varcte -> ID .)
    EQ              reduce using rule 135 (varcte -> ID .)
    NE              reduce using rule 135 (varcte -> ID .)
    AND             reduce using rule 135 (varcte -> ID .)
    OR              reduce using rule 135 (varcte -> ID .)
    SEMICOLON       reduce using rule 135 (varcte -> ID .)
    CLOSEPAR        reduce using rule 135 (varcte -> ID .)
    CLOSEBOX        reduce using rule 135 (varcte -> ID .)
    COMMA           reduce using rule 135 (varcte -> ID .)
    TO              reduce using rule 135 (varcte -> ID .)
    DO              reduce using rule 135 (varcte -> ID .)


state 137

    (136) varcte -> int .

    MULTIPLY        reduce using rule 136 (varcte -> int .)
    DIVIDE          reduce using rule 136 (varcte -> int .)
    MODULO          reduce using rule 136 (varcte -> int .)
    PLUS            reduce using rule 136 (varcte -> int .)
    MINUS           reduce using rule 136 (varcte -> int .)
    LT              reduce using rule 136 (varcte -> int .)
    LE              reduce using rule 136 (varcte -> int .)
    GT              reduce using rule 136 (varcte -> int .)
    GE              reduce using rule 136 (varcte -> int .)
    EQ              reduce using rule 136 (varcte -> int .)
    NE              reduce using rule 136 (varcte -> int .)
    AND             reduce using rule 136 (varcte -> int .)
    OR              reduce using rule 136 (varcte -> int .)
    SEMICOLON       reduce using rule 136 (varcte -> int .)
    CLOSEPAR        reduce using rule 136 (varcte -> int .)
    CLOSEBOX        reduce using rule 136 (varcte -> int .)
    COMMA           reduce using rule 136 (varcte -> int .)
    TO              reduce using rule 136 (varcte -> int .)
    DO              reduce using rule 136 (varcte -> int .)


state 138

    (137) varcte -> float .

    MULTIPLY        reduce using rule 137 (varcte -> float .)
    DIVIDE          reduce using rule 137 (varcte -> float .)
    MODULO          reduce using rule 137 (varcte -> float .)
    PLUS            reduce using rule 137 (varcte -> float .)
    MINUS           reduce using rule 137 (varcte -> float .)
    LT              reduce using rule 137 (varcte -> float .)
    LE              reduce using rule 137 (varcte -> float .)
    GT              reduce using rule 137 (varcte -> float .)
    GE              reduce using rule 137 (varcte -> float .)
    EQ              reduce using rule 137 (varcte -> float .)
    NE              reduce using rule 137 (varcte -> float .)
    AND             reduce using rule 137 (varcte -> float .)
    OR              reduce using rule 137 (varcte -> float .)
    SEMICOLON       reduce using rule 137 (varcte -> float .)
    CLOSEPAR        reduce using rule 137 (varcte -> float .)
    CLOSEBOX        reduce using rule 137 (varcte -> float .)
    COMMA           reduce using rule 137 (varcte -> float .)
    TO              reduce using rule 137 (varcte -> float .)
    DO              reduce using rule 137 (varcte -> float .)


state 139

    (138) varcte -> char .

    MULTIPLY        reduce using rule 138 (varcte -> char .)
    DIVIDE          reduce using rule 138 (varcte -> char .)
    MODULO          reduce using rule 138 (varcte -> char .)
    PLUS            reduce using rule 138 (varcte -> char .)
    MINUS           reduce using rule 138 (varcte -> char .)
    LT              reduce using rule 138 (varcte -> char .)
    LE              reduce using rule 138 (varcte -> char .)
    GT              reduce using rule 138 (varcte -> char .)
    GE              reduce using rule 138 (varcte -> char .)
    EQ              reduce using rule 138 (varcte -> char .)
    NE              reduce using rule 138 (varcte -> char .)
    AND             reduce using rule 138 (varcte -> char .)
    OR              reduce using rule 138 (varcte -> char .)
    SEMICOLON       reduce using rule 138 (varcte -> char .)
    CLOSEPAR        reduce using rule 138 (varcte -> char .)
    CLOSEBOX        reduce using rule 138 (varcte -> char .)
    COMMA           reduce using rule 138 (varcte -> char .)
    TO              reduce using rule 138 (varcte -> char .)
    DO              reduce using rule 138 (varcte -> char .)


state 140

    (139) int -> INT .

    MULTIPLY        reduce using rule 139 (int -> INT .)
    DIVIDE          reduce using rule 139 (int -> INT .)
    MODULO          reduce using rule 139 (int -> INT .)
    PLUS            reduce using rule 139 (int -> INT .)
    MINUS           reduce using rule 139 (int -> INT .)
    LT              reduce using rule 139 (int -> INT .)
    LE              reduce using rule 139 (int -> INT .)
    GT              reduce using rule 139 (int -> INT .)
    GE              reduce using rule 139 (int -> INT .)
    EQ              reduce using rule 139 (int -> INT .)
    NE              reduce using rule 139 (int -> INT .)
    AND             reduce using rule 139 (int -> INT .)
    OR              reduce using rule 139 (int -> INT .)
    SEMICOLON       reduce using rule 139 (int -> INT .)
    CLOSEPAR        reduce using rule 139 (int -> INT .)
    CLOSEBOX        reduce using rule 139 (int -> INT .)
    COMMA           reduce using rule 139 (int -> INT .)
    TO              reduce using rule 139 (int -> INT .)
    DO              reduce using rule 139 (int -> INT .)


state 141

    (140) float -> FLOAT .

    MULTIPLY        reduce using rule 140 (float -> FLOAT .)
    DIVIDE          reduce using rule 140 (float -> FLOAT .)
    MODULO          reduce using rule 140 (float -> FLOAT .)
    PLUS            reduce using rule 140 (float -> FLOAT .)
    MINUS           reduce using rule 140 (float -> FLOAT .)
    LT              reduce using rule 140 (float -> FLOAT .)
    LE              reduce using rule 140 (float -> FLOAT .)
    GT              reduce using rule 140 (float -> FLOAT .)
    GE              reduce using rule 140 (float -> FLOAT .)
    EQ              reduce using rule 140 (float -> FLOAT .)
    NE              reduce using rule 140 (float -> FLOAT .)
    AND             reduce using rule 140 (float -> FLOAT .)
    OR              reduce using rule 140 (float -> FLOAT .)
    SEMICOLON       reduce using rule 140 (float -> FLOAT .)
    CLOSEPAR        reduce using rule 140 (float -> FLOAT .)
    CLOSEBOX        reduce using rule 140 (float -> FLOAT .)
    COMMA           reduce using rule 140 (float -> FLOAT .)
    TO              reduce using rule 140 (float -> FLOAT .)
    DO              reduce using rule 140 (float -> FLOAT .)


state 142

    (141) char -> CHAR .

    MULTIPLY        reduce using rule 141 (char -> CHAR .)
    DIVIDE          reduce using rule 141 (char -> CHAR .)
    MODULO          reduce using rule 141 (char -> CHAR .)
    PLUS            reduce using rule 141 (char -> CHAR .)
    MINUS           reduce using rule 141 (char -> CHAR .)
    LT              reduce using rule 141 (char -> CHAR .)
    LE              reduce using rule 141 (char -> CHAR .)
    GT              reduce using rule 141 (char -> CHAR .)
    GE              reduce using rule 141 (char -> CHAR .)
    EQ              reduce using rule 141 (char -> CHAR .)
    NE              reduce using rule 141 (char -> CHAR .)
    AND             reduce using rule 141 (char -> CHAR .)
    OR              reduce using rule 141 (char -> CHAR .)
    SEMICOLON       reduce using rule 141 (char -> CHAR .)
    CLOSEPAR        reduce using rule 141 (char -> CHAR .)
    CLOSEBOX        reduce using rule 141 (char -> CHAR .)
    COMMA           reduce using rule 141 (char -> CHAR .)
    TO              reduce using rule 141 (char -> CHAR .)
    DO              reduce using rule 141 (char -> CHAR .)


state 143

    (42) parameters1 -> COMMA parameters .

    CLOSEPAR        reduce using rule 42 (parameters1 -> COMMA parameters .)


state 144

    (35) funciones5 -> vars funciones_punto1 OPENCURLY . funciones6
    (37) funciones6 -> . estatutos funciones6
    (38) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 147
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    funciones6                     shift and go to state 191
    estatutos                      shift and go to state 146
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 145

    (36) funciones5 -> funciones_punto1 OPENCURLY funciones6 .

    MAIN            reduce using rule 36 (funciones5 -> funciones_punto1 OPENCURLY funciones6 .)


state 146

    (37) funciones6 -> estatutos . funciones6
    (37) funciones6 -> . estatutos funciones6
    (38) funciones6 -> . CLOSECURLY funciones_punto2 funciones
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    CLOSECURLY      shift and go to state 147
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    estatutos                      shift and go to state 146
    funciones6                     shift and go to state 192
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 147

    (38) funciones6 -> CLOSECURLY . funciones_punto2 funciones
    (40) funciones_punto2 -> . epsilon
    (142) epsilon -> .

    FUNCTION        reduce using rule 142 (epsilon -> .)
    MAIN            reduce using rule 142 (epsilon -> .)

    funciones_punto2               shift and go to state 193
    epsilon                        shift and go to state 194

state 148

    (13) vars3 -> OPENBOX exp . CLOSEBOX vars4

    CLOSEBOX        shift and go to state 195


state 149

    (15) vars4 -> SEMICOLON vars5 .

    FUNCTION        reduce using rule 15 (vars4 -> SEMICOLON vars5 .)
    MAIN            reduce using rule 15 (vars4 -> SEMICOLON vars5 .)
    OPENCURLY       reduce using rule 15 (vars4 -> SEMICOLON vars5 .)


state 150

    (17) vars5 -> vars1 .

    FUNCTION        reduce using rule 17 (vars5 -> vars1 .)
    MAIN            reduce using rule 17 (vars5 -> vars1 .)
    OPENCURLY       reduce using rule 17 (vars5 -> vars1 .)


state 151

    (18) vars5 -> epsilon .

    FUNCTION        reduce using rule 18 (vars5 -> epsilon .)
    MAIN            reduce using rule 18 (vars5 -> epsilon .)
    OPENCURLY       reduce using rule 18 (vars5 -> epsilon .)


state 152

    (16) vars4 -> COMMA vars2 .

    FUNCTION        reduce using rule 16 (vars4 -> COMMA vars2 .)
    MAIN            reduce using rule 16 (vars4 -> COMMA vars2 .)
    OPENCURLY       reduce using rule 16 (vars4 -> COMMA vars2 .)


state 153

    (55) asignacion -> asignacion1 expresion SEMICOLON .

    RETURN          reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    READ            reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    WRITE           reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    IF              reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    WHILE           reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    FOR             reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    ID              reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    OPENPAR         reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    PLUS            reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    MINUS           reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    INT             reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    FLOAT           reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    CHAR            reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)
    CLOSECURLY      reduce using rule 55 (asignacion -> asignacion1 expresion SEMICOLON .)


state 154

    (128) factor1 -> OPENBOX . exp CLOSEBOX
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 196
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 155

    (66) retorno -> RETURN OPENPAR exp . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 197


state 156

    (107) compare -> exp generate_compare compare1 . compare
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 64
    compare                        shift and go to state 198
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 157

    (108) compare1 -> LT .

    ID              reduce using rule 108 (compare1 -> LT .)
    OPENPAR         reduce using rule 108 (compare1 -> LT .)
    PLUS            reduce using rule 108 (compare1 -> LT .)
    MINUS           reduce using rule 108 (compare1 -> LT .)
    INT             reduce using rule 108 (compare1 -> LT .)
    FLOAT           reduce using rule 108 (compare1 -> LT .)
    CHAR            reduce using rule 108 (compare1 -> LT .)


state 158

    (109) compare1 -> LE .

    ID              reduce using rule 109 (compare1 -> LE .)
    OPENPAR         reduce using rule 109 (compare1 -> LE .)
    PLUS            reduce using rule 109 (compare1 -> LE .)
    MINUS           reduce using rule 109 (compare1 -> LE .)
    INT             reduce using rule 109 (compare1 -> LE .)
    FLOAT           reduce using rule 109 (compare1 -> LE .)
    CHAR            reduce using rule 109 (compare1 -> LE .)


state 159

    (110) compare1 -> GT .

    ID              reduce using rule 110 (compare1 -> GT .)
    OPENPAR         reduce using rule 110 (compare1 -> GT .)
    PLUS            reduce using rule 110 (compare1 -> GT .)
    MINUS           reduce using rule 110 (compare1 -> GT .)
    INT             reduce using rule 110 (compare1 -> GT .)
    FLOAT           reduce using rule 110 (compare1 -> GT .)
    CHAR            reduce using rule 110 (compare1 -> GT .)


state 160

    (111) compare1 -> GE .

    ID              reduce using rule 111 (compare1 -> GE .)
    OPENPAR         reduce using rule 111 (compare1 -> GE .)
    PLUS            reduce using rule 111 (compare1 -> GE .)
    MINUS           reduce using rule 111 (compare1 -> GE .)
    INT             reduce using rule 111 (compare1 -> GE .)
    FLOAT           reduce using rule 111 (compare1 -> GE .)
    CHAR            reduce using rule 111 (compare1 -> GE .)


state 161

    (67) lectura -> READ OPENPAR lista_ids . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 199


state 162

    (19) lista_ids -> ID . OPENBOX exp CLOSEBOX lista_ids1
    (20) lista_ids -> ID . lista_ids1
    (21) lista_ids1 -> . COMMA lista_ids
    (22) lista_ids1 -> . epsilon
    (142) epsilon -> .

    OPENBOX         shift and go to state 200
    COMMA           shift and go to state 202
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    lista_ids1                     shift and go to state 201
    epsilon                        shift and go to state 203

state 163

    (68) escritura -> WRITE OPENPAR escritura1 . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 204


state 164

    (69) escritura1 -> escritura_string . escritura2
    (71) escritura2 -> . COMMA escritura1
    (72) escritura2 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 206
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    escritura2                     shift and go to state 205
    epsilon                        shift and go to state 207

state 165

    (70) escritura1 -> escritura_expresion . escritura2
    (71) escritura2 -> . COMMA escritura1
    (72) escritura2 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 206
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    escritura2                     shift and go to state 208
    epsilon                        shift and go to state 207

state 166

    (73) escritura_string -> STRING .

    COMMA           reduce using rule 73 (escritura_string -> STRING .)
    CLOSEPAR        reduce using rule 73 (escritura_string -> STRING .)


state 167

    (74) escritura_expresion -> expresion .

    COMMA           reduce using rule 74 (escritura_expresion -> expresion .)
    CLOSEPAR        reduce using rule 74 (escritura_expresion -> expresion .)


state 168

    (75) condicion -> IF OPENPAR expresion . CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    CLOSEPAR        shift and go to state 209


state 169

    (82) while -> WHILE while_punto1 OPENPAR . expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    expresion                      shift and go to state 210
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 170

    (86) for -> FOR for1 IS . exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 211
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 171

    (87) for1 -> ID OPENBOX . exp CLOSEBOX
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 212
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 172

    (56) asignacion1 -> ID OPENBOX exp . CLOSEBOX IS
    (128) factor1 -> OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 213


state 173

    (59) funcion -> funcion_punto1 OPENPAR funcion1 . funcion_punto3
    (65) funcion_punto3 -> . epsilon
    (142) epsilon -> .

    SEMICOLON       reduce using rule 142 (epsilon -> .)
    MULTIPLY        reduce using rule 142 (epsilon -> .)
    DIVIDE          reduce using rule 142 (epsilon -> .)
    MODULO          reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    LT              reduce using rule 142 (epsilon -> .)
    LE              reduce using rule 142 (epsilon -> .)
    GT              reduce using rule 142 (epsilon -> .)
    GE              reduce using rule 142 (epsilon -> .)
    EQ              reduce using rule 142 (epsilon -> .)
    NE              reduce using rule 142 (epsilon -> .)
    AND             reduce using rule 142 (epsilon -> .)
    OR              reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)
    CLOSEBOX        reduce using rule 142 (epsilon -> .)
    COMMA           reduce using rule 142 (epsilon -> .)
    TO              reduce using rule 142 (epsilon -> .)
    DO              reduce using rule 142 (epsilon -> .)

    funcion_punto3                 shift and go to state 214
    epsilon                        shift and go to state 215

state 174

    (60) funcion1 -> exp . funcion_punto2 funcion2
    (64) funcion_punto2 -> . epsilon
    (142) epsilon -> .

    COMMA           reduce using rule 142 (epsilon -> .)
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    funcion_punto2                 shift and go to state 216
    epsilon                        shift and go to state 217

state 175

    (94) expresion -> and generate_expresion expresion1 . expresion
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    and                            shift and go to state 72
    expresion                      shift and go to state 218
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 176

    (95) expresion1 -> OR .

    ID              reduce using rule 95 (expresion1 -> OR .)
    OPENPAR         reduce using rule 95 (expresion1 -> OR .)
    PLUS            reduce using rule 95 (expresion1 -> OR .)
    MINUS           reduce using rule 95 (expresion1 -> OR .)
    INT             reduce using rule 95 (expresion1 -> OR .)
    FLOAT           reduce using rule 95 (expresion1 -> OR .)
    CHAR            reduce using rule 95 (expresion1 -> OR .)


state 177

    (98) and -> equal generate_and and1 . and
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    equal                          shift and go to state 73
    and                            shift and go to state 219
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 178

    (99) and1 -> AND .

    ID              reduce using rule 99 (and1 -> AND .)
    OPENPAR         reduce using rule 99 (and1 -> AND .)
    PLUS            reduce using rule 99 (and1 -> AND .)
    MINUS           reduce using rule 99 (and1 -> AND .)
    INT             reduce using rule 99 (and1 -> AND .)
    FLOAT           reduce using rule 99 (and1 -> AND .)
    CHAR            reduce using rule 99 (and1 -> AND .)


state 179

    (102) equal -> compare generate_equal equal1 . equal
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    compare                        shift and go to state 74
    equal                          shift and go to state 220
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 180

    (103) equal1 -> EQ .

    ID              reduce using rule 103 (equal1 -> EQ .)
    OPENPAR         reduce using rule 103 (equal1 -> EQ .)
    PLUS            reduce using rule 103 (equal1 -> EQ .)
    MINUS           reduce using rule 103 (equal1 -> EQ .)
    INT             reduce using rule 103 (equal1 -> EQ .)
    FLOAT           reduce using rule 103 (equal1 -> EQ .)
    CHAR            reduce using rule 103 (equal1 -> EQ .)


state 181

    (104) equal1 -> NE .

    ID              reduce using rule 104 (equal1 -> NE .)
    OPENPAR         reduce using rule 104 (equal1 -> NE .)
    PLUS            reduce using rule 104 (equal1 -> NE .)
    MINUS           reduce using rule 104 (equal1 -> NE .)
    INT             reduce using rule 104 (equal1 -> NE .)
    FLOAT           reduce using rule 104 (equal1 -> NE .)
    CHAR            reduce using rule 104 (equal1 -> NE .)


state 182

    (114) exp -> termino generate_exp exp1 . exp
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    termino                        shift and go to state 75
    exp                            shift and go to state 221
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 183

    (115) exp1 -> PLUS .

    ID              reduce using rule 115 (exp1 -> PLUS .)
    OPENPAR         reduce using rule 115 (exp1 -> PLUS .)
    PLUS            reduce using rule 115 (exp1 -> PLUS .)
    MINUS           reduce using rule 115 (exp1 -> PLUS .)
    INT             reduce using rule 115 (exp1 -> PLUS .)
    FLOAT           reduce using rule 115 (exp1 -> PLUS .)
    CHAR            reduce using rule 115 (exp1 -> PLUS .)


state 184

    (116) exp1 -> MINUS .

    ID              reduce using rule 116 (exp1 -> MINUS .)
    OPENPAR         reduce using rule 116 (exp1 -> MINUS .)
    PLUS            reduce using rule 116 (exp1 -> MINUS .)
    MINUS           reduce using rule 116 (exp1 -> MINUS .)
    INT             reduce using rule 116 (exp1 -> MINUS .)
    FLOAT           reduce using rule 116 (exp1 -> MINUS .)
    CHAR            reduce using rule 116 (exp1 -> MINUS .)


state 185

    (119) termino -> factor generate_termino termino1 . termino
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    factor                         shift and go to state 76
    termino                        shift and go to state 222
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 186

    (120) termino1 -> MULTIPLY .

    ID              reduce using rule 120 (termino1 -> MULTIPLY .)
    OPENPAR         reduce using rule 120 (termino1 -> MULTIPLY .)
    PLUS            reduce using rule 120 (termino1 -> MULTIPLY .)
    MINUS           reduce using rule 120 (termino1 -> MULTIPLY .)
    INT             reduce using rule 120 (termino1 -> MULTIPLY .)
    FLOAT           reduce using rule 120 (termino1 -> MULTIPLY .)
    CHAR            reduce using rule 120 (termino1 -> MULTIPLY .)


state 187

    (121) termino1 -> DIVIDE .

    ID              reduce using rule 121 (termino1 -> DIVIDE .)
    OPENPAR         reduce using rule 121 (termino1 -> DIVIDE .)
    PLUS            reduce using rule 121 (termino1 -> DIVIDE .)
    MINUS           reduce using rule 121 (termino1 -> DIVIDE .)
    INT             reduce using rule 121 (termino1 -> DIVIDE .)
    FLOAT           reduce using rule 121 (termino1 -> DIVIDE .)
    CHAR            reduce using rule 121 (termino1 -> DIVIDE .)


state 188

    (122) termino1 -> MODULO .

    ID              reduce using rule 122 (termino1 -> MODULO .)
    OPENPAR         reduce using rule 122 (termino1 -> MODULO .)
    PLUS            reduce using rule 122 (termino1 -> MODULO .)
    MINUS           reduce using rule 122 (termino1 -> MODULO .)
    INT             reduce using rule 122 (termino1 -> MODULO .)
    FLOAT           reduce using rule 122 (termino1 -> MODULO .)
    CHAR            reduce using rule 122 (termino1 -> MODULO .)


state 189

    (125) factor -> openpar expresion closepar .

    MULTIPLY        reduce using rule 125 (factor -> openpar expresion closepar .)
    DIVIDE          reduce using rule 125 (factor -> openpar expresion closepar .)
    MODULO          reduce using rule 125 (factor -> openpar expresion closepar .)
    PLUS            reduce using rule 125 (factor -> openpar expresion closepar .)
    MINUS           reduce using rule 125 (factor -> openpar expresion closepar .)
    LT              reduce using rule 125 (factor -> openpar expresion closepar .)
    LE              reduce using rule 125 (factor -> openpar expresion closepar .)
    GT              reduce using rule 125 (factor -> openpar expresion closepar .)
    GE              reduce using rule 125 (factor -> openpar expresion closepar .)
    EQ              reduce using rule 125 (factor -> openpar expresion closepar .)
    NE              reduce using rule 125 (factor -> openpar expresion closepar .)
    AND             reduce using rule 125 (factor -> openpar expresion closepar .)
    OR              reduce using rule 125 (factor -> openpar expresion closepar .)
    SEMICOLON       reduce using rule 125 (factor -> openpar expresion closepar .)
    CLOSEPAR        reduce using rule 125 (factor -> openpar expresion closepar .)
    CLOSEBOX        reduce using rule 125 (factor -> openpar expresion closepar .)
    COMMA           reduce using rule 125 (factor -> openpar expresion closepar .)
    TO              reduce using rule 125 (factor -> openpar expresion closepar .)
    DO              reduce using rule 125 (factor -> openpar expresion closepar .)


state 190

    (134) closepar -> CLOSEPAR .

    MULTIPLY        reduce using rule 134 (closepar -> CLOSEPAR .)
    DIVIDE          reduce using rule 134 (closepar -> CLOSEPAR .)
    MODULO          reduce using rule 134 (closepar -> CLOSEPAR .)
    PLUS            reduce using rule 134 (closepar -> CLOSEPAR .)
    MINUS           reduce using rule 134 (closepar -> CLOSEPAR .)
    LT              reduce using rule 134 (closepar -> CLOSEPAR .)
    LE              reduce using rule 134 (closepar -> CLOSEPAR .)
    GT              reduce using rule 134 (closepar -> CLOSEPAR .)
    GE              reduce using rule 134 (closepar -> CLOSEPAR .)
    EQ              reduce using rule 134 (closepar -> CLOSEPAR .)
    NE              reduce using rule 134 (closepar -> CLOSEPAR .)
    AND             reduce using rule 134 (closepar -> CLOSEPAR .)
    OR              reduce using rule 134 (closepar -> CLOSEPAR .)
    SEMICOLON       reduce using rule 134 (closepar -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 134 (closepar -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 134 (closepar -> CLOSEPAR .)
    COMMA           reduce using rule 134 (closepar -> CLOSEPAR .)
    TO              reduce using rule 134 (closepar -> CLOSEPAR .)
    DO              reduce using rule 134 (closepar -> CLOSEPAR .)


state 191

    (35) funciones5 -> vars funciones_punto1 OPENCURLY funciones6 .

    MAIN            reduce using rule 35 (funciones5 -> vars funciones_punto1 OPENCURLY funciones6 .)


state 192

    (37) funciones6 -> estatutos funciones6 .

    MAIN            reduce using rule 37 (funciones6 -> estatutos funciones6 .)


state 193

    (38) funciones6 -> CLOSECURLY funciones_punto2 . funciones
    (27) funciones -> . FUNCTION funciones1
    (28) funciones -> . epsilon
    (142) epsilon -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 142 (epsilon -> .)

    funciones                      shift and go to state 223
    epsilon                        shift and go to state 224

state 194

    (40) funciones_punto2 -> epsilon .

    FUNCTION        reduce using rule 40 (funciones_punto2 -> epsilon .)
    MAIN            reduce using rule 40 (funciones_punto2 -> epsilon .)


state 195

    (13) vars3 -> OPENBOX exp CLOSEBOX . vars4
    (15) vars4 -> . SEMICOLON vars5
    (16) vars4 -> . COMMA vars2

    SEMICOLON       shift and go to state 89
    COMMA           shift and go to state 90

    vars4                          shift and go to state 225

state 196

    (128) factor1 -> OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 226


state 197

    (66) retorno -> RETURN OPENPAR exp CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 227


state 198

    (107) compare -> exp generate_compare compare1 compare .

    EQ              reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    NE              reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    AND             reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    OR              reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    SEMICOLON       reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    CLOSEPAR        reduce using rule 107 (compare -> exp generate_compare compare1 compare .)
    COMMA           reduce using rule 107 (compare -> exp generate_compare compare1 compare .)


state 199

    (67) lectura -> READ OPENPAR lista_ids CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 228


state 200

    (19) lista_ids -> ID OPENBOX . exp CLOSEBOX lista_ids1
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 229
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 201

    (20) lista_ids -> ID lista_ids1 .

    CLOSEPAR        reduce using rule 20 (lista_ids -> ID lista_ids1 .)


state 202

    (21) lista_ids1 -> COMMA . lista_ids
    (19) lista_ids -> . ID OPENBOX exp CLOSEBOX lista_ids1
    (20) lista_ids -> . ID lista_ids1

    ID              shift and go to state 162

    lista_ids                      shift and go to state 230

state 203

    (22) lista_ids1 -> epsilon .

    CLOSEPAR        reduce using rule 22 (lista_ids1 -> epsilon .)


state 204

    (68) escritura -> WRITE OPENPAR escritura1 CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 231


state 205

    (69) escritura1 -> escritura_string escritura2 .

    CLOSEPAR        reduce using rule 69 (escritura1 -> escritura_string escritura2 .)


state 206

    (71) escritura2 -> COMMA . escritura1
    (69) escritura1 -> . escritura_string escritura2
    (70) escritura1 -> . escritura_expresion escritura2
    (73) escritura_string -> . STRING
    (74) escritura_expresion -> . expresion
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    STRING          shift and go to state 166
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    escritura1                     shift and go to state 232
    escritura_string               shift and go to state 164
    escritura_expresion            shift and go to state 165
    expresion                      shift and go to state 167
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    exp                            shift and go to state 64
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 207

    (72) escritura2 -> epsilon .

    CLOSEPAR        reduce using rule 72 (escritura2 -> epsilon .)


state 208

    (70) escritura1 -> escritura_expresion escritura2 .

    CLOSEPAR        reduce using rule 70 (escritura1 -> escritura_expresion escritura2 .)


state 209

    (75) condicion -> IF OPENPAR expresion CLOSEPAR . THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1

    THEN            shift and go to state 233


state 210

    (82) while -> WHILE while_punto1 OPENPAR expresion . CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3

    CLOSEPAR        shift and go to state 234


state 211

    (86) for -> FOR for1 IS exp . for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (89) for_punto1 -> . epsilon
    (142) epsilon -> .

    TO              reduce using rule 142 (epsilon -> .)

    for_punto1                     shift and go to state 235
    epsilon                        shift and go to state 236

state 212

    (87) for1 -> ID OPENBOX exp . CLOSEBOX

    CLOSEBOX        shift and go to state 237


state 213

    (56) asignacion1 -> ID OPENBOX exp CLOSEBOX . IS
    (128) factor1 -> OPENBOX exp CLOSEBOX .

    IS              shift and go to state 238
    MULTIPLY        reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    DIVIDE          reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    MODULO          reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    PLUS            reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    MINUS           reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    LT              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    LE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    GT              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    GE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    EQ              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    NE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    AND             reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    OR              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    SEMICOLON       reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)


state 214

    (59) funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .

    SEMICOLON       reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MULTIPLY        reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    DIVIDE          reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MODULO          reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    PLUS            reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    MINUS           reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    LT              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    LE              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    GT              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    GE              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    EQ              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    NE              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    AND             reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    OR              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    CLOSEPAR        reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    CLOSEBOX        reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    COMMA           reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    TO              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)
    DO              reduce using rule 59 (funcion -> funcion_punto1 OPENPAR funcion1 funcion_punto3 .)


state 215

    (65) funcion_punto3 -> epsilon .

    SEMICOLON       reduce using rule 65 (funcion_punto3 -> epsilon .)
    MULTIPLY        reduce using rule 65 (funcion_punto3 -> epsilon .)
    DIVIDE          reduce using rule 65 (funcion_punto3 -> epsilon .)
    MODULO          reduce using rule 65 (funcion_punto3 -> epsilon .)
    PLUS            reduce using rule 65 (funcion_punto3 -> epsilon .)
    MINUS           reduce using rule 65 (funcion_punto3 -> epsilon .)
    LT              reduce using rule 65 (funcion_punto3 -> epsilon .)
    LE              reduce using rule 65 (funcion_punto3 -> epsilon .)
    GT              reduce using rule 65 (funcion_punto3 -> epsilon .)
    GE              reduce using rule 65 (funcion_punto3 -> epsilon .)
    EQ              reduce using rule 65 (funcion_punto3 -> epsilon .)
    NE              reduce using rule 65 (funcion_punto3 -> epsilon .)
    AND             reduce using rule 65 (funcion_punto3 -> epsilon .)
    OR              reduce using rule 65 (funcion_punto3 -> epsilon .)
    CLOSEPAR        reduce using rule 65 (funcion_punto3 -> epsilon .)
    CLOSEBOX        reduce using rule 65 (funcion_punto3 -> epsilon .)
    COMMA           reduce using rule 65 (funcion_punto3 -> epsilon .)
    TO              reduce using rule 65 (funcion_punto3 -> epsilon .)
    DO              reduce using rule 65 (funcion_punto3 -> epsilon .)


state 216

    (60) funcion1 -> exp funcion_punto2 . funcion2
    (61) funcion2 -> . COMMA funcion1
    (62) funcion2 -> . CLOSEPAR

    COMMA           shift and go to state 240
    CLOSEPAR        shift and go to state 241

    funcion2                       shift and go to state 239

state 217

    (64) funcion_punto2 -> epsilon .

    COMMA           reduce using rule 64 (funcion_punto2 -> epsilon .)
    CLOSEPAR        reduce using rule 64 (funcion_punto2 -> epsilon .)


state 218

    (94) expresion -> and generate_expresion expresion1 expresion .

    SEMICOLON       reduce using rule 94 (expresion -> and generate_expresion expresion1 expresion .)
    CLOSEPAR        reduce using rule 94 (expresion -> and generate_expresion expresion1 expresion .)
    COMMA           reduce using rule 94 (expresion -> and generate_expresion expresion1 expresion .)


state 219

    (98) and -> equal generate_and and1 and .

    OR              reduce using rule 98 (and -> equal generate_and and1 and .)
    SEMICOLON       reduce using rule 98 (and -> equal generate_and and1 and .)
    CLOSEPAR        reduce using rule 98 (and -> equal generate_and and1 and .)
    COMMA           reduce using rule 98 (and -> equal generate_and and1 and .)


state 220

    (102) equal -> compare generate_equal equal1 equal .

    AND             reduce using rule 102 (equal -> compare generate_equal equal1 equal .)
    OR              reduce using rule 102 (equal -> compare generate_equal equal1 equal .)
    SEMICOLON       reduce using rule 102 (equal -> compare generate_equal equal1 equal .)
    CLOSEPAR        reduce using rule 102 (equal -> compare generate_equal equal1 equal .)
    COMMA           reduce using rule 102 (equal -> compare generate_equal equal1 equal .)


state 221

    (114) exp -> termino generate_exp exp1 exp .

    LT              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    LE              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    GT              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    GE              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    EQ              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    NE              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    AND             reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    OR              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    SEMICOLON       reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    CLOSEPAR        reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    CLOSEBOX        reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    COMMA           reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    TO              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)
    DO              reduce using rule 114 (exp -> termino generate_exp exp1 exp .)


state 222

    (119) termino -> factor generate_termino termino1 termino .

    PLUS            reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    MINUS           reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    LT              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    LE              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    GT              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    GE              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    EQ              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    NE              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    AND             reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    OR              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    SEMICOLON       reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    CLOSEPAR        reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    CLOSEBOX        reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    COMMA           reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    TO              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)
    DO              reduce using rule 119 (termino -> factor generate_termino termino1 termino .)


state 223

    (38) funciones6 -> CLOSECURLY funciones_punto2 funciones .

    MAIN            reduce using rule 38 (funciones6 -> CLOSECURLY funciones_punto2 funciones .)


state 224

    (28) funciones -> epsilon .

    MAIN            reduce using rule 28 (funciones -> epsilon .)


state 225

    (13) vars3 -> OPENBOX exp CLOSEBOX vars4 .

    FUNCTION        reduce using rule 13 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)
    MAIN            reduce using rule 13 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)
    OPENCURLY       reduce using rule 13 (vars3 -> OPENBOX exp CLOSEBOX vars4 .)


state 226

    (128) factor1 -> OPENBOX exp CLOSEBOX .

    MULTIPLY        reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    DIVIDE          reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    MODULO          reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    PLUS            reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    MINUS           reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    LT              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    LE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    GT              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    GE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    EQ              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    NE              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    AND             reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    OR              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    SEMICOLON       reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    CLOSEPAR        reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    CLOSEBOX        reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    COMMA           reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    TO              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)
    DO              reduce using rule 128 (factor1 -> OPENBOX exp CLOSEBOX .)


state 227

    (66) retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    READ            reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    IF              reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    ID              reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    INT             reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 66 (retorno -> RETURN OPENPAR exp CLOSEPAR SEMICOLON .)


state 228

    (67) lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    READ            reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    IF              reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    ID              reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    INT             reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 67 (lectura -> READ OPENPAR lista_ids CLOSEPAR SEMICOLON .)


state 229

    (19) lista_ids -> ID OPENBOX exp . CLOSEBOX lista_ids1

    CLOSEBOX        shift and go to state 242


state 230

    (21) lista_ids1 -> COMMA lista_ids .

    CLOSEPAR        reduce using rule 21 (lista_ids1 -> COMMA lista_ids .)


state 231

    (68) escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .

    RETURN          reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    READ            reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WRITE           reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    IF              reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    WHILE           reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FOR             reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    ID              reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    OPENPAR         reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    PLUS            reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    MINUS           reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    INT             reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    FLOAT           reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CHAR            reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)
    CLOSECURLY      reduce using rule 68 (escritura -> WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON .)


state 232

    (71) escritura2 -> COMMA escritura1 .

    CLOSEPAR        reduce using rule 71 (escritura2 -> COMMA escritura1 .)


state 233

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN . condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (78) condicion_punto1 -> . epsilon
    (142) epsilon -> .

    OPENCURLY       reduce using rule 142 (epsilon -> .)

    condicion_punto1               shift and go to state 243
    epsilon                        shift and go to state 244

state 234

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR . while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (84) while_punto2 -> . epsilon
    (142) epsilon -> .

    DO              reduce using rule 142 (epsilon -> .)

    while_punto2                   shift and go to state 245
    epsilon                        shift and go to state 246

state 235

    (86) for -> FOR for1 IS exp for_punto1 . TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3

    TO              shift and go to state 247


state 236

    (89) for_punto1 -> epsilon .

    TO              reduce using rule 89 (for_punto1 -> epsilon .)


state 237

    (87) for1 -> ID OPENBOX exp CLOSEBOX .

    IS              reduce using rule 87 (for1 -> ID OPENBOX exp CLOSEBOX .)


state 238

    (56) asignacion1 -> ID OPENBOX exp CLOSEBOX IS .

    ID              reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    OPENPAR         reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    PLUS            reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    MINUS           reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    INT             reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    FLOAT           reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)
    CHAR            reduce using rule 56 (asignacion1 -> ID OPENBOX exp CLOSEBOX IS .)


state 239

    (60) funcion1 -> exp funcion_punto2 funcion2 .

    SEMICOLON       reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    MULTIPLY        reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    DIVIDE          reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    MODULO          reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    PLUS            reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    MINUS           reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    LT              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    LE              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    GT              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    GE              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    EQ              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    NE              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    AND             reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    OR              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    CLOSEPAR        reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    CLOSEBOX        reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    COMMA           reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    TO              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)
    DO              reduce using rule 60 (funcion1 -> exp funcion_punto2 funcion2 .)


state 240

    (61) funcion2 -> COMMA . funcion1
    (60) funcion1 -> . exp funcion_punto2 funcion2
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    funcion1                       shift and go to state 248
    exp                            shift and go to state 174
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 241

    (62) funcion2 -> CLOSEPAR .

    SEMICOLON       reduce using rule 62 (funcion2 -> CLOSEPAR .)
    MULTIPLY        reduce using rule 62 (funcion2 -> CLOSEPAR .)
    DIVIDE          reduce using rule 62 (funcion2 -> CLOSEPAR .)
    MODULO          reduce using rule 62 (funcion2 -> CLOSEPAR .)
    PLUS            reduce using rule 62 (funcion2 -> CLOSEPAR .)
    MINUS           reduce using rule 62 (funcion2 -> CLOSEPAR .)
    LT              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    LE              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    GT              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    GE              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    EQ              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    NE              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    AND             reduce using rule 62 (funcion2 -> CLOSEPAR .)
    OR              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    CLOSEPAR        reduce using rule 62 (funcion2 -> CLOSEPAR .)
    CLOSEBOX        reduce using rule 62 (funcion2 -> CLOSEPAR .)
    COMMA           reduce using rule 62 (funcion2 -> CLOSEPAR .)
    TO              reduce using rule 62 (funcion2 -> CLOSEPAR .)
    DO              reduce using rule 62 (funcion2 -> CLOSEPAR .)


state 242

    (19) lista_ids -> ID OPENBOX exp CLOSEBOX . lista_ids1
    (21) lista_ids1 -> . COMMA lista_ids
    (22) lista_ids1 -> . epsilon
    (142) epsilon -> .

    COMMA           shift and go to state 202
    CLOSEPAR        reduce using rule 142 (epsilon -> .)

    lista_ids1                     shift and go to state 249
    epsilon                        shift and go to state 203

state 243

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 . OPENCURLY estatutos CLOSECURLY condicion1

    OPENCURLY       shift and go to state 250


state 244

    (78) condicion_punto1 -> epsilon .

    OPENCURLY       reduce using rule 78 (condicion_punto1 -> epsilon .)


state 245

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 . DO OPENCURLY estatutos CLOSECURLY while_punto3

    DO              shift and go to state 251


state 246

    (84) while_punto2 -> epsilon .

    DO              reduce using rule 84 (while_punto2 -> epsilon .)


state 247

    (86) for -> FOR for1 IS exp for_punto1 TO . exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (63) funcion_punto1 -> . ID
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 104
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 252
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    funcion                        shift and go to state 105
    factor2                        shift and go to state 78
    funcion_punto1                 shift and go to state 71
    epsilon                        shift and go to state 106

state 248

    (61) funcion2 -> COMMA funcion1 .

    SEMICOLON       reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    MULTIPLY        reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    DIVIDE          reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    MODULO          reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    PLUS            reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    MINUS           reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    LT              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    LE              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    GT              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    GE              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    EQ              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    NE              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    AND             reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    OR              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    CLOSEPAR        reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    CLOSEBOX        reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    COMMA           reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    TO              reduce using rule 61 (funcion2 -> COMMA funcion1 .)
    DO              reduce using rule 61 (funcion2 -> COMMA funcion1 .)


state 249

    (19) lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1 .

    CLOSEPAR        reduce using rule 19 (lista_ids -> ID OPENBOX exp CLOSEBOX lista_ids1 .)


state 250

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY . estatutos CLOSECURLY condicion1
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    expresion                      shift and go to state 61
    estatutos                      shift and go to state 253
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 251

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO . OPENCURLY estatutos CLOSECURLY while_punto3

    OPENCURLY       shift and go to state 254


state 252

    (86) for -> FOR for1 IS exp for_punto1 TO exp . for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (90) for_punto2 -> . epsilon
    (142) epsilon -> .

    DO              reduce using rule 142 (epsilon -> .)

    for_punto2                     shift and go to state 255
    epsilon                        shift and go to state 256

state 253

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos . CLOSECURLY condicion1

    CLOSECURLY      shift and go to state 257


state 254

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY . estatutos CLOSECURLY while_punto3
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    expresion                      shift and go to state 61
    estatutos                      shift and go to state 258
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 255

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 . DO OPENCURLY estatutos CLOSECURLY for_punto3

    DO              shift and go to state 259


state 256

    (90) for_punto2 -> epsilon .

    DO              reduce using rule 90 (for_punto2 -> epsilon .)


state 257

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY . condicion1
    (76) condicion1 -> . ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (77) condicion1 -> . condicion_punto2 epsilon
    (79) condicion_punto2 -> . epsilon
    (142) epsilon -> .

    ELSE            shift and go to state 261
    RETURN          reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    OPENPAR         reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    CLOSECURLY      reduce using rule 142 (epsilon -> .)

    condicion1                     shift and go to state 260
    condicion_punto2               shift and go to state 262
    epsilon                        shift and go to state 263

state 258

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos . CLOSECURLY while_punto3

    CLOSECURLY      shift and go to state 264


state 259

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO . OPENCURLY estatutos CLOSECURLY for_punto3

    OPENCURLY       shift and go to state 265


state 260

    (75) condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .

    RETURN          reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    READ            reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WRITE           reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    IF              reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    WHILE           reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FOR             reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    ID              reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    OPENPAR         reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    PLUS            reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    MINUS           reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    INT             reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    FLOAT           reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CHAR            reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)
    CLOSECURLY      reduce using rule 75 (condicion -> IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1 .)


state 261

    (76) condicion1 -> ELSE . condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4
    (80) condicion_punto3 -> . epsilon
    (142) epsilon -> .

    OPENCURLY       reduce using rule 142 (epsilon -> .)

    condicion_punto3               shift and go to state 266
    epsilon                        shift and go to state 267

state 262

    (77) condicion1 -> condicion_punto2 . epsilon
    (142) epsilon -> .

    RETURN          reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    OPENPAR         reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    CLOSECURLY      reduce using rule 142 (epsilon -> .)

    epsilon                        shift and go to state 268

state 263

    (79) condicion_punto2 -> epsilon .

    RETURN          reduce using rule 79 (condicion_punto2 -> epsilon .)
    READ            reduce using rule 79 (condicion_punto2 -> epsilon .)
    WRITE           reduce using rule 79 (condicion_punto2 -> epsilon .)
    IF              reduce using rule 79 (condicion_punto2 -> epsilon .)
    WHILE           reduce using rule 79 (condicion_punto2 -> epsilon .)
    FOR             reduce using rule 79 (condicion_punto2 -> epsilon .)
    ID              reduce using rule 79 (condicion_punto2 -> epsilon .)
    OPENPAR         reduce using rule 79 (condicion_punto2 -> epsilon .)
    PLUS            reduce using rule 79 (condicion_punto2 -> epsilon .)
    MINUS           reduce using rule 79 (condicion_punto2 -> epsilon .)
    INT             reduce using rule 79 (condicion_punto2 -> epsilon .)
    FLOAT           reduce using rule 79 (condicion_punto2 -> epsilon .)
    CHAR            reduce using rule 79 (condicion_punto2 -> epsilon .)
    CLOSECURLY      reduce using rule 79 (condicion_punto2 -> epsilon .)


state 264

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY . while_punto3
    (85) while_punto3 -> . epsilon
    (142) epsilon -> .

    RETURN          reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    OPENPAR         reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    CLOSECURLY      reduce using rule 142 (epsilon -> .)

    while_punto3                   shift and go to state 269
    epsilon                        shift and go to state 270

state 265

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY . estatutos CLOSECURLY for_punto3
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    exp                            shift and go to state 64
    estatutos                      shift and go to state 271
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 266

    (76) condicion1 -> ELSE condicion_punto3 . OPENCURLY estatutos CLOSECURLY condicion_punto4

    OPENCURLY       shift and go to state 272


state 267

    (80) condicion_punto3 -> epsilon .

    OPENCURLY       reduce using rule 80 (condicion_punto3 -> epsilon .)


state 268

    (77) condicion1 -> condicion_punto2 epsilon .

    RETURN          reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    READ            reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    WRITE           reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    IF              reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    WHILE           reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    FOR             reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    ID              reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    OPENPAR         reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    PLUS            reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    MINUS           reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    INT             reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    FLOAT           reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    CHAR            reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)
    CLOSECURLY      reduce using rule 77 (condicion1 -> condicion_punto2 epsilon .)


state 269

    (82) while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .

    RETURN          reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    READ            reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WRITE           reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    IF              reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    WHILE           reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FOR             reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    ID              reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    OPENPAR         reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    PLUS            reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    MINUS           reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    INT             reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    FLOAT           reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CHAR            reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)
    CLOSECURLY      reduce using rule 82 (while -> WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3 .)


state 270

    (85) while_punto3 -> epsilon .

    RETURN          reduce using rule 85 (while_punto3 -> epsilon .)
    READ            reduce using rule 85 (while_punto3 -> epsilon .)
    WRITE           reduce using rule 85 (while_punto3 -> epsilon .)
    IF              reduce using rule 85 (while_punto3 -> epsilon .)
    WHILE           reduce using rule 85 (while_punto3 -> epsilon .)
    FOR             reduce using rule 85 (while_punto3 -> epsilon .)
    ID              reduce using rule 85 (while_punto3 -> epsilon .)
    OPENPAR         reduce using rule 85 (while_punto3 -> epsilon .)
    PLUS            reduce using rule 85 (while_punto3 -> epsilon .)
    MINUS           reduce using rule 85 (while_punto3 -> epsilon .)
    INT             reduce using rule 85 (while_punto3 -> epsilon .)
    FLOAT           reduce using rule 85 (while_punto3 -> epsilon .)
    CHAR            reduce using rule 85 (while_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 85 (while_punto3 -> epsilon .)


state 271

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos . CLOSECURLY for_punto3

    CLOSECURLY      shift and go to state 273


state 272

    (76) condicion1 -> ELSE condicion_punto3 OPENCURLY . estatutos CLOSECURLY condicion_punto4
    (44) estatutos -> . asignacion estatutos1
    (45) estatutos -> . llamada estatutos1
    (46) estatutos -> . retorno estatutos1
    (47) estatutos -> . lectura estatutos1
    (48) estatutos -> . escritura estatutos1
    (49) estatutos -> . condicion estatutos1
    (50) estatutos -> . while estatutos1
    (51) estatutos -> . for estatutos1
    (52) estatutos -> . est_exp estatutos1
    (55) asignacion -> . asignacion1 expresion SEMICOLON
    (58) llamada -> . funcion SEMICOLON
    (66) retorno -> . RETURN OPENPAR exp CLOSEPAR SEMICOLON
    (67) lectura -> . READ OPENPAR lista_ids CLOSEPAR SEMICOLON
    (68) escritura -> . WRITE OPENPAR escritura1 CLOSEPAR SEMICOLON
    (75) condicion -> . IF OPENPAR expresion CLOSEPAR THEN condicion_punto1 OPENCURLY estatutos CLOSECURLY condicion1
    (82) while -> . WHILE while_punto1 OPENPAR expresion CLOSEPAR while_punto2 DO OPENCURLY estatutos CLOSECURLY while_punto3
    (86) for -> . FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3
    (92) est_exp -> . expresion SEMICOLON
    (56) asignacion1 -> . ID OPENBOX exp CLOSEBOX IS
    (57) asignacion1 -> . ID IS
    (59) funcion -> . funcion_punto1 OPENPAR funcion1 funcion_punto3
    (93) expresion -> . and generate_expresion
    (94) expresion -> . and generate_expresion expresion1 expresion
    (63) funcion_punto1 -> . ID
    (97) and -> . equal generate_and
    (98) and -> . equal generate_and and1 and
    (101) equal -> . compare generate_equal
    (102) equal -> . compare generate_equal equal1 equal
    (106) compare -> . exp generate_compare
    (107) compare -> . exp generate_compare compare1 compare
    (113) exp -> . termino generate_exp
    (114) exp -> . termino generate_exp exp1 exp
    (118) termino -> . factor generate_termino
    (119) termino -> . factor generate_termino termino1 termino
    (124) factor -> . ID factor1
    (125) factor -> . openpar expresion closepar
    (126) factor -> . funcion
    (127) factor -> . factor2 varcte
    (133) openpar -> . OPENPAR
    (130) factor2 -> . PLUS
    (131) factor2 -> . MINUS
    (132) factor2 -> . epsilon
    (142) epsilon -> .

  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 63
    READ            shift and go to state 65
    WRITE           shift and go to state 66
    IF              shift and go to state 67
    WHILE           shift and go to state 68
    FOR             shift and go to state 69
    ID              shift and go to state 70
    OPENPAR         shift and go to state 47
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)

  ! ID              [ reduce using rule 142 (epsilon -> .) ]

    estatutos                      shift and go to state 274
    asignacion                     shift and go to state 51
    llamada                        shift and go to state 52
    retorno                        shift and go to state 53
    lectura                        shift and go to state 54
    escritura                      shift and go to state 55
    condicion                      shift and go to state 56
    while                          shift and go to state 57
    for                            shift and go to state 58
    est_exp                        shift and go to state 59
    asignacion1                    shift and go to state 60
    expresion                      shift and go to state 61
    funcion                        shift and go to state 62
    exp                            shift and go to state 64
    funcion_punto1                 shift and go to state 71
    and                            shift and go to state 72
    equal                          shift and go to state 73
    compare                        shift and go to state 74
    termino                        shift and go to state 75
    factor                         shift and go to state 76
    openpar                        shift and go to state 77
    factor2                        shift and go to state 78
    epsilon                        shift and go to state 106

state 273

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY . for_punto3
    (91) for_punto3 -> . epsilon
    (142) epsilon -> .

    RETURN          reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    OPENPAR         reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    CLOSECURLY      reduce using rule 142 (epsilon -> .)

    for_punto3                     shift and go to state 275
    epsilon                        shift and go to state 276

state 274

    (76) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos . CLOSECURLY condicion_punto4

    CLOSECURLY      shift and go to state 277


state 275

    (86) for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .

    RETURN          reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    READ            reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WRITE           reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    IF              reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    WHILE           reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FOR             reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    ID              reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    OPENPAR         reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    PLUS            reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    MINUS           reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    INT             reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    FLOAT           reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CHAR            reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)
    CLOSECURLY      reduce using rule 86 (for -> FOR for1 IS exp for_punto1 TO exp for_punto2 DO OPENCURLY estatutos CLOSECURLY for_punto3 .)


state 276

    (91) for_punto3 -> epsilon .

    RETURN          reduce using rule 91 (for_punto3 -> epsilon .)
    READ            reduce using rule 91 (for_punto3 -> epsilon .)
    WRITE           reduce using rule 91 (for_punto3 -> epsilon .)
    IF              reduce using rule 91 (for_punto3 -> epsilon .)
    WHILE           reduce using rule 91 (for_punto3 -> epsilon .)
    FOR             reduce using rule 91 (for_punto3 -> epsilon .)
    ID              reduce using rule 91 (for_punto3 -> epsilon .)
    OPENPAR         reduce using rule 91 (for_punto3 -> epsilon .)
    PLUS            reduce using rule 91 (for_punto3 -> epsilon .)
    MINUS           reduce using rule 91 (for_punto3 -> epsilon .)
    INT             reduce using rule 91 (for_punto3 -> epsilon .)
    FLOAT           reduce using rule 91 (for_punto3 -> epsilon .)
    CHAR            reduce using rule 91 (for_punto3 -> epsilon .)
    CLOSECURLY      reduce using rule 91 (for_punto3 -> epsilon .)


state 277

    (76) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY . condicion_punto4
    (81) condicion_punto4 -> . epsilon
    (142) epsilon -> .

    RETURN          reduce using rule 142 (epsilon -> .)
    READ            reduce using rule 142 (epsilon -> .)
    WRITE           reduce using rule 142 (epsilon -> .)
    IF              reduce using rule 142 (epsilon -> .)
    WHILE           reduce using rule 142 (epsilon -> .)
    FOR             reduce using rule 142 (epsilon -> .)
    ID              reduce using rule 142 (epsilon -> .)
    OPENPAR         reduce using rule 142 (epsilon -> .)
    PLUS            reduce using rule 142 (epsilon -> .)
    MINUS           reduce using rule 142 (epsilon -> .)
    INT             reduce using rule 142 (epsilon -> .)
    FLOAT           reduce using rule 142 (epsilon -> .)
    CHAR            reduce using rule 142 (epsilon -> .)
    CLOSECURLY      reduce using rule 142 (epsilon -> .)

    condicion_punto4               shift and go to state 278
    epsilon                        shift and go to state 279

state 278

    (76) condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .

    RETURN          reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    READ            reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WRITE           reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    IF              reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    WHILE           reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FOR             reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    ID              reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    OPENPAR         reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    PLUS            reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    MINUS           reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    INT             reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    FLOAT           reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CHAR            reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)
    CLOSECURLY      reduce using rule 76 (condicion1 -> ELSE condicion_punto3 OPENCURLY estatutos CLOSECURLY condicion_punto4 .)


state 279

    (81) condicion_punto4 -> epsilon .

    RETURN          reduce using rule 81 (condicion_punto4 -> epsilon .)
    READ            reduce using rule 81 (condicion_punto4 -> epsilon .)
    WRITE           reduce using rule 81 (condicion_punto4 -> epsilon .)
    IF              reduce using rule 81 (condicion_punto4 -> epsilon .)
    WHILE           reduce using rule 81 (condicion_punto4 -> epsilon .)
    FOR             reduce using rule 81 (condicion_punto4 -> epsilon .)
    ID              reduce using rule 81 (condicion_punto4 -> epsilon .)
    OPENPAR         reduce using rule 81 (condicion_punto4 -> epsilon .)
    PLUS            reduce using rule 81 (condicion_punto4 -> epsilon .)
    MINUS           reduce using rule 81 (condicion_punto4 -> epsilon .)
    INT             reduce using rule 81 (condicion_punto4 -> epsilon .)
    FLOAT           reduce using rule 81 (condicion_punto4 -> epsilon .)
    CHAR            reduce using rule 81 (condicion_punto4 -> epsilon .)
    CLOSECURLY      reduce using rule 81 (condicion_punto4 -> epsilon .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 53 resolved as shift
WARNING: shift/reduce conflict for READ in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 55 resolved as shift
WARNING: shift/reduce conflict for READ in state 55 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 56 resolved as shift
WARNING: shift/reduce conflict for READ in state 56 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 57 resolved as shift
WARNING: shift/reduce conflict for READ in state 57 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 58 resolved as shift
WARNING: shift/reduce conflict for READ in state 58 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 59 resolved as shift
WARNING: shift/reduce conflict for READ in state 59 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for OPENPAR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 169 resolved as shift
WARNING: shift/reduce conflict for ID in state 170 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 177 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 182 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 250 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 265 resolved as shift
WARNING: shift/reduce conflict for ID in state 272 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (programa2 -> epsilon)
WARNING: rejected rule (funciones -> epsilon) in state 9
WARNING: reduce/reduce conflict in state 94 resolved using rule (estatutos1 -> epsilon)
WARNING: rejected rule (factor2 -> epsilon) in state 94
